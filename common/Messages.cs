#if Mediator_Large_Project

using Mediator;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;

// csharpier-ignore-start
public sealed record TestRequest0() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest0Handler : IRequestHandler<TestRequest0, int>, MediatR.IRequestHandler<TestRequest0, int> { public ValueTask<int> Handle(TestRequest0 request, CancellationToken cancellationToken) => new ValueTask<int>(0); Task<int> MediatR.IRequestHandler<TestRequest0, int>.Handle(TestRequest0 request, CancellationToken cancellationToken) => Task.FromResult(0); }
public sealed record TestRequest1() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest1Handler : IRequestHandler<TestRequest1, int>, MediatR.IRequestHandler<TestRequest1, int> { public ValueTask<int> Handle(TestRequest1 request, CancellationToken cancellationToken) => new ValueTask<int>(1); Task<int> MediatR.IRequestHandler<TestRequest1, int>.Handle(TestRequest1 request, CancellationToken cancellationToken) => Task.FromResult(1); }
public sealed record TestRequest2() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest2Handler : IRequestHandler<TestRequest2, int>, MediatR.IRequestHandler<TestRequest2, int> { public ValueTask<int> Handle(TestRequest2 request, CancellationToken cancellationToken) => new ValueTask<int>(2); Task<int> MediatR.IRequestHandler<TestRequest2, int>.Handle(TestRequest2 request, CancellationToken cancellationToken) => Task.FromResult(2); }
public sealed record TestRequest3() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest3Handler : IRequestHandler<TestRequest3, int>, MediatR.IRequestHandler<TestRequest3, int> { public ValueTask<int> Handle(TestRequest3 request, CancellationToken cancellationToken) => new ValueTask<int>(3); Task<int> MediatR.IRequestHandler<TestRequest3, int>.Handle(TestRequest3 request, CancellationToken cancellationToken) => Task.FromResult(3); }
public sealed record TestRequest4() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest4Handler : IRequestHandler<TestRequest4, int>, MediatR.IRequestHandler<TestRequest4, int> { public ValueTask<int> Handle(TestRequest4 request, CancellationToken cancellationToken) => new ValueTask<int>(4); Task<int> MediatR.IRequestHandler<TestRequest4, int>.Handle(TestRequest4 request, CancellationToken cancellationToken) => Task.FromResult(4); }
public sealed record TestRequest5() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest5Handler : IRequestHandler<TestRequest5, int>, MediatR.IRequestHandler<TestRequest5, int> { public ValueTask<int> Handle(TestRequest5 request, CancellationToken cancellationToken) => new ValueTask<int>(5); Task<int> MediatR.IRequestHandler<TestRequest5, int>.Handle(TestRequest5 request, CancellationToken cancellationToken) => Task.FromResult(5); }
public sealed record TestRequest6() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest6Handler : IRequestHandler<TestRequest6, int>, MediatR.IRequestHandler<TestRequest6, int> { public ValueTask<int> Handle(TestRequest6 request, CancellationToken cancellationToken) => new ValueTask<int>(6); Task<int> MediatR.IRequestHandler<TestRequest6, int>.Handle(TestRequest6 request, CancellationToken cancellationToken) => Task.FromResult(6); }
public sealed record TestRequest7() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest7Handler : IRequestHandler<TestRequest7, int>, MediatR.IRequestHandler<TestRequest7, int> { public ValueTask<int> Handle(TestRequest7 request, CancellationToken cancellationToken) => new ValueTask<int>(7); Task<int> MediatR.IRequestHandler<TestRequest7, int>.Handle(TestRequest7 request, CancellationToken cancellationToken) => Task.FromResult(7); }
public sealed record TestRequest8() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest8Handler : IRequestHandler<TestRequest8, int>, MediatR.IRequestHandler<TestRequest8, int> { public ValueTask<int> Handle(TestRequest8 request, CancellationToken cancellationToken) => new ValueTask<int>(8); Task<int> MediatR.IRequestHandler<TestRequest8, int>.Handle(TestRequest8 request, CancellationToken cancellationToken) => Task.FromResult(8); }
public sealed record TestRequest9() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest9Handler : IRequestHandler<TestRequest9, int>, MediatR.IRequestHandler<TestRequest9, int> { public ValueTask<int> Handle(TestRequest9 request, CancellationToken cancellationToken) => new ValueTask<int>(9); Task<int> MediatR.IRequestHandler<TestRequest9, int>.Handle(TestRequest9 request, CancellationToken cancellationToken) => Task.FromResult(9); }
public sealed record TestRequest10() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest10Handler : IRequestHandler<TestRequest10, int>, MediatR.IRequestHandler<TestRequest10, int> { public ValueTask<int> Handle(TestRequest10 request, CancellationToken cancellationToken) => new ValueTask<int>(10); Task<int> MediatR.IRequestHandler<TestRequest10, int>.Handle(TestRequest10 request, CancellationToken cancellationToken) => Task.FromResult(10); }
public sealed record TestRequest11() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest11Handler : IRequestHandler<TestRequest11, int>, MediatR.IRequestHandler<TestRequest11, int> { public ValueTask<int> Handle(TestRequest11 request, CancellationToken cancellationToken) => new ValueTask<int>(11); Task<int> MediatR.IRequestHandler<TestRequest11, int>.Handle(TestRequest11 request, CancellationToken cancellationToken) => Task.FromResult(11); }
public sealed record TestRequest12() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest12Handler : IRequestHandler<TestRequest12, int>, MediatR.IRequestHandler<TestRequest12, int> { public ValueTask<int> Handle(TestRequest12 request, CancellationToken cancellationToken) => new ValueTask<int>(12); Task<int> MediatR.IRequestHandler<TestRequest12, int>.Handle(TestRequest12 request, CancellationToken cancellationToken) => Task.FromResult(12); }
public sealed record TestRequest13() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest13Handler : IRequestHandler<TestRequest13, int>, MediatR.IRequestHandler<TestRequest13, int> { public ValueTask<int> Handle(TestRequest13 request, CancellationToken cancellationToken) => new ValueTask<int>(13); Task<int> MediatR.IRequestHandler<TestRequest13, int>.Handle(TestRequest13 request, CancellationToken cancellationToken) => Task.FromResult(13); }
public sealed record TestRequest14() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest14Handler : IRequestHandler<TestRequest14, int>, MediatR.IRequestHandler<TestRequest14, int> { public ValueTask<int> Handle(TestRequest14 request, CancellationToken cancellationToken) => new ValueTask<int>(14); Task<int> MediatR.IRequestHandler<TestRequest14, int>.Handle(TestRequest14 request, CancellationToken cancellationToken) => Task.FromResult(14); }
public sealed record TestRequest15() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest15Handler : IRequestHandler<TestRequest15, int>, MediatR.IRequestHandler<TestRequest15, int> { public ValueTask<int> Handle(TestRequest15 request, CancellationToken cancellationToken) => new ValueTask<int>(15); Task<int> MediatR.IRequestHandler<TestRequest15, int>.Handle(TestRequest15 request, CancellationToken cancellationToken) => Task.FromResult(15); }
public sealed record TestRequest16() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest16Handler : IRequestHandler<TestRequest16, int>, MediatR.IRequestHandler<TestRequest16, int> { public ValueTask<int> Handle(TestRequest16 request, CancellationToken cancellationToken) => new ValueTask<int>(16); Task<int> MediatR.IRequestHandler<TestRequest16, int>.Handle(TestRequest16 request, CancellationToken cancellationToken) => Task.FromResult(16); }
public sealed record TestRequest17() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest17Handler : IRequestHandler<TestRequest17, int>, MediatR.IRequestHandler<TestRequest17, int> { public ValueTask<int> Handle(TestRequest17 request, CancellationToken cancellationToken) => new ValueTask<int>(17); Task<int> MediatR.IRequestHandler<TestRequest17, int>.Handle(TestRequest17 request, CancellationToken cancellationToken) => Task.FromResult(17); }
public sealed record TestRequest18() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest18Handler : IRequestHandler<TestRequest18, int>, MediatR.IRequestHandler<TestRequest18, int> { public ValueTask<int> Handle(TestRequest18 request, CancellationToken cancellationToken) => new ValueTask<int>(18); Task<int> MediatR.IRequestHandler<TestRequest18, int>.Handle(TestRequest18 request, CancellationToken cancellationToken) => Task.FromResult(18); }
public sealed record TestRequest19() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest19Handler : IRequestHandler<TestRequest19, int>, MediatR.IRequestHandler<TestRequest19, int> { public ValueTask<int> Handle(TestRequest19 request, CancellationToken cancellationToken) => new ValueTask<int>(19); Task<int> MediatR.IRequestHandler<TestRequest19, int>.Handle(TestRequest19 request, CancellationToken cancellationToken) => Task.FromResult(19); }
public sealed record TestRequest20() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest20Handler : IRequestHandler<TestRequest20, int>, MediatR.IRequestHandler<TestRequest20, int> { public ValueTask<int> Handle(TestRequest20 request, CancellationToken cancellationToken) => new ValueTask<int>(20); Task<int> MediatR.IRequestHandler<TestRequest20, int>.Handle(TestRequest20 request, CancellationToken cancellationToken) => Task.FromResult(20); }
public sealed record TestRequest21() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest21Handler : IRequestHandler<TestRequest21, int>, MediatR.IRequestHandler<TestRequest21, int> { public ValueTask<int> Handle(TestRequest21 request, CancellationToken cancellationToken) => new ValueTask<int>(21); Task<int> MediatR.IRequestHandler<TestRequest21, int>.Handle(TestRequest21 request, CancellationToken cancellationToken) => Task.FromResult(21); }
public sealed record TestRequest22() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest22Handler : IRequestHandler<TestRequest22, int>, MediatR.IRequestHandler<TestRequest22, int> { public ValueTask<int> Handle(TestRequest22 request, CancellationToken cancellationToken) => new ValueTask<int>(22); Task<int> MediatR.IRequestHandler<TestRequest22, int>.Handle(TestRequest22 request, CancellationToken cancellationToken) => Task.FromResult(22); }
public sealed record TestRequest23() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest23Handler : IRequestHandler<TestRequest23, int>, MediatR.IRequestHandler<TestRequest23, int> { public ValueTask<int> Handle(TestRequest23 request, CancellationToken cancellationToken) => new ValueTask<int>(23); Task<int> MediatR.IRequestHandler<TestRequest23, int>.Handle(TestRequest23 request, CancellationToken cancellationToken) => Task.FromResult(23); }
public sealed record TestRequest24() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest24Handler : IRequestHandler<TestRequest24, int>, MediatR.IRequestHandler<TestRequest24, int> { public ValueTask<int> Handle(TestRequest24 request, CancellationToken cancellationToken) => new ValueTask<int>(24); Task<int> MediatR.IRequestHandler<TestRequest24, int>.Handle(TestRequest24 request, CancellationToken cancellationToken) => Task.FromResult(24); }
public sealed record TestRequest25() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest25Handler : IRequestHandler<TestRequest25, int>, MediatR.IRequestHandler<TestRequest25, int> { public ValueTask<int> Handle(TestRequest25 request, CancellationToken cancellationToken) => new ValueTask<int>(25); Task<int> MediatR.IRequestHandler<TestRequest25, int>.Handle(TestRequest25 request, CancellationToken cancellationToken) => Task.FromResult(25); }
public sealed record TestRequest26() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest26Handler : IRequestHandler<TestRequest26, int>, MediatR.IRequestHandler<TestRequest26, int> { public ValueTask<int> Handle(TestRequest26 request, CancellationToken cancellationToken) => new ValueTask<int>(26); Task<int> MediatR.IRequestHandler<TestRequest26, int>.Handle(TestRequest26 request, CancellationToken cancellationToken) => Task.FromResult(26); }
public sealed record TestRequest27() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest27Handler : IRequestHandler<TestRequest27, int>, MediatR.IRequestHandler<TestRequest27, int> { public ValueTask<int> Handle(TestRequest27 request, CancellationToken cancellationToken) => new ValueTask<int>(27); Task<int> MediatR.IRequestHandler<TestRequest27, int>.Handle(TestRequest27 request, CancellationToken cancellationToken) => Task.FromResult(27); }
public sealed record TestRequest28() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest28Handler : IRequestHandler<TestRequest28, int>, MediatR.IRequestHandler<TestRequest28, int> { public ValueTask<int> Handle(TestRequest28 request, CancellationToken cancellationToken) => new ValueTask<int>(28); Task<int> MediatR.IRequestHandler<TestRequest28, int>.Handle(TestRequest28 request, CancellationToken cancellationToken) => Task.FromResult(28); }
public sealed record TestRequest29() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest29Handler : IRequestHandler<TestRequest29, int>, MediatR.IRequestHandler<TestRequest29, int> { public ValueTask<int> Handle(TestRequest29 request, CancellationToken cancellationToken) => new ValueTask<int>(29); Task<int> MediatR.IRequestHandler<TestRequest29, int>.Handle(TestRequest29 request, CancellationToken cancellationToken) => Task.FromResult(29); }
public sealed record TestRequest30() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest30Handler : IRequestHandler<TestRequest30, int>, MediatR.IRequestHandler<TestRequest30, int> { public ValueTask<int> Handle(TestRequest30 request, CancellationToken cancellationToken) => new ValueTask<int>(30); Task<int> MediatR.IRequestHandler<TestRequest30, int>.Handle(TestRequest30 request, CancellationToken cancellationToken) => Task.FromResult(30); }
public sealed record TestRequest31() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest31Handler : IRequestHandler<TestRequest31, int>, MediatR.IRequestHandler<TestRequest31, int> { public ValueTask<int> Handle(TestRequest31 request, CancellationToken cancellationToken) => new ValueTask<int>(31); Task<int> MediatR.IRequestHandler<TestRequest31, int>.Handle(TestRequest31 request, CancellationToken cancellationToken) => Task.FromResult(31); }
public sealed record TestRequest32() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest32Handler : IRequestHandler<TestRequest32, int>, MediatR.IRequestHandler<TestRequest32, int> { public ValueTask<int> Handle(TestRequest32 request, CancellationToken cancellationToken) => new ValueTask<int>(32); Task<int> MediatR.IRequestHandler<TestRequest32, int>.Handle(TestRequest32 request, CancellationToken cancellationToken) => Task.FromResult(32); }
public sealed record TestRequest33() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest33Handler : IRequestHandler<TestRequest33, int>, MediatR.IRequestHandler<TestRequest33, int> { public ValueTask<int> Handle(TestRequest33 request, CancellationToken cancellationToken) => new ValueTask<int>(33); Task<int> MediatR.IRequestHandler<TestRequest33, int>.Handle(TestRequest33 request, CancellationToken cancellationToken) => Task.FromResult(33); }
public sealed record TestRequest34() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest34Handler : IRequestHandler<TestRequest34, int>, MediatR.IRequestHandler<TestRequest34, int> { public ValueTask<int> Handle(TestRequest34 request, CancellationToken cancellationToken) => new ValueTask<int>(34); Task<int> MediatR.IRequestHandler<TestRequest34, int>.Handle(TestRequest34 request, CancellationToken cancellationToken) => Task.FromResult(34); }
public sealed record TestRequest35() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest35Handler : IRequestHandler<TestRequest35, int>, MediatR.IRequestHandler<TestRequest35, int> { public ValueTask<int> Handle(TestRequest35 request, CancellationToken cancellationToken) => new ValueTask<int>(35); Task<int> MediatR.IRequestHandler<TestRequest35, int>.Handle(TestRequest35 request, CancellationToken cancellationToken) => Task.FromResult(35); }
public sealed record TestRequest36() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest36Handler : IRequestHandler<TestRequest36, int>, MediatR.IRequestHandler<TestRequest36, int> { public ValueTask<int> Handle(TestRequest36 request, CancellationToken cancellationToken) => new ValueTask<int>(36); Task<int> MediatR.IRequestHandler<TestRequest36, int>.Handle(TestRequest36 request, CancellationToken cancellationToken) => Task.FromResult(36); }
public sealed record TestRequest37() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest37Handler : IRequestHandler<TestRequest37, int>, MediatR.IRequestHandler<TestRequest37, int> { public ValueTask<int> Handle(TestRequest37 request, CancellationToken cancellationToken) => new ValueTask<int>(37); Task<int> MediatR.IRequestHandler<TestRequest37, int>.Handle(TestRequest37 request, CancellationToken cancellationToken) => Task.FromResult(37); }
public sealed record TestRequest38() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest38Handler : IRequestHandler<TestRequest38, int>, MediatR.IRequestHandler<TestRequest38, int> { public ValueTask<int> Handle(TestRequest38 request, CancellationToken cancellationToken) => new ValueTask<int>(38); Task<int> MediatR.IRequestHandler<TestRequest38, int>.Handle(TestRequest38 request, CancellationToken cancellationToken) => Task.FromResult(38); }
public sealed record TestRequest39() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest39Handler : IRequestHandler<TestRequest39, int>, MediatR.IRequestHandler<TestRequest39, int> { public ValueTask<int> Handle(TestRequest39 request, CancellationToken cancellationToken) => new ValueTask<int>(39); Task<int> MediatR.IRequestHandler<TestRequest39, int>.Handle(TestRequest39 request, CancellationToken cancellationToken) => Task.FromResult(39); }
public sealed record TestRequest40() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest40Handler : IRequestHandler<TestRequest40, int>, MediatR.IRequestHandler<TestRequest40, int> { public ValueTask<int> Handle(TestRequest40 request, CancellationToken cancellationToken) => new ValueTask<int>(40); Task<int> MediatR.IRequestHandler<TestRequest40, int>.Handle(TestRequest40 request, CancellationToken cancellationToken) => Task.FromResult(40); }
public sealed record TestRequest41() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest41Handler : IRequestHandler<TestRequest41, int>, MediatR.IRequestHandler<TestRequest41, int> { public ValueTask<int> Handle(TestRequest41 request, CancellationToken cancellationToken) => new ValueTask<int>(41); Task<int> MediatR.IRequestHandler<TestRequest41, int>.Handle(TestRequest41 request, CancellationToken cancellationToken) => Task.FromResult(41); }
public sealed record TestRequest42() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest42Handler : IRequestHandler<TestRequest42, int>, MediatR.IRequestHandler<TestRequest42, int> { public ValueTask<int> Handle(TestRequest42 request, CancellationToken cancellationToken) => new ValueTask<int>(42); Task<int> MediatR.IRequestHandler<TestRequest42, int>.Handle(TestRequest42 request, CancellationToken cancellationToken) => Task.FromResult(42); }
public sealed record TestRequest43() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest43Handler : IRequestHandler<TestRequest43, int>, MediatR.IRequestHandler<TestRequest43, int> { public ValueTask<int> Handle(TestRequest43 request, CancellationToken cancellationToken) => new ValueTask<int>(43); Task<int> MediatR.IRequestHandler<TestRequest43, int>.Handle(TestRequest43 request, CancellationToken cancellationToken) => Task.FromResult(43); }
public sealed record TestRequest44() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest44Handler : IRequestHandler<TestRequest44, int>, MediatR.IRequestHandler<TestRequest44, int> { public ValueTask<int> Handle(TestRequest44 request, CancellationToken cancellationToken) => new ValueTask<int>(44); Task<int> MediatR.IRequestHandler<TestRequest44, int>.Handle(TestRequest44 request, CancellationToken cancellationToken) => Task.FromResult(44); }
public sealed record TestRequest45() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest45Handler : IRequestHandler<TestRequest45, int>, MediatR.IRequestHandler<TestRequest45, int> { public ValueTask<int> Handle(TestRequest45 request, CancellationToken cancellationToken) => new ValueTask<int>(45); Task<int> MediatR.IRequestHandler<TestRequest45, int>.Handle(TestRequest45 request, CancellationToken cancellationToken) => Task.FromResult(45); }
public sealed record TestRequest46() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest46Handler : IRequestHandler<TestRequest46, int>, MediatR.IRequestHandler<TestRequest46, int> { public ValueTask<int> Handle(TestRequest46 request, CancellationToken cancellationToken) => new ValueTask<int>(46); Task<int> MediatR.IRequestHandler<TestRequest46, int>.Handle(TestRequest46 request, CancellationToken cancellationToken) => Task.FromResult(46); }
public sealed record TestRequest47() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest47Handler : IRequestHandler<TestRequest47, int>, MediatR.IRequestHandler<TestRequest47, int> { public ValueTask<int> Handle(TestRequest47 request, CancellationToken cancellationToken) => new ValueTask<int>(47); Task<int> MediatR.IRequestHandler<TestRequest47, int>.Handle(TestRequest47 request, CancellationToken cancellationToken) => Task.FromResult(47); }
public sealed record TestRequest48() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest48Handler : IRequestHandler<TestRequest48, int>, MediatR.IRequestHandler<TestRequest48, int> { public ValueTask<int> Handle(TestRequest48 request, CancellationToken cancellationToken) => new ValueTask<int>(48); Task<int> MediatR.IRequestHandler<TestRequest48, int>.Handle(TestRequest48 request, CancellationToken cancellationToken) => Task.FromResult(48); }
public sealed record TestRequest49() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest49Handler : IRequestHandler<TestRequest49, int>, MediatR.IRequestHandler<TestRequest49, int> { public ValueTask<int> Handle(TestRequest49 request, CancellationToken cancellationToken) => new ValueTask<int>(49); Task<int> MediatR.IRequestHandler<TestRequest49, int>.Handle(TestRequest49 request, CancellationToken cancellationToken) => Task.FromResult(49); }
public sealed record TestRequest50() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest50Handler : IRequestHandler<TestRequest50, int>, MediatR.IRequestHandler<TestRequest50, int> { public ValueTask<int> Handle(TestRequest50 request, CancellationToken cancellationToken) => new ValueTask<int>(50); Task<int> MediatR.IRequestHandler<TestRequest50, int>.Handle(TestRequest50 request, CancellationToken cancellationToken) => Task.FromResult(50); }
public sealed record TestRequest51() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest51Handler : IRequestHandler<TestRequest51, int>, MediatR.IRequestHandler<TestRequest51, int> { public ValueTask<int> Handle(TestRequest51 request, CancellationToken cancellationToken) => new ValueTask<int>(51); Task<int> MediatR.IRequestHandler<TestRequest51, int>.Handle(TestRequest51 request, CancellationToken cancellationToken) => Task.FromResult(51); }
public sealed record TestRequest52() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest52Handler : IRequestHandler<TestRequest52, int>, MediatR.IRequestHandler<TestRequest52, int> { public ValueTask<int> Handle(TestRequest52 request, CancellationToken cancellationToken) => new ValueTask<int>(52); Task<int> MediatR.IRequestHandler<TestRequest52, int>.Handle(TestRequest52 request, CancellationToken cancellationToken) => Task.FromResult(52); }
public sealed record TestRequest53() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest53Handler : IRequestHandler<TestRequest53, int>, MediatR.IRequestHandler<TestRequest53, int> { public ValueTask<int> Handle(TestRequest53 request, CancellationToken cancellationToken) => new ValueTask<int>(53); Task<int> MediatR.IRequestHandler<TestRequest53, int>.Handle(TestRequest53 request, CancellationToken cancellationToken) => Task.FromResult(53); }
public sealed record TestRequest54() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest54Handler : IRequestHandler<TestRequest54, int>, MediatR.IRequestHandler<TestRequest54, int> { public ValueTask<int> Handle(TestRequest54 request, CancellationToken cancellationToken) => new ValueTask<int>(54); Task<int> MediatR.IRequestHandler<TestRequest54, int>.Handle(TestRequest54 request, CancellationToken cancellationToken) => Task.FromResult(54); }
public sealed record TestRequest55() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest55Handler : IRequestHandler<TestRequest55, int>, MediatR.IRequestHandler<TestRequest55, int> { public ValueTask<int> Handle(TestRequest55 request, CancellationToken cancellationToken) => new ValueTask<int>(55); Task<int> MediatR.IRequestHandler<TestRequest55, int>.Handle(TestRequest55 request, CancellationToken cancellationToken) => Task.FromResult(55); }
public sealed record TestRequest56() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest56Handler : IRequestHandler<TestRequest56, int>, MediatR.IRequestHandler<TestRequest56, int> { public ValueTask<int> Handle(TestRequest56 request, CancellationToken cancellationToken) => new ValueTask<int>(56); Task<int> MediatR.IRequestHandler<TestRequest56, int>.Handle(TestRequest56 request, CancellationToken cancellationToken) => Task.FromResult(56); }
public sealed record TestRequest57() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest57Handler : IRequestHandler<TestRequest57, int>, MediatR.IRequestHandler<TestRequest57, int> { public ValueTask<int> Handle(TestRequest57 request, CancellationToken cancellationToken) => new ValueTask<int>(57); Task<int> MediatR.IRequestHandler<TestRequest57, int>.Handle(TestRequest57 request, CancellationToken cancellationToken) => Task.FromResult(57); }
public sealed record TestRequest58() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest58Handler : IRequestHandler<TestRequest58, int>, MediatR.IRequestHandler<TestRequest58, int> { public ValueTask<int> Handle(TestRequest58 request, CancellationToken cancellationToken) => new ValueTask<int>(58); Task<int> MediatR.IRequestHandler<TestRequest58, int>.Handle(TestRequest58 request, CancellationToken cancellationToken) => Task.FromResult(58); }
public sealed record TestRequest59() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest59Handler : IRequestHandler<TestRequest59, int>, MediatR.IRequestHandler<TestRequest59, int> { public ValueTask<int> Handle(TestRequest59 request, CancellationToken cancellationToken) => new ValueTask<int>(59); Task<int> MediatR.IRequestHandler<TestRequest59, int>.Handle(TestRequest59 request, CancellationToken cancellationToken) => Task.FromResult(59); }
public sealed record TestRequest60() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest60Handler : IRequestHandler<TestRequest60, int>, MediatR.IRequestHandler<TestRequest60, int> { public ValueTask<int> Handle(TestRequest60 request, CancellationToken cancellationToken) => new ValueTask<int>(60); Task<int> MediatR.IRequestHandler<TestRequest60, int>.Handle(TestRequest60 request, CancellationToken cancellationToken) => Task.FromResult(60); }
public sealed record TestRequest61() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest61Handler : IRequestHandler<TestRequest61, int>, MediatR.IRequestHandler<TestRequest61, int> { public ValueTask<int> Handle(TestRequest61 request, CancellationToken cancellationToken) => new ValueTask<int>(61); Task<int> MediatR.IRequestHandler<TestRequest61, int>.Handle(TestRequest61 request, CancellationToken cancellationToken) => Task.FromResult(61); }
public sealed record TestRequest62() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest62Handler : IRequestHandler<TestRequest62, int>, MediatR.IRequestHandler<TestRequest62, int> { public ValueTask<int> Handle(TestRequest62 request, CancellationToken cancellationToken) => new ValueTask<int>(62); Task<int> MediatR.IRequestHandler<TestRequest62, int>.Handle(TestRequest62 request, CancellationToken cancellationToken) => Task.FromResult(62); }
public sealed record TestRequest63() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest63Handler : IRequestHandler<TestRequest63, int>, MediatR.IRequestHandler<TestRequest63, int> { public ValueTask<int> Handle(TestRequest63 request, CancellationToken cancellationToken) => new ValueTask<int>(63); Task<int> MediatR.IRequestHandler<TestRequest63, int>.Handle(TestRequest63 request, CancellationToken cancellationToken) => Task.FromResult(63); }
public sealed record TestRequest64() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest64Handler : IRequestHandler<TestRequest64, int>, MediatR.IRequestHandler<TestRequest64, int> { public ValueTask<int> Handle(TestRequest64 request, CancellationToken cancellationToken) => new ValueTask<int>(64); Task<int> MediatR.IRequestHandler<TestRequest64, int>.Handle(TestRequest64 request, CancellationToken cancellationToken) => Task.FromResult(64); }
public sealed record TestRequest65() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest65Handler : IRequestHandler<TestRequest65, int>, MediatR.IRequestHandler<TestRequest65, int> { public ValueTask<int> Handle(TestRequest65 request, CancellationToken cancellationToken) => new ValueTask<int>(65); Task<int> MediatR.IRequestHandler<TestRequest65, int>.Handle(TestRequest65 request, CancellationToken cancellationToken) => Task.FromResult(65); }
public sealed record TestRequest66() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest66Handler : IRequestHandler<TestRequest66, int>, MediatR.IRequestHandler<TestRequest66, int> { public ValueTask<int> Handle(TestRequest66 request, CancellationToken cancellationToken) => new ValueTask<int>(66); Task<int> MediatR.IRequestHandler<TestRequest66, int>.Handle(TestRequest66 request, CancellationToken cancellationToken) => Task.FromResult(66); }
public sealed record TestRequest67() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest67Handler : IRequestHandler<TestRequest67, int>, MediatR.IRequestHandler<TestRequest67, int> { public ValueTask<int> Handle(TestRequest67 request, CancellationToken cancellationToken) => new ValueTask<int>(67); Task<int> MediatR.IRequestHandler<TestRequest67, int>.Handle(TestRequest67 request, CancellationToken cancellationToken) => Task.FromResult(67); }
public sealed record TestRequest68() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest68Handler : IRequestHandler<TestRequest68, int>, MediatR.IRequestHandler<TestRequest68, int> { public ValueTask<int> Handle(TestRequest68 request, CancellationToken cancellationToken) => new ValueTask<int>(68); Task<int> MediatR.IRequestHandler<TestRequest68, int>.Handle(TestRequest68 request, CancellationToken cancellationToken) => Task.FromResult(68); }
public sealed record TestRequest69() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest69Handler : IRequestHandler<TestRequest69, int>, MediatR.IRequestHandler<TestRequest69, int> { public ValueTask<int> Handle(TestRequest69 request, CancellationToken cancellationToken) => new ValueTask<int>(69); Task<int> MediatR.IRequestHandler<TestRequest69, int>.Handle(TestRequest69 request, CancellationToken cancellationToken) => Task.FromResult(69); }
public sealed record TestRequest70() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest70Handler : IRequestHandler<TestRequest70, int>, MediatR.IRequestHandler<TestRequest70, int> { public ValueTask<int> Handle(TestRequest70 request, CancellationToken cancellationToken) => new ValueTask<int>(70); Task<int> MediatR.IRequestHandler<TestRequest70, int>.Handle(TestRequest70 request, CancellationToken cancellationToken) => Task.FromResult(70); }
public sealed record TestRequest71() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest71Handler : IRequestHandler<TestRequest71, int>, MediatR.IRequestHandler<TestRequest71, int> { public ValueTask<int> Handle(TestRequest71 request, CancellationToken cancellationToken) => new ValueTask<int>(71); Task<int> MediatR.IRequestHandler<TestRequest71, int>.Handle(TestRequest71 request, CancellationToken cancellationToken) => Task.FromResult(71); }
public sealed record TestRequest72() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest72Handler : IRequestHandler<TestRequest72, int>, MediatR.IRequestHandler<TestRequest72, int> { public ValueTask<int> Handle(TestRequest72 request, CancellationToken cancellationToken) => new ValueTask<int>(72); Task<int> MediatR.IRequestHandler<TestRequest72, int>.Handle(TestRequest72 request, CancellationToken cancellationToken) => Task.FromResult(72); }
public sealed record TestRequest73() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest73Handler : IRequestHandler<TestRequest73, int>, MediatR.IRequestHandler<TestRequest73, int> { public ValueTask<int> Handle(TestRequest73 request, CancellationToken cancellationToken) => new ValueTask<int>(73); Task<int> MediatR.IRequestHandler<TestRequest73, int>.Handle(TestRequest73 request, CancellationToken cancellationToken) => Task.FromResult(73); }
public sealed record TestRequest74() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest74Handler : IRequestHandler<TestRequest74, int>, MediatR.IRequestHandler<TestRequest74, int> { public ValueTask<int> Handle(TestRequest74 request, CancellationToken cancellationToken) => new ValueTask<int>(74); Task<int> MediatR.IRequestHandler<TestRequest74, int>.Handle(TestRequest74 request, CancellationToken cancellationToken) => Task.FromResult(74); }
public sealed record TestRequest75() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest75Handler : IRequestHandler<TestRequest75, int>, MediatR.IRequestHandler<TestRequest75, int> { public ValueTask<int> Handle(TestRequest75 request, CancellationToken cancellationToken) => new ValueTask<int>(75); Task<int> MediatR.IRequestHandler<TestRequest75, int>.Handle(TestRequest75 request, CancellationToken cancellationToken) => Task.FromResult(75); }
public sealed record TestRequest76() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest76Handler : IRequestHandler<TestRequest76, int>, MediatR.IRequestHandler<TestRequest76, int> { public ValueTask<int> Handle(TestRequest76 request, CancellationToken cancellationToken) => new ValueTask<int>(76); Task<int> MediatR.IRequestHandler<TestRequest76, int>.Handle(TestRequest76 request, CancellationToken cancellationToken) => Task.FromResult(76); }
public sealed record TestRequest77() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest77Handler : IRequestHandler<TestRequest77, int>, MediatR.IRequestHandler<TestRequest77, int> { public ValueTask<int> Handle(TestRequest77 request, CancellationToken cancellationToken) => new ValueTask<int>(77); Task<int> MediatR.IRequestHandler<TestRequest77, int>.Handle(TestRequest77 request, CancellationToken cancellationToken) => Task.FromResult(77); }
public sealed record TestRequest78() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest78Handler : IRequestHandler<TestRequest78, int>, MediatR.IRequestHandler<TestRequest78, int> { public ValueTask<int> Handle(TestRequest78 request, CancellationToken cancellationToken) => new ValueTask<int>(78); Task<int> MediatR.IRequestHandler<TestRequest78, int>.Handle(TestRequest78 request, CancellationToken cancellationToken) => Task.FromResult(78); }
public sealed record TestRequest79() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest79Handler : IRequestHandler<TestRequest79, int>, MediatR.IRequestHandler<TestRequest79, int> { public ValueTask<int> Handle(TestRequest79 request, CancellationToken cancellationToken) => new ValueTask<int>(79); Task<int> MediatR.IRequestHandler<TestRequest79, int>.Handle(TestRequest79 request, CancellationToken cancellationToken) => Task.FromResult(79); }
public sealed record TestRequest80() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest80Handler : IRequestHandler<TestRequest80, int>, MediatR.IRequestHandler<TestRequest80, int> { public ValueTask<int> Handle(TestRequest80 request, CancellationToken cancellationToken) => new ValueTask<int>(80); Task<int> MediatR.IRequestHandler<TestRequest80, int>.Handle(TestRequest80 request, CancellationToken cancellationToken) => Task.FromResult(80); }
public sealed record TestRequest81() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest81Handler : IRequestHandler<TestRequest81, int>, MediatR.IRequestHandler<TestRequest81, int> { public ValueTask<int> Handle(TestRequest81 request, CancellationToken cancellationToken) => new ValueTask<int>(81); Task<int> MediatR.IRequestHandler<TestRequest81, int>.Handle(TestRequest81 request, CancellationToken cancellationToken) => Task.FromResult(81); }
public sealed record TestRequest82() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest82Handler : IRequestHandler<TestRequest82, int>, MediatR.IRequestHandler<TestRequest82, int> { public ValueTask<int> Handle(TestRequest82 request, CancellationToken cancellationToken) => new ValueTask<int>(82); Task<int> MediatR.IRequestHandler<TestRequest82, int>.Handle(TestRequest82 request, CancellationToken cancellationToken) => Task.FromResult(82); }
public sealed record TestRequest83() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest83Handler : IRequestHandler<TestRequest83, int>, MediatR.IRequestHandler<TestRequest83, int> { public ValueTask<int> Handle(TestRequest83 request, CancellationToken cancellationToken) => new ValueTask<int>(83); Task<int> MediatR.IRequestHandler<TestRequest83, int>.Handle(TestRequest83 request, CancellationToken cancellationToken) => Task.FromResult(83); }
public sealed record TestRequest84() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest84Handler : IRequestHandler<TestRequest84, int>, MediatR.IRequestHandler<TestRequest84, int> { public ValueTask<int> Handle(TestRequest84 request, CancellationToken cancellationToken) => new ValueTask<int>(84); Task<int> MediatR.IRequestHandler<TestRequest84, int>.Handle(TestRequest84 request, CancellationToken cancellationToken) => Task.FromResult(84); }
public sealed record TestRequest85() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest85Handler : IRequestHandler<TestRequest85, int>, MediatR.IRequestHandler<TestRequest85, int> { public ValueTask<int> Handle(TestRequest85 request, CancellationToken cancellationToken) => new ValueTask<int>(85); Task<int> MediatR.IRequestHandler<TestRequest85, int>.Handle(TestRequest85 request, CancellationToken cancellationToken) => Task.FromResult(85); }
public sealed record TestRequest86() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest86Handler : IRequestHandler<TestRequest86, int>, MediatR.IRequestHandler<TestRequest86, int> { public ValueTask<int> Handle(TestRequest86 request, CancellationToken cancellationToken) => new ValueTask<int>(86); Task<int> MediatR.IRequestHandler<TestRequest86, int>.Handle(TestRequest86 request, CancellationToken cancellationToken) => Task.FromResult(86); }
public sealed record TestRequest87() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest87Handler : IRequestHandler<TestRequest87, int>, MediatR.IRequestHandler<TestRequest87, int> { public ValueTask<int> Handle(TestRequest87 request, CancellationToken cancellationToken) => new ValueTask<int>(87); Task<int> MediatR.IRequestHandler<TestRequest87, int>.Handle(TestRequest87 request, CancellationToken cancellationToken) => Task.FromResult(87); }
public sealed record TestRequest88() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest88Handler : IRequestHandler<TestRequest88, int>, MediatR.IRequestHandler<TestRequest88, int> { public ValueTask<int> Handle(TestRequest88 request, CancellationToken cancellationToken) => new ValueTask<int>(88); Task<int> MediatR.IRequestHandler<TestRequest88, int>.Handle(TestRequest88 request, CancellationToken cancellationToken) => Task.FromResult(88); }
public sealed record TestRequest89() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest89Handler : IRequestHandler<TestRequest89, int>, MediatR.IRequestHandler<TestRequest89, int> { public ValueTask<int> Handle(TestRequest89 request, CancellationToken cancellationToken) => new ValueTask<int>(89); Task<int> MediatR.IRequestHandler<TestRequest89, int>.Handle(TestRequest89 request, CancellationToken cancellationToken) => Task.FromResult(89); }
public sealed record TestRequest90() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest90Handler : IRequestHandler<TestRequest90, int>, MediatR.IRequestHandler<TestRequest90, int> { public ValueTask<int> Handle(TestRequest90 request, CancellationToken cancellationToken) => new ValueTask<int>(90); Task<int> MediatR.IRequestHandler<TestRequest90, int>.Handle(TestRequest90 request, CancellationToken cancellationToken) => Task.FromResult(90); }
public sealed record TestRequest91() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest91Handler : IRequestHandler<TestRequest91, int>, MediatR.IRequestHandler<TestRequest91, int> { public ValueTask<int> Handle(TestRequest91 request, CancellationToken cancellationToken) => new ValueTask<int>(91); Task<int> MediatR.IRequestHandler<TestRequest91, int>.Handle(TestRequest91 request, CancellationToken cancellationToken) => Task.FromResult(91); }
public sealed record TestRequest92() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest92Handler : IRequestHandler<TestRequest92, int>, MediatR.IRequestHandler<TestRequest92, int> { public ValueTask<int> Handle(TestRequest92 request, CancellationToken cancellationToken) => new ValueTask<int>(92); Task<int> MediatR.IRequestHandler<TestRequest92, int>.Handle(TestRequest92 request, CancellationToken cancellationToken) => Task.FromResult(92); }
public sealed record TestRequest93() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest93Handler : IRequestHandler<TestRequest93, int>, MediatR.IRequestHandler<TestRequest93, int> { public ValueTask<int> Handle(TestRequest93 request, CancellationToken cancellationToken) => new ValueTask<int>(93); Task<int> MediatR.IRequestHandler<TestRequest93, int>.Handle(TestRequest93 request, CancellationToken cancellationToken) => Task.FromResult(93); }
public sealed record TestRequest94() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest94Handler : IRequestHandler<TestRequest94, int>, MediatR.IRequestHandler<TestRequest94, int> { public ValueTask<int> Handle(TestRequest94 request, CancellationToken cancellationToken) => new ValueTask<int>(94); Task<int> MediatR.IRequestHandler<TestRequest94, int>.Handle(TestRequest94 request, CancellationToken cancellationToken) => Task.FromResult(94); }
public sealed record TestRequest95() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest95Handler : IRequestHandler<TestRequest95, int>, MediatR.IRequestHandler<TestRequest95, int> { public ValueTask<int> Handle(TestRequest95 request, CancellationToken cancellationToken) => new ValueTask<int>(95); Task<int> MediatR.IRequestHandler<TestRequest95, int>.Handle(TestRequest95 request, CancellationToken cancellationToken) => Task.FromResult(95); }
public sealed record TestRequest96() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest96Handler : IRequestHandler<TestRequest96, int>, MediatR.IRequestHandler<TestRequest96, int> { public ValueTask<int> Handle(TestRequest96 request, CancellationToken cancellationToken) => new ValueTask<int>(96); Task<int> MediatR.IRequestHandler<TestRequest96, int>.Handle(TestRequest96 request, CancellationToken cancellationToken) => Task.FromResult(96); }
public sealed record TestRequest97() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest97Handler : IRequestHandler<TestRequest97, int>, MediatR.IRequestHandler<TestRequest97, int> { public ValueTask<int> Handle(TestRequest97 request, CancellationToken cancellationToken) => new ValueTask<int>(97); Task<int> MediatR.IRequestHandler<TestRequest97, int>.Handle(TestRequest97 request, CancellationToken cancellationToken) => Task.FromResult(97); }
public sealed record TestRequest98() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest98Handler : IRequestHandler<TestRequest98, int>, MediatR.IRequestHandler<TestRequest98, int> { public ValueTask<int> Handle(TestRequest98 request, CancellationToken cancellationToken) => new ValueTask<int>(98); Task<int> MediatR.IRequestHandler<TestRequest98, int>.Handle(TestRequest98 request, CancellationToken cancellationToken) => Task.FromResult(98); }
public sealed record TestRequest99() : IRequest<int>, MediatR.IRequest<int>; public sealed record TestRequest99Handler : IRequestHandler<TestRequest99, int>, MediatR.IRequestHandler<TestRequest99, int> { public ValueTask<int> Handle(TestRequest99 request, CancellationToken cancellationToken) => new ValueTask<int>(99); Task<int> MediatR.IRequestHandler<TestRequest99, int>.Handle(TestRequest99 request, CancellationToken cancellationToken) => Task.FromResult(99); }

public sealed record TestQuery0() : IQuery<int>; public sealed record TestQuery0Handler : IQueryHandler<TestQuery0, int> { public ValueTask<int> Handle(TestQuery0 query, CancellationToken cancellationToken) => new ValueTask<int>(0); }
public sealed record TestQuery1() : IQuery<int>; public sealed record TestQuery1Handler : IQueryHandler<TestQuery1, int> { public ValueTask<int> Handle(TestQuery1 query, CancellationToken cancellationToken) => new ValueTask<int>(1); }
public sealed record TestQuery2() : IQuery<int>; public sealed record TestQuery2Handler : IQueryHandler<TestQuery2, int> { public ValueTask<int> Handle(TestQuery2 query, CancellationToken cancellationToken) => new ValueTask<int>(2); }
public sealed record TestQuery3() : IQuery<int>; public sealed record TestQuery3Handler : IQueryHandler<TestQuery3, int> { public ValueTask<int> Handle(TestQuery3 query, CancellationToken cancellationToken) => new ValueTask<int>(3); }
public sealed record TestQuery4() : IQuery<int>; public sealed record TestQuery4Handler : IQueryHandler<TestQuery4, int> { public ValueTask<int> Handle(TestQuery4 query, CancellationToken cancellationToken) => new ValueTask<int>(4); }
public sealed record TestQuery5() : IQuery<int>; public sealed record TestQuery5Handler : IQueryHandler<TestQuery5, int> { public ValueTask<int> Handle(TestQuery5 query, CancellationToken cancellationToken) => new ValueTask<int>(5); }
public sealed record TestQuery6() : IQuery<int>; public sealed record TestQuery6Handler : IQueryHandler<TestQuery6, int> { public ValueTask<int> Handle(TestQuery6 query, CancellationToken cancellationToken) => new ValueTask<int>(6); }
public sealed record TestQuery7() : IQuery<int>; public sealed record TestQuery7Handler : IQueryHandler<TestQuery7, int> { public ValueTask<int> Handle(TestQuery7 query, CancellationToken cancellationToken) => new ValueTask<int>(7); }
public sealed record TestQuery8() : IQuery<int>; public sealed record TestQuery8Handler : IQueryHandler<TestQuery8, int> { public ValueTask<int> Handle(TestQuery8 query, CancellationToken cancellationToken) => new ValueTask<int>(8); }
public sealed record TestQuery9() : IQuery<int>; public sealed record TestQuery9Handler : IQueryHandler<TestQuery9, int> { public ValueTask<int> Handle(TestQuery9 query, CancellationToken cancellationToken) => new ValueTask<int>(9); }
public sealed record TestQuery10() : IQuery<int>; public sealed record TestQuery10Handler : IQueryHandler<TestQuery10, int> { public ValueTask<int> Handle(TestQuery10 query, CancellationToken cancellationToken) => new ValueTask<int>(10); }
public sealed record TestQuery11() : IQuery<int>; public sealed record TestQuery11Handler : IQueryHandler<TestQuery11, int> { public ValueTask<int> Handle(TestQuery11 query, CancellationToken cancellationToken) => new ValueTask<int>(11); }
public sealed record TestQuery12() : IQuery<int>; public sealed record TestQuery12Handler : IQueryHandler<TestQuery12, int> { public ValueTask<int> Handle(TestQuery12 query, CancellationToken cancellationToken) => new ValueTask<int>(12); }
public sealed record TestQuery13() : IQuery<int>; public sealed record TestQuery13Handler : IQueryHandler<TestQuery13, int> { public ValueTask<int> Handle(TestQuery13 query, CancellationToken cancellationToken) => new ValueTask<int>(13); }
public sealed record TestQuery14() : IQuery<int>; public sealed record TestQuery14Handler : IQueryHandler<TestQuery14, int> { public ValueTask<int> Handle(TestQuery14 query, CancellationToken cancellationToken) => new ValueTask<int>(14); }
public sealed record TestQuery15() : IQuery<int>; public sealed record TestQuery15Handler : IQueryHandler<TestQuery15, int> { public ValueTask<int> Handle(TestQuery15 query, CancellationToken cancellationToken) => new ValueTask<int>(15); }
public sealed record TestQuery16() : IQuery<int>; public sealed record TestQuery16Handler : IQueryHandler<TestQuery16, int> { public ValueTask<int> Handle(TestQuery16 query, CancellationToken cancellationToken) => new ValueTask<int>(16); }
public sealed record TestQuery17() : IQuery<int>; public sealed record TestQuery17Handler : IQueryHandler<TestQuery17, int> { public ValueTask<int> Handle(TestQuery17 query, CancellationToken cancellationToken) => new ValueTask<int>(17); }
public sealed record TestQuery18() : IQuery<int>; public sealed record TestQuery18Handler : IQueryHandler<TestQuery18, int> { public ValueTask<int> Handle(TestQuery18 query, CancellationToken cancellationToken) => new ValueTask<int>(18); }
public sealed record TestQuery19() : IQuery<int>; public sealed record TestQuery19Handler : IQueryHandler<TestQuery19, int> { public ValueTask<int> Handle(TestQuery19 query, CancellationToken cancellationToken) => new ValueTask<int>(19); }
public sealed record TestQuery20() : IQuery<int>; public sealed record TestQuery20Handler : IQueryHandler<TestQuery20, int> { public ValueTask<int> Handle(TestQuery20 query, CancellationToken cancellationToken) => new ValueTask<int>(20); }
public sealed record TestQuery21() : IQuery<int>; public sealed record TestQuery21Handler : IQueryHandler<TestQuery21, int> { public ValueTask<int> Handle(TestQuery21 query, CancellationToken cancellationToken) => new ValueTask<int>(21); }
public sealed record TestQuery22() : IQuery<int>; public sealed record TestQuery22Handler : IQueryHandler<TestQuery22, int> { public ValueTask<int> Handle(TestQuery22 query, CancellationToken cancellationToken) => new ValueTask<int>(22); }
public sealed record TestQuery23() : IQuery<int>; public sealed record TestQuery23Handler : IQueryHandler<TestQuery23, int> { public ValueTask<int> Handle(TestQuery23 query, CancellationToken cancellationToken) => new ValueTask<int>(23); }
public sealed record TestQuery24() : IQuery<int>; public sealed record TestQuery24Handler : IQueryHandler<TestQuery24, int> { public ValueTask<int> Handle(TestQuery24 query, CancellationToken cancellationToken) => new ValueTask<int>(24); }
public sealed record TestQuery25() : IQuery<int>; public sealed record TestQuery25Handler : IQueryHandler<TestQuery25, int> { public ValueTask<int> Handle(TestQuery25 query, CancellationToken cancellationToken) => new ValueTask<int>(25); }
public sealed record TestQuery26() : IQuery<int>; public sealed record TestQuery26Handler : IQueryHandler<TestQuery26, int> { public ValueTask<int> Handle(TestQuery26 query, CancellationToken cancellationToken) => new ValueTask<int>(26); }
public sealed record TestQuery27() : IQuery<int>; public sealed record TestQuery27Handler : IQueryHandler<TestQuery27, int> { public ValueTask<int> Handle(TestQuery27 query, CancellationToken cancellationToken) => new ValueTask<int>(27); }
public sealed record TestQuery28() : IQuery<int>; public sealed record TestQuery28Handler : IQueryHandler<TestQuery28, int> { public ValueTask<int> Handle(TestQuery28 query, CancellationToken cancellationToken) => new ValueTask<int>(28); }
public sealed record TestQuery29() : IQuery<int>; public sealed record TestQuery29Handler : IQueryHandler<TestQuery29, int> { public ValueTask<int> Handle(TestQuery29 query, CancellationToken cancellationToken) => new ValueTask<int>(29); }
public sealed record TestQuery30() : IQuery<int>; public sealed record TestQuery30Handler : IQueryHandler<TestQuery30, int> { public ValueTask<int> Handle(TestQuery30 query, CancellationToken cancellationToken) => new ValueTask<int>(30); }
public sealed record TestQuery31() : IQuery<int>; public sealed record TestQuery31Handler : IQueryHandler<TestQuery31, int> { public ValueTask<int> Handle(TestQuery31 query, CancellationToken cancellationToken) => new ValueTask<int>(31); }
public sealed record TestQuery32() : IQuery<int>; public sealed record TestQuery32Handler : IQueryHandler<TestQuery32, int> { public ValueTask<int> Handle(TestQuery32 query, CancellationToken cancellationToken) => new ValueTask<int>(32); }
public sealed record TestQuery33() : IQuery<int>; public sealed record TestQuery33Handler : IQueryHandler<TestQuery33, int> { public ValueTask<int> Handle(TestQuery33 query, CancellationToken cancellationToken) => new ValueTask<int>(33); }
public sealed record TestQuery34() : IQuery<int>; public sealed record TestQuery34Handler : IQueryHandler<TestQuery34, int> { public ValueTask<int> Handle(TestQuery34 query, CancellationToken cancellationToken) => new ValueTask<int>(34); }
public sealed record TestQuery35() : IQuery<int>; public sealed record TestQuery35Handler : IQueryHandler<TestQuery35, int> { public ValueTask<int> Handle(TestQuery35 query, CancellationToken cancellationToken) => new ValueTask<int>(35); }
public sealed record TestQuery36() : IQuery<int>; public sealed record TestQuery36Handler : IQueryHandler<TestQuery36, int> { public ValueTask<int> Handle(TestQuery36 query, CancellationToken cancellationToken) => new ValueTask<int>(36); }
public sealed record TestQuery37() : IQuery<int>; public sealed record TestQuery37Handler : IQueryHandler<TestQuery37, int> { public ValueTask<int> Handle(TestQuery37 query, CancellationToken cancellationToken) => new ValueTask<int>(37); }
public sealed record TestQuery38() : IQuery<int>; public sealed record TestQuery38Handler : IQueryHandler<TestQuery38, int> { public ValueTask<int> Handle(TestQuery38 query, CancellationToken cancellationToken) => new ValueTask<int>(38); }
public sealed record TestQuery39() : IQuery<int>; public sealed record TestQuery39Handler : IQueryHandler<TestQuery39, int> { public ValueTask<int> Handle(TestQuery39 query, CancellationToken cancellationToken) => new ValueTask<int>(39); }
public sealed record TestQuery40() : IQuery<int>; public sealed record TestQuery40Handler : IQueryHandler<TestQuery40, int> { public ValueTask<int> Handle(TestQuery40 query, CancellationToken cancellationToken) => new ValueTask<int>(40); }
public sealed record TestQuery41() : IQuery<int>; public sealed record TestQuery41Handler : IQueryHandler<TestQuery41, int> { public ValueTask<int> Handle(TestQuery41 query, CancellationToken cancellationToken) => new ValueTask<int>(41); }
public sealed record TestQuery42() : IQuery<int>; public sealed record TestQuery42Handler : IQueryHandler<TestQuery42, int> { public ValueTask<int> Handle(TestQuery42 query, CancellationToken cancellationToken) => new ValueTask<int>(42); }
public sealed record TestQuery43() : IQuery<int>; public sealed record TestQuery43Handler : IQueryHandler<TestQuery43, int> { public ValueTask<int> Handle(TestQuery43 query, CancellationToken cancellationToken) => new ValueTask<int>(43); }
public sealed record TestQuery44() : IQuery<int>; public sealed record TestQuery44Handler : IQueryHandler<TestQuery44, int> { public ValueTask<int> Handle(TestQuery44 query, CancellationToken cancellationToken) => new ValueTask<int>(44); }
public sealed record TestQuery45() : IQuery<int>; public sealed record TestQuery45Handler : IQueryHandler<TestQuery45, int> { public ValueTask<int> Handle(TestQuery45 query, CancellationToken cancellationToken) => new ValueTask<int>(45); }
public sealed record TestQuery46() : IQuery<int>; public sealed record TestQuery46Handler : IQueryHandler<TestQuery46, int> { public ValueTask<int> Handle(TestQuery46 query, CancellationToken cancellationToken) => new ValueTask<int>(46); }
public sealed record TestQuery47() : IQuery<int>; public sealed record TestQuery47Handler : IQueryHandler<TestQuery47, int> { public ValueTask<int> Handle(TestQuery47 query, CancellationToken cancellationToken) => new ValueTask<int>(47); }
public sealed record TestQuery48() : IQuery<int>; public sealed record TestQuery48Handler : IQueryHandler<TestQuery48, int> { public ValueTask<int> Handle(TestQuery48 query, CancellationToken cancellationToken) => new ValueTask<int>(48); }
public sealed record TestQuery49() : IQuery<int>; public sealed record TestQuery49Handler : IQueryHandler<TestQuery49, int> { public ValueTask<int> Handle(TestQuery49 query, CancellationToken cancellationToken) => new ValueTask<int>(49); }
public sealed record TestQuery50() : IQuery<int>; public sealed record TestQuery50Handler : IQueryHandler<TestQuery50, int> { public ValueTask<int> Handle(TestQuery50 query, CancellationToken cancellationToken) => new ValueTask<int>(50); }
public sealed record TestQuery51() : IQuery<int>; public sealed record TestQuery51Handler : IQueryHandler<TestQuery51, int> { public ValueTask<int> Handle(TestQuery51 query, CancellationToken cancellationToken) => new ValueTask<int>(51); }
public sealed record TestQuery52() : IQuery<int>; public sealed record TestQuery52Handler : IQueryHandler<TestQuery52, int> { public ValueTask<int> Handle(TestQuery52 query, CancellationToken cancellationToken) => new ValueTask<int>(52); }
public sealed record TestQuery53() : IQuery<int>; public sealed record TestQuery53Handler : IQueryHandler<TestQuery53, int> { public ValueTask<int> Handle(TestQuery53 query, CancellationToken cancellationToken) => new ValueTask<int>(53); }
public sealed record TestQuery54() : IQuery<int>; public sealed record TestQuery54Handler : IQueryHandler<TestQuery54, int> { public ValueTask<int> Handle(TestQuery54 query, CancellationToken cancellationToken) => new ValueTask<int>(54); }
public sealed record TestQuery55() : IQuery<int>; public sealed record TestQuery55Handler : IQueryHandler<TestQuery55, int> { public ValueTask<int> Handle(TestQuery55 query, CancellationToken cancellationToken) => new ValueTask<int>(55); }
public sealed record TestQuery56() : IQuery<int>; public sealed record TestQuery56Handler : IQueryHandler<TestQuery56, int> { public ValueTask<int> Handle(TestQuery56 query, CancellationToken cancellationToken) => new ValueTask<int>(56); }
public sealed record TestQuery57() : IQuery<int>; public sealed record TestQuery57Handler : IQueryHandler<TestQuery57, int> { public ValueTask<int> Handle(TestQuery57 query, CancellationToken cancellationToken) => new ValueTask<int>(57); }
public sealed record TestQuery58() : IQuery<int>; public sealed record TestQuery58Handler : IQueryHandler<TestQuery58, int> { public ValueTask<int> Handle(TestQuery58 query, CancellationToken cancellationToken) => new ValueTask<int>(58); }
public sealed record TestQuery59() : IQuery<int>; public sealed record TestQuery59Handler : IQueryHandler<TestQuery59, int> { public ValueTask<int> Handle(TestQuery59 query, CancellationToken cancellationToken) => new ValueTask<int>(59); }
public sealed record TestQuery60() : IQuery<int>; public sealed record TestQuery60Handler : IQueryHandler<TestQuery60, int> { public ValueTask<int> Handle(TestQuery60 query, CancellationToken cancellationToken) => new ValueTask<int>(60); }
public sealed record TestQuery61() : IQuery<int>; public sealed record TestQuery61Handler : IQueryHandler<TestQuery61, int> { public ValueTask<int> Handle(TestQuery61 query, CancellationToken cancellationToken) => new ValueTask<int>(61); }
public sealed record TestQuery62() : IQuery<int>; public sealed record TestQuery62Handler : IQueryHandler<TestQuery62, int> { public ValueTask<int> Handle(TestQuery62 query, CancellationToken cancellationToken) => new ValueTask<int>(62); }
public sealed record TestQuery63() : IQuery<int>; public sealed record TestQuery63Handler : IQueryHandler<TestQuery63, int> { public ValueTask<int> Handle(TestQuery63 query, CancellationToken cancellationToken) => new ValueTask<int>(63); }
public sealed record TestQuery64() : IQuery<int>; public sealed record TestQuery64Handler : IQueryHandler<TestQuery64, int> { public ValueTask<int> Handle(TestQuery64 query, CancellationToken cancellationToken) => new ValueTask<int>(64); }
public sealed record TestQuery65() : IQuery<int>; public sealed record TestQuery65Handler : IQueryHandler<TestQuery65, int> { public ValueTask<int> Handle(TestQuery65 query, CancellationToken cancellationToken) => new ValueTask<int>(65); }
public sealed record TestQuery66() : IQuery<int>; public sealed record TestQuery66Handler : IQueryHandler<TestQuery66, int> { public ValueTask<int> Handle(TestQuery66 query, CancellationToken cancellationToken) => new ValueTask<int>(66); }
public sealed record TestQuery67() : IQuery<int>; public sealed record TestQuery67Handler : IQueryHandler<TestQuery67, int> { public ValueTask<int> Handle(TestQuery67 query, CancellationToken cancellationToken) => new ValueTask<int>(67); }
public sealed record TestQuery68() : IQuery<int>; public sealed record TestQuery68Handler : IQueryHandler<TestQuery68, int> { public ValueTask<int> Handle(TestQuery68 query, CancellationToken cancellationToken) => new ValueTask<int>(68); }
public sealed record TestQuery69() : IQuery<int>; public sealed record TestQuery69Handler : IQueryHandler<TestQuery69, int> { public ValueTask<int> Handle(TestQuery69 query, CancellationToken cancellationToken) => new ValueTask<int>(69); }
public sealed record TestQuery70() : IQuery<int>; public sealed record TestQuery70Handler : IQueryHandler<TestQuery70, int> { public ValueTask<int> Handle(TestQuery70 query, CancellationToken cancellationToken) => new ValueTask<int>(70); }
public sealed record TestQuery71() : IQuery<int>; public sealed record TestQuery71Handler : IQueryHandler<TestQuery71, int> { public ValueTask<int> Handle(TestQuery71 query, CancellationToken cancellationToken) => new ValueTask<int>(71); }
public sealed record TestQuery72() : IQuery<int>; public sealed record TestQuery72Handler : IQueryHandler<TestQuery72, int> { public ValueTask<int> Handle(TestQuery72 query, CancellationToken cancellationToken) => new ValueTask<int>(72); }
public sealed record TestQuery73() : IQuery<int>; public sealed record TestQuery73Handler : IQueryHandler<TestQuery73, int> { public ValueTask<int> Handle(TestQuery73 query, CancellationToken cancellationToken) => new ValueTask<int>(73); }
public sealed record TestQuery74() : IQuery<int>; public sealed record TestQuery74Handler : IQueryHandler<TestQuery74, int> { public ValueTask<int> Handle(TestQuery74 query, CancellationToken cancellationToken) => new ValueTask<int>(74); }
public sealed record TestQuery75() : IQuery<int>; public sealed record TestQuery75Handler : IQueryHandler<TestQuery75, int> { public ValueTask<int> Handle(TestQuery75 query, CancellationToken cancellationToken) => new ValueTask<int>(75); }
public sealed record TestQuery76() : IQuery<int>; public sealed record TestQuery76Handler : IQueryHandler<TestQuery76, int> { public ValueTask<int> Handle(TestQuery76 query, CancellationToken cancellationToken) => new ValueTask<int>(76); }
public sealed record TestQuery77() : IQuery<int>; public sealed record TestQuery77Handler : IQueryHandler<TestQuery77, int> { public ValueTask<int> Handle(TestQuery77 query, CancellationToken cancellationToken) => new ValueTask<int>(77); }
public sealed record TestQuery78() : IQuery<int>; public sealed record TestQuery78Handler : IQueryHandler<TestQuery78, int> { public ValueTask<int> Handle(TestQuery78 query, CancellationToken cancellationToken) => new ValueTask<int>(78); }
public sealed record TestQuery79() : IQuery<int>; public sealed record TestQuery79Handler : IQueryHandler<TestQuery79, int> { public ValueTask<int> Handle(TestQuery79 query, CancellationToken cancellationToken) => new ValueTask<int>(79); }
public sealed record TestQuery80() : IQuery<int>; public sealed record TestQuery80Handler : IQueryHandler<TestQuery80, int> { public ValueTask<int> Handle(TestQuery80 query, CancellationToken cancellationToken) => new ValueTask<int>(80); }
public sealed record TestQuery81() : IQuery<int>; public sealed record TestQuery81Handler : IQueryHandler<TestQuery81, int> { public ValueTask<int> Handle(TestQuery81 query, CancellationToken cancellationToken) => new ValueTask<int>(81); }
public sealed record TestQuery82() : IQuery<int>; public sealed record TestQuery82Handler : IQueryHandler<TestQuery82, int> { public ValueTask<int> Handle(TestQuery82 query, CancellationToken cancellationToken) => new ValueTask<int>(82); }
public sealed record TestQuery83() : IQuery<int>; public sealed record TestQuery83Handler : IQueryHandler<TestQuery83, int> { public ValueTask<int> Handle(TestQuery83 query, CancellationToken cancellationToken) => new ValueTask<int>(83); }
public sealed record TestQuery84() : IQuery<int>; public sealed record TestQuery84Handler : IQueryHandler<TestQuery84, int> { public ValueTask<int> Handle(TestQuery84 query, CancellationToken cancellationToken) => new ValueTask<int>(84); }
public sealed record TestQuery85() : IQuery<int>; public sealed record TestQuery85Handler : IQueryHandler<TestQuery85, int> { public ValueTask<int> Handle(TestQuery85 query, CancellationToken cancellationToken) => new ValueTask<int>(85); }
public sealed record TestQuery86() : IQuery<int>; public sealed record TestQuery86Handler : IQueryHandler<TestQuery86, int> { public ValueTask<int> Handle(TestQuery86 query, CancellationToken cancellationToken) => new ValueTask<int>(86); }
public sealed record TestQuery87() : IQuery<int>; public sealed record TestQuery87Handler : IQueryHandler<TestQuery87, int> { public ValueTask<int> Handle(TestQuery87 query, CancellationToken cancellationToken) => new ValueTask<int>(87); }
public sealed record TestQuery88() : IQuery<int>; public sealed record TestQuery88Handler : IQueryHandler<TestQuery88, int> { public ValueTask<int> Handle(TestQuery88 query, CancellationToken cancellationToken) => new ValueTask<int>(88); }
public sealed record TestQuery89() : IQuery<int>; public sealed record TestQuery89Handler : IQueryHandler<TestQuery89, int> { public ValueTask<int> Handle(TestQuery89 query, CancellationToken cancellationToken) => new ValueTask<int>(89); }
public sealed record TestQuery90() : IQuery<int>; public sealed record TestQuery90Handler : IQueryHandler<TestQuery90, int> { public ValueTask<int> Handle(TestQuery90 query, CancellationToken cancellationToken) => new ValueTask<int>(90); }
public sealed record TestQuery91() : IQuery<int>; public sealed record TestQuery91Handler : IQueryHandler<TestQuery91, int> { public ValueTask<int> Handle(TestQuery91 query, CancellationToken cancellationToken) => new ValueTask<int>(91); }
public sealed record TestQuery92() : IQuery<int>; public sealed record TestQuery92Handler : IQueryHandler<TestQuery92, int> { public ValueTask<int> Handle(TestQuery92 query, CancellationToken cancellationToken) => new ValueTask<int>(92); }
public sealed record TestQuery93() : IQuery<int>; public sealed record TestQuery93Handler : IQueryHandler<TestQuery93, int> { public ValueTask<int> Handle(TestQuery93 query, CancellationToken cancellationToken) => new ValueTask<int>(93); }
public sealed record TestQuery94() : IQuery<int>; public sealed record TestQuery94Handler : IQueryHandler<TestQuery94, int> { public ValueTask<int> Handle(TestQuery94 query, CancellationToken cancellationToken) => new ValueTask<int>(94); }
public sealed record TestQuery95() : IQuery<int>; public sealed record TestQuery95Handler : IQueryHandler<TestQuery95, int> { public ValueTask<int> Handle(TestQuery95 query, CancellationToken cancellationToken) => new ValueTask<int>(95); }
public sealed record TestQuery96() : IQuery<int>; public sealed record TestQuery96Handler : IQueryHandler<TestQuery96, int> { public ValueTask<int> Handle(TestQuery96 query, CancellationToken cancellationToken) => new ValueTask<int>(96); }
public sealed record TestQuery97() : IQuery<int>; public sealed record TestQuery97Handler : IQueryHandler<TestQuery97, int> { public ValueTask<int> Handle(TestQuery97 query, CancellationToken cancellationToken) => new ValueTask<int>(97); }
public sealed record TestQuery98() : IQuery<int>; public sealed record TestQuery98Handler : IQueryHandler<TestQuery98, int> { public ValueTask<int> Handle(TestQuery98 query, CancellationToken cancellationToken) => new ValueTask<int>(98); }
public sealed record TestQuery99() : IQuery<int>; public sealed record TestQuery99Handler : IQueryHandler<TestQuery99, int> { public ValueTask<int> Handle(TestQuery99 query, CancellationToken cancellationToken) => new ValueTask<int>(99); }

public sealed record TestCommand0() : ICommand<int>; public sealed record TestCommand0Handler : ICommandHandler<TestCommand0, int> { public ValueTask<int> Handle(TestCommand0 command, CancellationToken cancellationToken) => new ValueTask<int>(0); }
public sealed record TestCommand1() : ICommand<int>; public sealed record TestCommand1Handler : ICommandHandler<TestCommand1, int> { public ValueTask<int> Handle(TestCommand1 command, CancellationToken cancellationToken) => new ValueTask<int>(1); }
public sealed record TestCommand2() : ICommand<int>; public sealed record TestCommand2Handler : ICommandHandler<TestCommand2, int> { public ValueTask<int> Handle(TestCommand2 command, CancellationToken cancellationToken) => new ValueTask<int>(2); }
public sealed record TestCommand3() : ICommand<int>; public sealed record TestCommand3Handler : ICommandHandler<TestCommand3, int> { public ValueTask<int> Handle(TestCommand3 command, CancellationToken cancellationToken) => new ValueTask<int>(3); }
public sealed record TestCommand4() : ICommand<int>; public sealed record TestCommand4Handler : ICommandHandler<TestCommand4, int> { public ValueTask<int> Handle(TestCommand4 command, CancellationToken cancellationToken) => new ValueTask<int>(4); }
public sealed record TestCommand5() : ICommand<int>; public sealed record TestCommand5Handler : ICommandHandler<TestCommand5, int> { public ValueTask<int> Handle(TestCommand5 command, CancellationToken cancellationToken) => new ValueTask<int>(5); }
public sealed record TestCommand6() : ICommand<int>; public sealed record TestCommand6Handler : ICommandHandler<TestCommand6, int> { public ValueTask<int> Handle(TestCommand6 command, CancellationToken cancellationToken) => new ValueTask<int>(6); }
public sealed record TestCommand7() : ICommand<int>; public sealed record TestCommand7Handler : ICommandHandler<TestCommand7, int> { public ValueTask<int> Handle(TestCommand7 command, CancellationToken cancellationToken) => new ValueTask<int>(7); }
public sealed record TestCommand8() : ICommand<int>; public sealed record TestCommand8Handler : ICommandHandler<TestCommand8, int> { public ValueTask<int> Handle(TestCommand8 command, CancellationToken cancellationToken) => new ValueTask<int>(8); }
public sealed record TestCommand9() : ICommand<int>; public sealed record TestCommand9Handler : ICommandHandler<TestCommand9, int> { public ValueTask<int> Handle(TestCommand9 command, CancellationToken cancellationToken) => new ValueTask<int>(9); }
public sealed record TestCommand10() : ICommand<int>; public sealed record TestCommand10Handler : ICommandHandler<TestCommand10, int> { public ValueTask<int> Handle(TestCommand10 command, CancellationToken cancellationToken) => new ValueTask<int>(10); }
public sealed record TestCommand11() : ICommand<int>; public sealed record TestCommand11Handler : ICommandHandler<TestCommand11, int> { public ValueTask<int> Handle(TestCommand11 command, CancellationToken cancellationToken) => new ValueTask<int>(11); }
public sealed record TestCommand12() : ICommand<int>; public sealed record TestCommand12Handler : ICommandHandler<TestCommand12, int> { public ValueTask<int> Handle(TestCommand12 command, CancellationToken cancellationToken) => new ValueTask<int>(12); }
public sealed record TestCommand13() : ICommand<int>; public sealed record TestCommand13Handler : ICommandHandler<TestCommand13, int> { public ValueTask<int> Handle(TestCommand13 command, CancellationToken cancellationToken) => new ValueTask<int>(13); }
public sealed record TestCommand14() : ICommand<int>; public sealed record TestCommand14Handler : ICommandHandler<TestCommand14, int> { public ValueTask<int> Handle(TestCommand14 command, CancellationToken cancellationToken) => new ValueTask<int>(14); }
public sealed record TestCommand15() : ICommand<int>; public sealed record TestCommand15Handler : ICommandHandler<TestCommand15, int> { public ValueTask<int> Handle(TestCommand15 command, CancellationToken cancellationToken) => new ValueTask<int>(15); }
public sealed record TestCommand16() : ICommand<int>; public sealed record TestCommand16Handler : ICommandHandler<TestCommand16, int> { public ValueTask<int> Handle(TestCommand16 command, CancellationToken cancellationToken) => new ValueTask<int>(16); }
public sealed record TestCommand17() : ICommand<int>; public sealed record TestCommand17Handler : ICommandHandler<TestCommand17, int> { public ValueTask<int> Handle(TestCommand17 command, CancellationToken cancellationToken) => new ValueTask<int>(17); }
public sealed record TestCommand18() : ICommand<int>; public sealed record TestCommand18Handler : ICommandHandler<TestCommand18, int> { public ValueTask<int> Handle(TestCommand18 command, CancellationToken cancellationToken) => new ValueTask<int>(18); }
public sealed record TestCommand19() : ICommand<int>; public sealed record TestCommand19Handler : ICommandHandler<TestCommand19, int> { public ValueTask<int> Handle(TestCommand19 command, CancellationToken cancellationToken) => new ValueTask<int>(19); }
public sealed record TestCommand20() : ICommand<int>; public sealed record TestCommand20Handler : ICommandHandler<TestCommand20, int> { public ValueTask<int> Handle(TestCommand20 command, CancellationToken cancellationToken) => new ValueTask<int>(20); }
public sealed record TestCommand21() : ICommand<int>; public sealed record TestCommand21Handler : ICommandHandler<TestCommand21, int> { public ValueTask<int> Handle(TestCommand21 command, CancellationToken cancellationToken) => new ValueTask<int>(21); }
public sealed record TestCommand22() : ICommand<int>; public sealed record TestCommand22Handler : ICommandHandler<TestCommand22, int> { public ValueTask<int> Handle(TestCommand22 command, CancellationToken cancellationToken) => new ValueTask<int>(22); }
public sealed record TestCommand23() : ICommand<int>; public sealed record TestCommand23Handler : ICommandHandler<TestCommand23, int> { public ValueTask<int> Handle(TestCommand23 command, CancellationToken cancellationToken) => new ValueTask<int>(23); }
public sealed record TestCommand24() : ICommand<int>; public sealed record TestCommand24Handler : ICommandHandler<TestCommand24, int> { public ValueTask<int> Handle(TestCommand24 command, CancellationToken cancellationToken) => new ValueTask<int>(24); }
public sealed record TestCommand25() : ICommand<int>; public sealed record TestCommand25Handler : ICommandHandler<TestCommand25, int> { public ValueTask<int> Handle(TestCommand25 command, CancellationToken cancellationToken) => new ValueTask<int>(25); }
public sealed record TestCommand26() : ICommand<int>; public sealed record TestCommand26Handler : ICommandHandler<TestCommand26, int> { public ValueTask<int> Handle(TestCommand26 command, CancellationToken cancellationToken) => new ValueTask<int>(26); }
public sealed record TestCommand27() : ICommand<int>; public sealed record TestCommand27Handler : ICommandHandler<TestCommand27, int> { public ValueTask<int> Handle(TestCommand27 command, CancellationToken cancellationToken) => new ValueTask<int>(27); }
public sealed record TestCommand28() : ICommand<int>; public sealed record TestCommand28Handler : ICommandHandler<TestCommand28, int> { public ValueTask<int> Handle(TestCommand28 command, CancellationToken cancellationToken) => new ValueTask<int>(28); }
public sealed record TestCommand29() : ICommand<int>; public sealed record TestCommand29Handler : ICommandHandler<TestCommand29, int> { public ValueTask<int> Handle(TestCommand29 command, CancellationToken cancellationToken) => new ValueTask<int>(29); }
public sealed record TestCommand30() : ICommand<int>; public sealed record TestCommand30Handler : ICommandHandler<TestCommand30, int> { public ValueTask<int> Handle(TestCommand30 command, CancellationToken cancellationToken) => new ValueTask<int>(30); }
public sealed record TestCommand31() : ICommand<int>; public sealed record TestCommand31Handler : ICommandHandler<TestCommand31, int> { public ValueTask<int> Handle(TestCommand31 command, CancellationToken cancellationToken) => new ValueTask<int>(31); }
public sealed record TestCommand32() : ICommand<int>; public sealed record TestCommand32Handler : ICommandHandler<TestCommand32, int> { public ValueTask<int> Handle(TestCommand32 command, CancellationToken cancellationToken) => new ValueTask<int>(32); }
public sealed record TestCommand33() : ICommand<int>; public sealed record TestCommand33Handler : ICommandHandler<TestCommand33, int> { public ValueTask<int> Handle(TestCommand33 command, CancellationToken cancellationToken) => new ValueTask<int>(33); }
public sealed record TestCommand34() : ICommand<int>; public sealed record TestCommand34Handler : ICommandHandler<TestCommand34, int> { public ValueTask<int> Handle(TestCommand34 command, CancellationToken cancellationToken) => new ValueTask<int>(34); }
public sealed record TestCommand35() : ICommand<int>; public sealed record TestCommand35Handler : ICommandHandler<TestCommand35, int> { public ValueTask<int> Handle(TestCommand35 command, CancellationToken cancellationToken) => new ValueTask<int>(35); }
public sealed record TestCommand36() : ICommand<int>; public sealed record TestCommand36Handler : ICommandHandler<TestCommand36, int> { public ValueTask<int> Handle(TestCommand36 command, CancellationToken cancellationToken) => new ValueTask<int>(36); }
public sealed record TestCommand37() : ICommand<int>; public sealed record TestCommand37Handler : ICommandHandler<TestCommand37, int> { public ValueTask<int> Handle(TestCommand37 command, CancellationToken cancellationToken) => new ValueTask<int>(37); }
public sealed record TestCommand38() : ICommand<int>; public sealed record TestCommand38Handler : ICommandHandler<TestCommand38, int> { public ValueTask<int> Handle(TestCommand38 command, CancellationToken cancellationToken) => new ValueTask<int>(38); }
public sealed record TestCommand39() : ICommand<int>; public sealed record TestCommand39Handler : ICommandHandler<TestCommand39, int> { public ValueTask<int> Handle(TestCommand39 command, CancellationToken cancellationToken) => new ValueTask<int>(39); }
public sealed record TestCommand40() : ICommand<int>; public sealed record TestCommand40Handler : ICommandHandler<TestCommand40, int> { public ValueTask<int> Handle(TestCommand40 command, CancellationToken cancellationToken) => new ValueTask<int>(40); }
public sealed record TestCommand41() : ICommand<int>; public sealed record TestCommand41Handler : ICommandHandler<TestCommand41, int> { public ValueTask<int> Handle(TestCommand41 command, CancellationToken cancellationToken) => new ValueTask<int>(41); }
public sealed record TestCommand42() : ICommand<int>; public sealed record TestCommand42Handler : ICommandHandler<TestCommand42, int> { public ValueTask<int> Handle(TestCommand42 command, CancellationToken cancellationToken) => new ValueTask<int>(42); }
public sealed record TestCommand43() : ICommand<int>; public sealed record TestCommand43Handler : ICommandHandler<TestCommand43, int> { public ValueTask<int> Handle(TestCommand43 command, CancellationToken cancellationToken) => new ValueTask<int>(43); }
public sealed record TestCommand44() : ICommand<int>; public sealed record TestCommand44Handler : ICommandHandler<TestCommand44, int> { public ValueTask<int> Handle(TestCommand44 command, CancellationToken cancellationToken) => new ValueTask<int>(44); }
public sealed record TestCommand45() : ICommand<int>; public sealed record TestCommand45Handler : ICommandHandler<TestCommand45, int> { public ValueTask<int> Handle(TestCommand45 command, CancellationToken cancellationToken) => new ValueTask<int>(45); }
public sealed record TestCommand46() : ICommand<int>; public sealed record TestCommand46Handler : ICommandHandler<TestCommand46, int> { public ValueTask<int> Handle(TestCommand46 command, CancellationToken cancellationToken) => new ValueTask<int>(46); }
public sealed record TestCommand47() : ICommand<int>; public sealed record TestCommand47Handler : ICommandHandler<TestCommand47, int> { public ValueTask<int> Handle(TestCommand47 command, CancellationToken cancellationToken) => new ValueTask<int>(47); }
public sealed record TestCommand48() : ICommand<int>; public sealed record TestCommand48Handler : ICommandHandler<TestCommand48, int> { public ValueTask<int> Handle(TestCommand48 command, CancellationToken cancellationToken) => new ValueTask<int>(48); }
public sealed record TestCommand49() : ICommand<int>; public sealed record TestCommand49Handler : ICommandHandler<TestCommand49, int> { public ValueTask<int> Handle(TestCommand49 command, CancellationToken cancellationToken) => new ValueTask<int>(49); }
public sealed record TestCommand50() : ICommand<int>; public sealed record TestCommand50Handler : ICommandHandler<TestCommand50, int> { public ValueTask<int> Handle(TestCommand50 command, CancellationToken cancellationToken) => new ValueTask<int>(50); }
public sealed record TestCommand51() : ICommand<int>; public sealed record TestCommand51Handler : ICommandHandler<TestCommand51, int> { public ValueTask<int> Handle(TestCommand51 command, CancellationToken cancellationToken) => new ValueTask<int>(51); }
public sealed record TestCommand52() : ICommand<int>; public sealed record TestCommand52Handler : ICommandHandler<TestCommand52, int> { public ValueTask<int> Handle(TestCommand52 command, CancellationToken cancellationToken) => new ValueTask<int>(52); }
public sealed record TestCommand53() : ICommand<int>; public sealed record TestCommand53Handler : ICommandHandler<TestCommand53, int> { public ValueTask<int> Handle(TestCommand53 command, CancellationToken cancellationToken) => new ValueTask<int>(53); }
public sealed record TestCommand54() : ICommand<int>; public sealed record TestCommand54Handler : ICommandHandler<TestCommand54, int> { public ValueTask<int> Handle(TestCommand54 command, CancellationToken cancellationToken) => new ValueTask<int>(54); }
public sealed record TestCommand55() : ICommand<int>; public sealed record TestCommand55Handler : ICommandHandler<TestCommand55, int> { public ValueTask<int> Handle(TestCommand55 command, CancellationToken cancellationToken) => new ValueTask<int>(55); }
public sealed record TestCommand56() : ICommand<int>; public sealed record TestCommand56Handler : ICommandHandler<TestCommand56, int> { public ValueTask<int> Handle(TestCommand56 command, CancellationToken cancellationToken) => new ValueTask<int>(56); }
public sealed record TestCommand57() : ICommand<int>; public sealed record TestCommand57Handler : ICommandHandler<TestCommand57, int> { public ValueTask<int> Handle(TestCommand57 command, CancellationToken cancellationToken) => new ValueTask<int>(57); }
public sealed record TestCommand58() : ICommand<int>; public sealed record TestCommand58Handler : ICommandHandler<TestCommand58, int> { public ValueTask<int> Handle(TestCommand58 command, CancellationToken cancellationToken) => new ValueTask<int>(58); }
public sealed record TestCommand59() : ICommand<int>; public sealed record TestCommand59Handler : ICommandHandler<TestCommand59, int> { public ValueTask<int> Handle(TestCommand59 command, CancellationToken cancellationToken) => new ValueTask<int>(59); }
public sealed record TestCommand60() : ICommand<int>; public sealed record TestCommand60Handler : ICommandHandler<TestCommand60, int> { public ValueTask<int> Handle(TestCommand60 command, CancellationToken cancellationToken) => new ValueTask<int>(60); }
public sealed record TestCommand61() : ICommand<int>; public sealed record TestCommand61Handler : ICommandHandler<TestCommand61, int> { public ValueTask<int> Handle(TestCommand61 command, CancellationToken cancellationToken) => new ValueTask<int>(61); }
public sealed record TestCommand62() : ICommand<int>; public sealed record TestCommand62Handler : ICommandHandler<TestCommand62, int> { public ValueTask<int> Handle(TestCommand62 command, CancellationToken cancellationToken) => new ValueTask<int>(62); }
public sealed record TestCommand63() : ICommand<int>; public sealed record TestCommand63Handler : ICommandHandler<TestCommand63, int> { public ValueTask<int> Handle(TestCommand63 command, CancellationToken cancellationToken) => new ValueTask<int>(63); }
public sealed record TestCommand64() : ICommand<int>; public sealed record TestCommand64Handler : ICommandHandler<TestCommand64, int> { public ValueTask<int> Handle(TestCommand64 command, CancellationToken cancellationToken) => new ValueTask<int>(64); }
public sealed record TestCommand65() : ICommand<int>; public sealed record TestCommand65Handler : ICommandHandler<TestCommand65, int> { public ValueTask<int> Handle(TestCommand65 command, CancellationToken cancellationToken) => new ValueTask<int>(65); }
public sealed record TestCommand66() : ICommand<int>; public sealed record TestCommand66Handler : ICommandHandler<TestCommand66, int> { public ValueTask<int> Handle(TestCommand66 command, CancellationToken cancellationToken) => new ValueTask<int>(66); }
public sealed record TestCommand67() : ICommand<int>; public sealed record TestCommand67Handler : ICommandHandler<TestCommand67, int> { public ValueTask<int> Handle(TestCommand67 command, CancellationToken cancellationToken) => new ValueTask<int>(67); }
public sealed record TestCommand68() : ICommand<int>; public sealed record TestCommand68Handler : ICommandHandler<TestCommand68, int> { public ValueTask<int> Handle(TestCommand68 command, CancellationToken cancellationToken) => new ValueTask<int>(68); }
public sealed record TestCommand69() : ICommand<int>; public sealed record TestCommand69Handler : ICommandHandler<TestCommand69, int> { public ValueTask<int> Handle(TestCommand69 command, CancellationToken cancellationToken) => new ValueTask<int>(69); }
public sealed record TestCommand70() : ICommand<int>; public sealed record TestCommand70Handler : ICommandHandler<TestCommand70, int> { public ValueTask<int> Handle(TestCommand70 command, CancellationToken cancellationToken) => new ValueTask<int>(70); }
public sealed record TestCommand71() : ICommand<int>; public sealed record TestCommand71Handler : ICommandHandler<TestCommand71, int> { public ValueTask<int> Handle(TestCommand71 command, CancellationToken cancellationToken) => new ValueTask<int>(71); }
public sealed record TestCommand72() : ICommand<int>; public sealed record TestCommand72Handler : ICommandHandler<TestCommand72, int> { public ValueTask<int> Handle(TestCommand72 command, CancellationToken cancellationToken) => new ValueTask<int>(72); }
public sealed record TestCommand73() : ICommand<int>; public sealed record TestCommand73Handler : ICommandHandler<TestCommand73, int> { public ValueTask<int> Handle(TestCommand73 command, CancellationToken cancellationToken) => new ValueTask<int>(73); }
public sealed record TestCommand74() : ICommand<int>; public sealed record TestCommand74Handler : ICommandHandler<TestCommand74, int> { public ValueTask<int> Handle(TestCommand74 command, CancellationToken cancellationToken) => new ValueTask<int>(74); }
public sealed record TestCommand75() : ICommand<int>; public sealed record TestCommand75Handler : ICommandHandler<TestCommand75, int> { public ValueTask<int> Handle(TestCommand75 command, CancellationToken cancellationToken) => new ValueTask<int>(75); }
public sealed record TestCommand76() : ICommand<int>; public sealed record TestCommand76Handler : ICommandHandler<TestCommand76, int> { public ValueTask<int> Handle(TestCommand76 command, CancellationToken cancellationToken) => new ValueTask<int>(76); }
public sealed record TestCommand77() : ICommand<int>; public sealed record TestCommand77Handler : ICommandHandler<TestCommand77, int> { public ValueTask<int> Handle(TestCommand77 command, CancellationToken cancellationToken) => new ValueTask<int>(77); }
public sealed record TestCommand78() : ICommand<int>; public sealed record TestCommand78Handler : ICommandHandler<TestCommand78, int> { public ValueTask<int> Handle(TestCommand78 command, CancellationToken cancellationToken) => new ValueTask<int>(78); }
public sealed record TestCommand79() : ICommand<int>; public sealed record TestCommand79Handler : ICommandHandler<TestCommand79, int> { public ValueTask<int> Handle(TestCommand79 command, CancellationToken cancellationToken) => new ValueTask<int>(79); }
public sealed record TestCommand80() : ICommand<int>; public sealed record TestCommand80Handler : ICommandHandler<TestCommand80, int> { public ValueTask<int> Handle(TestCommand80 command, CancellationToken cancellationToken) => new ValueTask<int>(80); }
public sealed record TestCommand81() : ICommand<int>; public sealed record TestCommand81Handler : ICommandHandler<TestCommand81, int> { public ValueTask<int> Handle(TestCommand81 command, CancellationToken cancellationToken) => new ValueTask<int>(81); }
public sealed record TestCommand82() : ICommand<int>; public sealed record TestCommand82Handler : ICommandHandler<TestCommand82, int> { public ValueTask<int> Handle(TestCommand82 command, CancellationToken cancellationToken) => new ValueTask<int>(82); }
public sealed record TestCommand83() : ICommand<int>; public sealed record TestCommand83Handler : ICommandHandler<TestCommand83, int> { public ValueTask<int> Handle(TestCommand83 command, CancellationToken cancellationToken) => new ValueTask<int>(83); }
public sealed record TestCommand84() : ICommand<int>; public sealed record TestCommand84Handler : ICommandHandler<TestCommand84, int> { public ValueTask<int> Handle(TestCommand84 command, CancellationToken cancellationToken) => new ValueTask<int>(84); }
public sealed record TestCommand85() : ICommand<int>; public sealed record TestCommand85Handler : ICommandHandler<TestCommand85, int> { public ValueTask<int> Handle(TestCommand85 command, CancellationToken cancellationToken) => new ValueTask<int>(85); }
public sealed record TestCommand86() : ICommand<int>; public sealed record TestCommand86Handler : ICommandHandler<TestCommand86, int> { public ValueTask<int> Handle(TestCommand86 command, CancellationToken cancellationToken) => new ValueTask<int>(86); }
public sealed record TestCommand87() : ICommand<int>; public sealed record TestCommand87Handler : ICommandHandler<TestCommand87, int> { public ValueTask<int> Handle(TestCommand87 command, CancellationToken cancellationToken) => new ValueTask<int>(87); }
public sealed record TestCommand88() : ICommand<int>; public sealed record TestCommand88Handler : ICommandHandler<TestCommand88, int> { public ValueTask<int> Handle(TestCommand88 command, CancellationToken cancellationToken) => new ValueTask<int>(88); }
public sealed record TestCommand89() : ICommand<int>; public sealed record TestCommand89Handler : ICommandHandler<TestCommand89, int> { public ValueTask<int> Handle(TestCommand89 command, CancellationToken cancellationToken) => new ValueTask<int>(89); }
public sealed record TestCommand90() : ICommand<int>; public sealed record TestCommand90Handler : ICommandHandler<TestCommand90, int> { public ValueTask<int> Handle(TestCommand90 command, CancellationToken cancellationToken) => new ValueTask<int>(90); }
public sealed record TestCommand91() : ICommand<int>; public sealed record TestCommand91Handler : ICommandHandler<TestCommand91, int> { public ValueTask<int> Handle(TestCommand91 command, CancellationToken cancellationToken) => new ValueTask<int>(91); }
public sealed record TestCommand92() : ICommand<int>; public sealed record TestCommand92Handler : ICommandHandler<TestCommand92, int> { public ValueTask<int> Handle(TestCommand92 command, CancellationToken cancellationToken) => new ValueTask<int>(92); }
public sealed record TestCommand93() : ICommand<int>; public sealed record TestCommand93Handler : ICommandHandler<TestCommand93, int> { public ValueTask<int> Handle(TestCommand93 command, CancellationToken cancellationToken) => new ValueTask<int>(93); }
public sealed record TestCommand94() : ICommand<int>; public sealed record TestCommand94Handler : ICommandHandler<TestCommand94, int> { public ValueTask<int> Handle(TestCommand94 command, CancellationToken cancellationToken) => new ValueTask<int>(94); }
public sealed record TestCommand95() : ICommand<int>; public sealed record TestCommand95Handler : ICommandHandler<TestCommand95, int> { public ValueTask<int> Handle(TestCommand95 command, CancellationToken cancellationToken) => new ValueTask<int>(95); }
public sealed record TestCommand96() : ICommand<int>; public sealed record TestCommand96Handler : ICommandHandler<TestCommand96, int> { public ValueTask<int> Handle(TestCommand96 command, CancellationToken cancellationToken) => new ValueTask<int>(96); }
public sealed record TestCommand97() : ICommand<int>; public sealed record TestCommand97Handler : ICommandHandler<TestCommand97, int> { public ValueTask<int> Handle(TestCommand97 command, CancellationToken cancellationToken) => new ValueTask<int>(97); }
public sealed record TestCommand98() : ICommand<int>; public sealed record TestCommand98Handler : ICommandHandler<TestCommand98, int> { public ValueTask<int> Handle(TestCommand98 command, CancellationToken cancellationToken) => new ValueTask<int>(98); }
public sealed record TestCommand99() : ICommand<int>; public sealed record TestCommand99Handler : ICommandHandler<TestCommand99, int> { public ValueTask<int> Handle(TestCommand99 command, CancellationToken cancellationToken) => new ValueTask<int>(99); }

public sealed record TestNotification0() : INotification, MediatR.INotification; public sealed record TestNotification0Handler : INotificationHandler<TestNotification0>, MediatR.INotificationHandler<TestNotification0> { public ValueTask Handle(TestNotification0 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification0>.Handle(TestNotification0 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification1() : INotification, MediatR.INotification; public sealed record TestNotification1Handler : INotificationHandler<TestNotification1>, MediatR.INotificationHandler<TestNotification1> { public ValueTask Handle(TestNotification1 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification1>.Handle(TestNotification1 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification2() : INotification, MediatR.INotification; public sealed record TestNotification2Handler : INotificationHandler<TestNotification2>, MediatR.INotificationHandler<TestNotification2> { public ValueTask Handle(TestNotification2 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification2>.Handle(TestNotification2 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification3() : INotification, MediatR.INotification; public sealed record TestNotification3Handler : INotificationHandler<TestNotification3>, MediatR.INotificationHandler<TestNotification3> { public ValueTask Handle(TestNotification3 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification3>.Handle(TestNotification3 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification4() : INotification, MediatR.INotification; public sealed record TestNotification4Handler : INotificationHandler<TestNotification4>, MediatR.INotificationHandler<TestNotification4> { public ValueTask Handle(TestNotification4 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification4>.Handle(TestNotification4 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification5() : INotification, MediatR.INotification; public sealed record TestNotification5Handler : INotificationHandler<TestNotification5>, MediatR.INotificationHandler<TestNotification5> { public ValueTask Handle(TestNotification5 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification5>.Handle(TestNotification5 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification6() : INotification, MediatR.INotification; public sealed record TestNotification6Handler : INotificationHandler<TestNotification6>, MediatR.INotificationHandler<TestNotification6> { public ValueTask Handle(TestNotification6 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification6>.Handle(TestNotification6 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification7() : INotification, MediatR.INotification; public sealed record TestNotification7Handler : INotificationHandler<TestNotification7>, MediatR.INotificationHandler<TestNotification7> { public ValueTask Handle(TestNotification7 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification7>.Handle(TestNotification7 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification8() : INotification, MediatR.INotification; public sealed record TestNotification8Handler : INotificationHandler<TestNotification8>, MediatR.INotificationHandler<TestNotification8> { public ValueTask Handle(TestNotification8 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification8>.Handle(TestNotification8 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification9() : INotification, MediatR.INotification; public sealed record TestNotification9Handler : INotificationHandler<TestNotification9>, MediatR.INotificationHandler<TestNotification9> { public ValueTask Handle(TestNotification9 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification9>.Handle(TestNotification9 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification10() : INotification, MediatR.INotification; public sealed record TestNotification10Handler : INotificationHandler<TestNotification10>, MediatR.INotificationHandler<TestNotification10> { public ValueTask Handle(TestNotification10 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification10>.Handle(TestNotification10 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification11() : INotification, MediatR.INotification; public sealed record TestNotification11Handler : INotificationHandler<TestNotification11>, MediatR.INotificationHandler<TestNotification11> { public ValueTask Handle(TestNotification11 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification11>.Handle(TestNotification11 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification12() : INotification, MediatR.INotification; public sealed record TestNotification12Handler : INotificationHandler<TestNotification12>, MediatR.INotificationHandler<TestNotification12> { public ValueTask Handle(TestNotification12 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification12>.Handle(TestNotification12 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification13() : INotification, MediatR.INotification; public sealed record TestNotification13Handler : INotificationHandler<TestNotification13>, MediatR.INotificationHandler<TestNotification13> { public ValueTask Handle(TestNotification13 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification13>.Handle(TestNotification13 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification14() : INotification, MediatR.INotification; public sealed record TestNotification14Handler : INotificationHandler<TestNotification14>, MediatR.INotificationHandler<TestNotification14> { public ValueTask Handle(TestNotification14 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification14>.Handle(TestNotification14 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification15() : INotification, MediatR.INotification; public sealed record TestNotification15Handler : INotificationHandler<TestNotification15>, MediatR.INotificationHandler<TestNotification15> { public ValueTask Handle(TestNotification15 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification15>.Handle(TestNotification15 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification16() : INotification, MediatR.INotification; public sealed record TestNotification16Handler : INotificationHandler<TestNotification16>, MediatR.INotificationHandler<TestNotification16> { public ValueTask Handle(TestNotification16 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification16>.Handle(TestNotification16 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification17() : INotification, MediatR.INotification; public sealed record TestNotification17Handler : INotificationHandler<TestNotification17>, MediatR.INotificationHandler<TestNotification17> { public ValueTask Handle(TestNotification17 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification17>.Handle(TestNotification17 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification18() : INotification, MediatR.INotification; public sealed record TestNotification18Handler : INotificationHandler<TestNotification18>, MediatR.INotificationHandler<TestNotification18> { public ValueTask Handle(TestNotification18 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification18>.Handle(TestNotification18 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification19() : INotification, MediatR.INotification; public sealed record TestNotification19Handler : INotificationHandler<TestNotification19>, MediatR.INotificationHandler<TestNotification19> { public ValueTask Handle(TestNotification19 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification19>.Handle(TestNotification19 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification20() : INotification, MediatR.INotification; public sealed record TestNotification20Handler : INotificationHandler<TestNotification20>, MediatR.INotificationHandler<TestNotification20> { public ValueTask Handle(TestNotification20 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification20>.Handle(TestNotification20 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification21() : INotification, MediatR.INotification; public sealed record TestNotification21Handler : INotificationHandler<TestNotification21>, MediatR.INotificationHandler<TestNotification21> { public ValueTask Handle(TestNotification21 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification21>.Handle(TestNotification21 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification22() : INotification, MediatR.INotification; public sealed record TestNotification22Handler : INotificationHandler<TestNotification22>, MediatR.INotificationHandler<TestNotification22> { public ValueTask Handle(TestNotification22 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification22>.Handle(TestNotification22 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification23() : INotification, MediatR.INotification; public sealed record TestNotification23Handler : INotificationHandler<TestNotification23>, MediatR.INotificationHandler<TestNotification23> { public ValueTask Handle(TestNotification23 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification23>.Handle(TestNotification23 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification24() : INotification, MediatR.INotification; public sealed record TestNotification24Handler : INotificationHandler<TestNotification24>, MediatR.INotificationHandler<TestNotification24> { public ValueTask Handle(TestNotification24 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification24>.Handle(TestNotification24 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification25() : INotification, MediatR.INotification; public sealed record TestNotification25Handler : INotificationHandler<TestNotification25>, MediatR.INotificationHandler<TestNotification25> { public ValueTask Handle(TestNotification25 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification25>.Handle(TestNotification25 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification26() : INotification, MediatR.INotification; public sealed record TestNotification26Handler : INotificationHandler<TestNotification26>, MediatR.INotificationHandler<TestNotification26> { public ValueTask Handle(TestNotification26 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification26>.Handle(TestNotification26 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification27() : INotification, MediatR.INotification; public sealed record TestNotification27Handler : INotificationHandler<TestNotification27>, MediatR.INotificationHandler<TestNotification27> { public ValueTask Handle(TestNotification27 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification27>.Handle(TestNotification27 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification28() : INotification, MediatR.INotification; public sealed record TestNotification28Handler : INotificationHandler<TestNotification28>, MediatR.INotificationHandler<TestNotification28> { public ValueTask Handle(TestNotification28 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification28>.Handle(TestNotification28 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification29() : INotification, MediatR.INotification; public sealed record TestNotification29Handler : INotificationHandler<TestNotification29>, MediatR.INotificationHandler<TestNotification29> { public ValueTask Handle(TestNotification29 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification29>.Handle(TestNotification29 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification30() : INotification, MediatR.INotification; public sealed record TestNotification30Handler : INotificationHandler<TestNotification30>, MediatR.INotificationHandler<TestNotification30> { public ValueTask Handle(TestNotification30 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification30>.Handle(TestNotification30 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification31() : INotification, MediatR.INotification; public sealed record TestNotification31Handler : INotificationHandler<TestNotification31>, MediatR.INotificationHandler<TestNotification31> { public ValueTask Handle(TestNotification31 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification31>.Handle(TestNotification31 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification32() : INotification, MediatR.INotification; public sealed record TestNotification32Handler : INotificationHandler<TestNotification32>, MediatR.INotificationHandler<TestNotification32> { public ValueTask Handle(TestNotification32 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification32>.Handle(TestNotification32 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification33() : INotification, MediatR.INotification; public sealed record TestNotification33Handler : INotificationHandler<TestNotification33>, MediatR.INotificationHandler<TestNotification33> { public ValueTask Handle(TestNotification33 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification33>.Handle(TestNotification33 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification34() : INotification, MediatR.INotification; public sealed record TestNotification34Handler : INotificationHandler<TestNotification34>, MediatR.INotificationHandler<TestNotification34> { public ValueTask Handle(TestNotification34 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification34>.Handle(TestNotification34 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification35() : INotification, MediatR.INotification; public sealed record TestNotification35Handler : INotificationHandler<TestNotification35>, MediatR.INotificationHandler<TestNotification35> { public ValueTask Handle(TestNotification35 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification35>.Handle(TestNotification35 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification36() : INotification, MediatR.INotification; public sealed record TestNotification36Handler : INotificationHandler<TestNotification36>, MediatR.INotificationHandler<TestNotification36> { public ValueTask Handle(TestNotification36 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification36>.Handle(TestNotification36 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification37() : INotification, MediatR.INotification; public sealed record TestNotification37Handler : INotificationHandler<TestNotification37>, MediatR.INotificationHandler<TestNotification37> { public ValueTask Handle(TestNotification37 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification37>.Handle(TestNotification37 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification38() : INotification, MediatR.INotification; public sealed record TestNotification38Handler : INotificationHandler<TestNotification38>, MediatR.INotificationHandler<TestNotification38> { public ValueTask Handle(TestNotification38 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification38>.Handle(TestNotification38 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification39() : INotification, MediatR.INotification; public sealed record TestNotification39Handler : INotificationHandler<TestNotification39>, MediatR.INotificationHandler<TestNotification39> { public ValueTask Handle(TestNotification39 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification39>.Handle(TestNotification39 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification40() : INotification, MediatR.INotification; public sealed record TestNotification40Handler : INotificationHandler<TestNotification40>, MediatR.INotificationHandler<TestNotification40> { public ValueTask Handle(TestNotification40 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification40>.Handle(TestNotification40 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification41() : INotification, MediatR.INotification; public sealed record TestNotification41Handler : INotificationHandler<TestNotification41>, MediatR.INotificationHandler<TestNotification41> { public ValueTask Handle(TestNotification41 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification41>.Handle(TestNotification41 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification42() : INotification, MediatR.INotification; public sealed record TestNotification42Handler : INotificationHandler<TestNotification42>, MediatR.INotificationHandler<TestNotification42> { public ValueTask Handle(TestNotification42 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification42>.Handle(TestNotification42 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification43() : INotification, MediatR.INotification; public sealed record TestNotification43Handler : INotificationHandler<TestNotification43>, MediatR.INotificationHandler<TestNotification43> { public ValueTask Handle(TestNotification43 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification43>.Handle(TestNotification43 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification44() : INotification, MediatR.INotification; public sealed record TestNotification44Handler : INotificationHandler<TestNotification44>, MediatR.INotificationHandler<TestNotification44> { public ValueTask Handle(TestNotification44 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification44>.Handle(TestNotification44 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification45() : INotification, MediatR.INotification; public sealed record TestNotification45Handler : INotificationHandler<TestNotification45>, MediatR.INotificationHandler<TestNotification45> { public ValueTask Handle(TestNotification45 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification45>.Handle(TestNotification45 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification46() : INotification, MediatR.INotification; public sealed record TestNotification46Handler : INotificationHandler<TestNotification46>, MediatR.INotificationHandler<TestNotification46> { public ValueTask Handle(TestNotification46 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification46>.Handle(TestNotification46 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification47() : INotification, MediatR.INotification; public sealed record TestNotification47Handler : INotificationHandler<TestNotification47>, MediatR.INotificationHandler<TestNotification47> { public ValueTask Handle(TestNotification47 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification47>.Handle(TestNotification47 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification48() : INotification, MediatR.INotification; public sealed record TestNotification48Handler : INotificationHandler<TestNotification48>, MediatR.INotificationHandler<TestNotification48> { public ValueTask Handle(TestNotification48 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification48>.Handle(TestNotification48 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification49() : INotification, MediatR.INotification; public sealed record TestNotification49Handler : INotificationHandler<TestNotification49>, MediatR.INotificationHandler<TestNotification49> { public ValueTask Handle(TestNotification49 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification49>.Handle(TestNotification49 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification50() : INotification, MediatR.INotification; public sealed record TestNotification50Handler : INotificationHandler<TestNotification50>, MediatR.INotificationHandler<TestNotification50> { public ValueTask Handle(TestNotification50 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification50>.Handle(TestNotification50 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification51() : INotification, MediatR.INotification; public sealed record TestNotification51Handler : INotificationHandler<TestNotification51>, MediatR.INotificationHandler<TestNotification51> { public ValueTask Handle(TestNotification51 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification51>.Handle(TestNotification51 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification52() : INotification, MediatR.INotification; public sealed record TestNotification52Handler : INotificationHandler<TestNotification52>, MediatR.INotificationHandler<TestNotification52> { public ValueTask Handle(TestNotification52 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification52>.Handle(TestNotification52 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification53() : INotification, MediatR.INotification; public sealed record TestNotification53Handler : INotificationHandler<TestNotification53>, MediatR.INotificationHandler<TestNotification53> { public ValueTask Handle(TestNotification53 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification53>.Handle(TestNotification53 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification54() : INotification, MediatR.INotification; public sealed record TestNotification54Handler : INotificationHandler<TestNotification54>, MediatR.INotificationHandler<TestNotification54> { public ValueTask Handle(TestNotification54 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification54>.Handle(TestNotification54 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification55() : INotification, MediatR.INotification; public sealed record TestNotification55Handler : INotificationHandler<TestNotification55>, MediatR.INotificationHandler<TestNotification55> { public ValueTask Handle(TestNotification55 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification55>.Handle(TestNotification55 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification56() : INotification, MediatR.INotification; public sealed record TestNotification56Handler : INotificationHandler<TestNotification56>, MediatR.INotificationHandler<TestNotification56> { public ValueTask Handle(TestNotification56 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification56>.Handle(TestNotification56 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification57() : INotification, MediatR.INotification; public sealed record TestNotification57Handler : INotificationHandler<TestNotification57>, MediatR.INotificationHandler<TestNotification57> { public ValueTask Handle(TestNotification57 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification57>.Handle(TestNotification57 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification58() : INotification, MediatR.INotification; public sealed record TestNotification58Handler : INotificationHandler<TestNotification58>, MediatR.INotificationHandler<TestNotification58> { public ValueTask Handle(TestNotification58 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification58>.Handle(TestNotification58 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification59() : INotification, MediatR.INotification; public sealed record TestNotification59Handler : INotificationHandler<TestNotification59>, MediatR.INotificationHandler<TestNotification59> { public ValueTask Handle(TestNotification59 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification59>.Handle(TestNotification59 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification60() : INotification, MediatR.INotification; public sealed record TestNotification60Handler : INotificationHandler<TestNotification60>, MediatR.INotificationHandler<TestNotification60> { public ValueTask Handle(TestNotification60 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification60>.Handle(TestNotification60 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification61() : INotification, MediatR.INotification; public sealed record TestNotification61Handler : INotificationHandler<TestNotification61>, MediatR.INotificationHandler<TestNotification61> { public ValueTask Handle(TestNotification61 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification61>.Handle(TestNotification61 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification62() : INotification, MediatR.INotification; public sealed record TestNotification62Handler : INotificationHandler<TestNotification62>, MediatR.INotificationHandler<TestNotification62> { public ValueTask Handle(TestNotification62 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification62>.Handle(TestNotification62 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification63() : INotification, MediatR.INotification; public sealed record TestNotification63Handler : INotificationHandler<TestNotification63>, MediatR.INotificationHandler<TestNotification63> { public ValueTask Handle(TestNotification63 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification63>.Handle(TestNotification63 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification64() : INotification, MediatR.INotification; public sealed record TestNotification64Handler : INotificationHandler<TestNotification64>, MediatR.INotificationHandler<TestNotification64> { public ValueTask Handle(TestNotification64 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification64>.Handle(TestNotification64 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification65() : INotification, MediatR.INotification; public sealed record TestNotification65Handler : INotificationHandler<TestNotification65>, MediatR.INotificationHandler<TestNotification65> { public ValueTask Handle(TestNotification65 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification65>.Handle(TestNotification65 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification66() : INotification, MediatR.INotification; public sealed record TestNotification66Handler : INotificationHandler<TestNotification66>, MediatR.INotificationHandler<TestNotification66> { public ValueTask Handle(TestNotification66 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification66>.Handle(TestNotification66 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification67() : INotification, MediatR.INotification; public sealed record TestNotification67Handler : INotificationHandler<TestNotification67>, MediatR.INotificationHandler<TestNotification67> { public ValueTask Handle(TestNotification67 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification67>.Handle(TestNotification67 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification68() : INotification, MediatR.INotification; public sealed record TestNotification68Handler : INotificationHandler<TestNotification68>, MediatR.INotificationHandler<TestNotification68> { public ValueTask Handle(TestNotification68 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification68>.Handle(TestNotification68 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification69() : INotification, MediatR.INotification; public sealed record TestNotification69Handler : INotificationHandler<TestNotification69>, MediatR.INotificationHandler<TestNotification69> { public ValueTask Handle(TestNotification69 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification69>.Handle(TestNotification69 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification70() : INotification, MediatR.INotification; public sealed record TestNotification70Handler : INotificationHandler<TestNotification70>, MediatR.INotificationHandler<TestNotification70> { public ValueTask Handle(TestNotification70 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification70>.Handle(TestNotification70 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification71() : INotification, MediatR.INotification; public sealed record TestNotification71Handler : INotificationHandler<TestNotification71>, MediatR.INotificationHandler<TestNotification71> { public ValueTask Handle(TestNotification71 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification71>.Handle(TestNotification71 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification72() : INotification, MediatR.INotification; public sealed record TestNotification72Handler : INotificationHandler<TestNotification72>, MediatR.INotificationHandler<TestNotification72> { public ValueTask Handle(TestNotification72 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification72>.Handle(TestNotification72 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification73() : INotification, MediatR.INotification; public sealed record TestNotification73Handler : INotificationHandler<TestNotification73>, MediatR.INotificationHandler<TestNotification73> { public ValueTask Handle(TestNotification73 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification73>.Handle(TestNotification73 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification74() : INotification, MediatR.INotification; public sealed record TestNotification74Handler : INotificationHandler<TestNotification74>, MediatR.INotificationHandler<TestNotification74> { public ValueTask Handle(TestNotification74 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification74>.Handle(TestNotification74 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification75() : INotification, MediatR.INotification; public sealed record TestNotification75Handler : INotificationHandler<TestNotification75>, MediatR.INotificationHandler<TestNotification75> { public ValueTask Handle(TestNotification75 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification75>.Handle(TestNotification75 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification76() : INotification, MediatR.INotification; public sealed record TestNotification76Handler : INotificationHandler<TestNotification76>, MediatR.INotificationHandler<TestNotification76> { public ValueTask Handle(TestNotification76 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification76>.Handle(TestNotification76 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification77() : INotification, MediatR.INotification; public sealed record TestNotification77Handler : INotificationHandler<TestNotification77>, MediatR.INotificationHandler<TestNotification77> { public ValueTask Handle(TestNotification77 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification77>.Handle(TestNotification77 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification78() : INotification, MediatR.INotification; public sealed record TestNotification78Handler : INotificationHandler<TestNotification78>, MediatR.INotificationHandler<TestNotification78> { public ValueTask Handle(TestNotification78 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification78>.Handle(TestNotification78 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification79() : INotification, MediatR.INotification; public sealed record TestNotification79Handler : INotificationHandler<TestNotification79>, MediatR.INotificationHandler<TestNotification79> { public ValueTask Handle(TestNotification79 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification79>.Handle(TestNotification79 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification80() : INotification, MediatR.INotification; public sealed record TestNotification80Handler : INotificationHandler<TestNotification80>, MediatR.INotificationHandler<TestNotification80> { public ValueTask Handle(TestNotification80 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification80>.Handle(TestNotification80 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification81() : INotification, MediatR.INotification; public sealed record TestNotification81Handler : INotificationHandler<TestNotification81>, MediatR.INotificationHandler<TestNotification81> { public ValueTask Handle(TestNotification81 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification81>.Handle(TestNotification81 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification82() : INotification, MediatR.INotification; public sealed record TestNotification82Handler : INotificationHandler<TestNotification82>, MediatR.INotificationHandler<TestNotification82> { public ValueTask Handle(TestNotification82 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification82>.Handle(TestNotification82 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification83() : INotification, MediatR.INotification; public sealed record TestNotification83Handler : INotificationHandler<TestNotification83>, MediatR.INotificationHandler<TestNotification83> { public ValueTask Handle(TestNotification83 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification83>.Handle(TestNotification83 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification84() : INotification, MediatR.INotification; public sealed record TestNotification84Handler : INotificationHandler<TestNotification84>, MediatR.INotificationHandler<TestNotification84> { public ValueTask Handle(TestNotification84 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification84>.Handle(TestNotification84 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification85() : INotification, MediatR.INotification; public sealed record TestNotification85Handler : INotificationHandler<TestNotification85>, MediatR.INotificationHandler<TestNotification85> { public ValueTask Handle(TestNotification85 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification85>.Handle(TestNotification85 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification86() : INotification, MediatR.INotification; public sealed record TestNotification86Handler : INotificationHandler<TestNotification86>, MediatR.INotificationHandler<TestNotification86> { public ValueTask Handle(TestNotification86 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification86>.Handle(TestNotification86 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification87() : INotification, MediatR.INotification; public sealed record TestNotification87Handler : INotificationHandler<TestNotification87>, MediatR.INotificationHandler<TestNotification87> { public ValueTask Handle(TestNotification87 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification87>.Handle(TestNotification87 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification88() : INotification, MediatR.INotification; public sealed record TestNotification88Handler : INotificationHandler<TestNotification88>, MediatR.INotificationHandler<TestNotification88> { public ValueTask Handle(TestNotification88 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification88>.Handle(TestNotification88 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification89() : INotification, MediatR.INotification; public sealed record TestNotification89Handler : INotificationHandler<TestNotification89>, MediatR.INotificationHandler<TestNotification89> { public ValueTask Handle(TestNotification89 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification89>.Handle(TestNotification89 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification90() : INotification, MediatR.INotification; public sealed record TestNotification90Handler : INotificationHandler<TestNotification90>, MediatR.INotificationHandler<TestNotification90> { public ValueTask Handle(TestNotification90 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification90>.Handle(TestNotification90 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification91() : INotification, MediatR.INotification; public sealed record TestNotification91Handler : INotificationHandler<TestNotification91>, MediatR.INotificationHandler<TestNotification91> { public ValueTask Handle(TestNotification91 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification91>.Handle(TestNotification91 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification92() : INotification, MediatR.INotification; public sealed record TestNotification92Handler : INotificationHandler<TestNotification92>, MediatR.INotificationHandler<TestNotification92> { public ValueTask Handle(TestNotification92 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification92>.Handle(TestNotification92 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification93() : INotification, MediatR.INotification; public sealed record TestNotification93Handler : INotificationHandler<TestNotification93>, MediatR.INotificationHandler<TestNotification93> { public ValueTask Handle(TestNotification93 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification93>.Handle(TestNotification93 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification94() : INotification, MediatR.INotification; public sealed record TestNotification94Handler : INotificationHandler<TestNotification94>, MediatR.INotificationHandler<TestNotification94> { public ValueTask Handle(TestNotification94 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification94>.Handle(TestNotification94 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification95() : INotification, MediatR.INotification; public sealed record TestNotification95Handler : INotificationHandler<TestNotification95>, MediatR.INotificationHandler<TestNotification95> { public ValueTask Handle(TestNotification95 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification95>.Handle(TestNotification95 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification96() : INotification, MediatR.INotification; public sealed record TestNotification96Handler : INotificationHandler<TestNotification96>, MediatR.INotificationHandler<TestNotification96> { public ValueTask Handle(TestNotification96 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification96>.Handle(TestNotification96 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification97() : INotification, MediatR.INotification; public sealed record TestNotification97Handler : INotificationHandler<TestNotification97>, MediatR.INotificationHandler<TestNotification97> { public ValueTask Handle(TestNotification97 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification97>.Handle(TestNotification97 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification98() : INotification, MediatR.INotification; public sealed record TestNotification98Handler : INotificationHandler<TestNotification98>, MediatR.INotificationHandler<TestNotification98> { public ValueTask Handle(TestNotification98 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification98>.Handle(TestNotification98 notification, CancellationToken cancellationToken) => Task.CompletedTask; }
public sealed record TestNotification99() : INotification, MediatR.INotification; public sealed record TestNotification99Handler : INotificationHandler<TestNotification99>, MediatR.INotificationHandler<TestNotification99> { public ValueTask Handle(TestNotification99 notification, CancellationToken cancellationToken) => default; Task MediatR.INotificationHandler<TestNotification99>.Handle(TestNotification99 notification, CancellationToken cancellationToken) => Task.CompletedTask; }


public sealed record TestStreamRequest0() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest0Handler : IStreamRequestHandler<TestStreamRequest0, int>, MediatR.IStreamRequestHandler<TestStreamRequest0, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest0 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 0; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest0, int>.Handle(TestStreamRequest0 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 0; } } }
public sealed record TestStreamRequest1() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest1Handler : IStreamRequestHandler<TestStreamRequest1, int>, MediatR.IStreamRequestHandler<TestStreamRequest1, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest1 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 1; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest1, int>.Handle(TestStreamRequest1 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 1; } } }
public sealed record TestStreamRequest2() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest2Handler : IStreamRequestHandler<TestStreamRequest2, int>, MediatR.IStreamRequestHandler<TestStreamRequest2, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest2 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 2; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest2, int>.Handle(TestStreamRequest2 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 2; } } }
public sealed record TestStreamRequest3() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest3Handler : IStreamRequestHandler<TestStreamRequest3, int>, MediatR.IStreamRequestHandler<TestStreamRequest3, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest3 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 3; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest3, int>.Handle(TestStreamRequest3 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 3; } } }
public sealed record TestStreamRequest4() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest4Handler : IStreamRequestHandler<TestStreamRequest4, int>, MediatR.IStreamRequestHandler<TestStreamRequest4, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest4 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 4; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest4, int>.Handle(TestStreamRequest4 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 4; } } }
public sealed record TestStreamRequest5() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest5Handler : IStreamRequestHandler<TestStreamRequest5, int>, MediatR.IStreamRequestHandler<TestStreamRequest5, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest5 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 5; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest5, int>.Handle(TestStreamRequest5 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 5; } } }
public sealed record TestStreamRequest6() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest6Handler : IStreamRequestHandler<TestStreamRequest6, int>, MediatR.IStreamRequestHandler<TestStreamRequest6, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest6 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 6; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest6, int>.Handle(TestStreamRequest6 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 6; } } }
public sealed record TestStreamRequest7() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest7Handler : IStreamRequestHandler<TestStreamRequest7, int>, MediatR.IStreamRequestHandler<TestStreamRequest7, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest7 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 7; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest7, int>.Handle(TestStreamRequest7 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 7; } } }
public sealed record TestStreamRequest8() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest8Handler : IStreamRequestHandler<TestStreamRequest8, int>, MediatR.IStreamRequestHandler<TestStreamRequest8, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest8 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 8; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest8, int>.Handle(TestStreamRequest8 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 8; } } }
public sealed record TestStreamRequest9() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest9Handler : IStreamRequestHandler<TestStreamRequest9, int>, MediatR.IStreamRequestHandler<TestStreamRequest9, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest9 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 9; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest9, int>.Handle(TestStreamRequest9 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 9; } } }
public sealed record TestStreamRequest10() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest10Handler : IStreamRequestHandler<TestStreamRequest10, int>, MediatR.IStreamRequestHandler<TestStreamRequest10, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest10 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 10; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest10, int>.Handle(TestStreamRequest10 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 10; } } }
public sealed record TestStreamRequest11() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest11Handler : IStreamRequestHandler<TestStreamRequest11, int>, MediatR.IStreamRequestHandler<TestStreamRequest11, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest11 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 11; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest11, int>.Handle(TestStreamRequest11 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 11; } } }
public sealed record TestStreamRequest12() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest12Handler : IStreamRequestHandler<TestStreamRequest12, int>, MediatR.IStreamRequestHandler<TestStreamRequest12, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest12 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 12; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest12, int>.Handle(TestStreamRequest12 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 12; } } }
public sealed record TestStreamRequest13() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest13Handler : IStreamRequestHandler<TestStreamRequest13, int>, MediatR.IStreamRequestHandler<TestStreamRequest13, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest13 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 13; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest13, int>.Handle(TestStreamRequest13 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 13; } } }
public sealed record TestStreamRequest14() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest14Handler : IStreamRequestHandler<TestStreamRequest14, int>, MediatR.IStreamRequestHandler<TestStreamRequest14, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest14 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 14; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest14, int>.Handle(TestStreamRequest14 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 14; } } }
public sealed record TestStreamRequest15() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest15Handler : IStreamRequestHandler<TestStreamRequest15, int>, MediatR.IStreamRequestHandler<TestStreamRequest15, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest15 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 15; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest15, int>.Handle(TestStreamRequest15 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 15; } } }
public sealed record TestStreamRequest16() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest16Handler : IStreamRequestHandler<TestStreamRequest16, int>, MediatR.IStreamRequestHandler<TestStreamRequest16, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest16 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 16; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest16, int>.Handle(TestStreamRequest16 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 16; } } }
public sealed record TestStreamRequest17() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest17Handler : IStreamRequestHandler<TestStreamRequest17, int>, MediatR.IStreamRequestHandler<TestStreamRequest17, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest17 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 17; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest17, int>.Handle(TestStreamRequest17 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 17; } } }
public sealed record TestStreamRequest18() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest18Handler : IStreamRequestHandler<TestStreamRequest18, int>, MediatR.IStreamRequestHandler<TestStreamRequest18, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest18 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 18; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest18, int>.Handle(TestStreamRequest18 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 18; } } }
public sealed record TestStreamRequest19() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest19Handler : IStreamRequestHandler<TestStreamRequest19, int>, MediatR.IStreamRequestHandler<TestStreamRequest19, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest19 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 19; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest19, int>.Handle(TestStreamRequest19 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 19; } } }
public sealed record TestStreamRequest20() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest20Handler : IStreamRequestHandler<TestStreamRequest20, int>, MediatR.IStreamRequestHandler<TestStreamRequest20, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest20 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 20; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest20, int>.Handle(TestStreamRequest20 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 20; } } }
public sealed record TestStreamRequest21() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest21Handler : IStreamRequestHandler<TestStreamRequest21, int>, MediatR.IStreamRequestHandler<TestStreamRequest21, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest21 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 21; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest21, int>.Handle(TestStreamRequest21 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 21; } } }
public sealed record TestStreamRequest22() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest22Handler : IStreamRequestHandler<TestStreamRequest22, int>, MediatR.IStreamRequestHandler<TestStreamRequest22, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest22 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 22; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest22, int>.Handle(TestStreamRequest22 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 22; } } }
public sealed record TestStreamRequest23() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest23Handler : IStreamRequestHandler<TestStreamRequest23, int>, MediatR.IStreamRequestHandler<TestStreamRequest23, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest23 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 23; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest23, int>.Handle(TestStreamRequest23 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 23; } } }
public sealed record TestStreamRequest24() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest24Handler : IStreamRequestHandler<TestStreamRequest24, int>, MediatR.IStreamRequestHandler<TestStreamRequest24, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest24 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 24; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest24, int>.Handle(TestStreamRequest24 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 24; } } }
public sealed record TestStreamRequest25() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest25Handler : IStreamRequestHandler<TestStreamRequest25, int>, MediatR.IStreamRequestHandler<TestStreamRequest25, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest25 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 25; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest25, int>.Handle(TestStreamRequest25 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 25; } } }
public sealed record TestStreamRequest26() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest26Handler : IStreamRequestHandler<TestStreamRequest26, int>, MediatR.IStreamRequestHandler<TestStreamRequest26, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest26 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 26; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest26, int>.Handle(TestStreamRequest26 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 26; } } }
public sealed record TestStreamRequest27() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest27Handler : IStreamRequestHandler<TestStreamRequest27, int>, MediatR.IStreamRequestHandler<TestStreamRequest27, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest27 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 27; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest27, int>.Handle(TestStreamRequest27 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 27; } } }
public sealed record TestStreamRequest28() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest28Handler : IStreamRequestHandler<TestStreamRequest28, int>, MediatR.IStreamRequestHandler<TestStreamRequest28, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest28 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 28; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest28, int>.Handle(TestStreamRequest28 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 28; } } }
public sealed record TestStreamRequest29() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest29Handler : IStreamRequestHandler<TestStreamRequest29, int>, MediatR.IStreamRequestHandler<TestStreamRequest29, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest29 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 29; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest29, int>.Handle(TestStreamRequest29 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 29; } } }
public sealed record TestStreamRequest30() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest30Handler : IStreamRequestHandler<TestStreamRequest30, int>, MediatR.IStreamRequestHandler<TestStreamRequest30, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest30 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 30; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest30, int>.Handle(TestStreamRequest30 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 30; } } }
public sealed record TestStreamRequest31() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest31Handler : IStreamRequestHandler<TestStreamRequest31, int>, MediatR.IStreamRequestHandler<TestStreamRequest31, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest31 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 31; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest31, int>.Handle(TestStreamRequest31 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 31; } } }
public sealed record TestStreamRequest32() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest32Handler : IStreamRequestHandler<TestStreamRequest32, int>, MediatR.IStreamRequestHandler<TestStreamRequest32, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest32 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 32; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest32, int>.Handle(TestStreamRequest32 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 32; } } }
public sealed record TestStreamRequest33() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest33Handler : IStreamRequestHandler<TestStreamRequest33, int>, MediatR.IStreamRequestHandler<TestStreamRequest33, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest33 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 33; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest33, int>.Handle(TestStreamRequest33 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 33; } } }
public sealed record TestStreamRequest34() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest34Handler : IStreamRequestHandler<TestStreamRequest34, int>, MediatR.IStreamRequestHandler<TestStreamRequest34, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest34 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 34; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest34, int>.Handle(TestStreamRequest34 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 34; } } }
public sealed record TestStreamRequest35() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest35Handler : IStreamRequestHandler<TestStreamRequest35, int>, MediatR.IStreamRequestHandler<TestStreamRequest35, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest35 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 35; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest35, int>.Handle(TestStreamRequest35 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 35; } } }
public sealed record TestStreamRequest36() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest36Handler : IStreamRequestHandler<TestStreamRequest36, int>, MediatR.IStreamRequestHandler<TestStreamRequest36, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest36 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 36; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest36, int>.Handle(TestStreamRequest36 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 36; } } }
public sealed record TestStreamRequest37() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest37Handler : IStreamRequestHandler<TestStreamRequest37, int>, MediatR.IStreamRequestHandler<TestStreamRequest37, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest37 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 37; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest37, int>.Handle(TestStreamRequest37 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 37; } } }
public sealed record TestStreamRequest38() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest38Handler : IStreamRequestHandler<TestStreamRequest38, int>, MediatR.IStreamRequestHandler<TestStreamRequest38, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest38 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 38; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest38, int>.Handle(TestStreamRequest38 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 38; } } }
public sealed record TestStreamRequest39() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest39Handler : IStreamRequestHandler<TestStreamRequest39, int>, MediatR.IStreamRequestHandler<TestStreamRequest39, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest39 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 39; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest39, int>.Handle(TestStreamRequest39 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 39; } } }
public sealed record TestStreamRequest40() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest40Handler : IStreamRequestHandler<TestStreamRequest40, int>, MediatR.IStreamRequestHandler<TestStreamRequest40, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest40 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 40; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest40, int>.Handle(TestStreamRequest40 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 40; } } }
public sealed record TestStreamRequest41() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest41Handler : IStreamRequestHandler<TestStreamRequest41, int>, MediatR.IStreamRequestHandler<TestStreamRequest41, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest41 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 41; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest41, int>.Handle(TestStreamRequest41 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 41; } } }
public sealed record TestStreamRequest42() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest42Handler : IStreamRequestHandler<TestStreamRequest42, int>, MediatR.IStreamRequestHandler<TestStreamRequest42, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest42 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 42; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest42, int>.Handle(TestStreamRequest42 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 42; } } }
public sealed record TestStreamRequest43() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest43Handler : IStreamRequestHandler<TestStreamRequest43, int>, MediatR.IStreamRequestHandler<TestStreamRequest43, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest43 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 43; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest43, int>.Handle(TestStreamRequest43 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 43; } } }
public sealed record TestStreamRequest44() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest44Handler : IStreamRequestHandler<TestStreamRequest44, int>, MediatR.IStreamRequestHandler<TestStreamRequest44, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest44 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 44; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest44, int>.Handle(TestStreamRequest44 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 44; } } }
public sealed record TestStreamRequest45() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest45Handler : IStreamRequestHandler<TestStreamRequest45, int>, MediatR.IStreamRequestHandler<TestStreamRequest45, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest45 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 45; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest45, int>.Handle(TestStreamRequest45 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 45; } } }
public sealed record TestStreamRequest46() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest46Handler : IStreamRequestHandler<TestStreamRequest46, int>, MediatR.IStreamRequestHandler<TestStreamRequest46, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest46 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 46; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest46, int>.Handle(TestStreamRequest46 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 46; } } }
public sealed record TestStreamRequest47() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest47Handler : IStreamRequestHandler<TestStreamRequest47, int>, MediatR.IStreamRequestHandler<TestStreamRequest47, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest47 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 47; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest47, int>.Handle(TestStreamRequest47 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 47; } } }
public sealed record TestStreamRequest48() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest48Handler : IStreamRequestHandler<TestStreamRequest48, int>, MediatR.IStreamRequestHandler<TestStreamRequest48, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest48 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 48; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest48, int>.Handle(TestStreamRequest48 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 48; } } }
public sealed record TestStreamRequest49() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest49Handler : IStreamRequestHandler<TestStreamRequest49, int>, MediatR.IStreamRequestHandler<TestStreamRequest49, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest49 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 49; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest49, int>.Handle(TestStreamRequest49 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 49; } } }
public sealed record TestStreamRequest50() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest50Handler : IStreamRequestHandler<TestStreamRequest50, int>, MediatR.IStreamRequestHandler<TestStreamRequest50, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest50 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 50; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest50, int>.Handle(TestStreamRequest50 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 50; } } }
public sealed record TestStreamRequest51() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest51Handler : IStreamRequestHandler<TestStreamRequest51, int>, MediatR.IStreamRequestHandler<TestStreamRequest51, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest51 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 51; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest51, int>.Handle(TestStreamRequest51 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 51; } } }
public sealed record TestStreamRequest52() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest52Handler : IStreamRequestHandler<TestStreamRequest52, int>, MediatR.IStreamRequestHandler<TestStreamRequest52, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest52 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 52; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest52, int>.Handle(TestStreamRequest52 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 52; } } }
public sealed record TestStreamRequest53() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest53Handler : IStreamRequestHandler<TestStreamRequest53, int>, MediatR.IStreamRequestHandler<TestStreamRequest53, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest53 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 53; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest53, int>.Handle(TestStreamRequest53 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 53; } } }
public sealed record TestStreamRequest54() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest54Handler : IStreamRequestHandler<TestStreamRequest54, int>, MediatR.IStreamRequestHandler<TestStreamRequest54, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest54 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 54; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest54, int>.Handle(TestStreamRequest54 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 54; } } }
public sealed record TestStreamRequest55() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest55Handler : IStreamRequestHandler<TestStreamRequest55, int>, MediatR.IStreamRequestHandler<TestStreamRequest55, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest55 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 55; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest55, int>.Handle(TestStreamRequest55 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 55; } } }
public sealed record TestStreamRequest56() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest56Handler : IStreamRequestHandler<TestStreamRequest56, int>, MediatR.IStreamRequestHandler<TestStreamRequest56, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest56 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 56; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest56, int>.Handle(TestStreamRequest56 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 56; } } }
public sealed record TestStreamRequest57() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest57Handler : IStreamRequestHandler<TestStreamRequest57, int>, MediatR.IStreamRequestHandler<TestStreamRequest57, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest57 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 57; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest57, int>.Handle(TestStreamRequest57 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 57; } } }
public sealed record TestStreamRequest58() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest58Handler : IStreamRequestHandler<TestStreamRequest58, int>, MediatR.IStreamRequestHandler<TestStreamRequest58, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest58 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 58; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest58, int>.Handle(TestStreamRequest58 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 58; } } }
public sealed record TestStreamRequest59() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest59Handler : IStreamRequestHandler<TestStreamRequest59, int>, MediatR.IStreamRequestHandler<TestStreamRequest59, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest59 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 59; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest59, int>.Handle(TestStreamRequest59 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 59; } } }
public sealed record TestStreamRequest60() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest60Handler : IStreamRequestHandler<TestStreamRequest60, int>, MediatR.IStreamRequestHandler<TestStreamRequest60, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest60 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 60; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest60, int>.Handle(TestStreamRequest60 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 60; } } }
public sealed record TestStreamRequest61() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest61Handler : IStreamRequestHandler<TestStreamRequest61, int>, MediatR.IStreamRequestHandler<TestStreamRequest61, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest61 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 61; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest61, int>.Handle(TestStreamRequest61 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 61; } } }
public sealed record TestStreamRequest62() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest62Handler : IStreamRequestHandler<TestStreamRequest62, int>, MediatR.IStreamRequestHandler<TestStreamRequest62, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest62 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 62; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest62, int>.Handle(TestStreamRequest62 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 62; } } }
public sealed record TestStreamRequest63() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest63Handler : IStreamRequestHandler<TestStreamRequest63, int>, MediatR.IStreamRequestHandler<TestStreamRequest63, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest63 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 63; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest63, int>.Handle(TestStreamRequest63 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 63; } } }
public sealed record TestStreamRequest64() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest64Handler : IStreamRequestHandler<TestStreamRequest64, int>, MediatR.IStreamRequestHandler<TestStreamRequest64, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest64 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 64; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest64, int>.Handle(TestStreamRequest64 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 64; } } }
public sealed record TestStreamRequest65() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest65Handler : IStreamRequestHandler<TestStreamRequest65, int>, MediatR.IStreamRequestHandler<TestStreamRequest65, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest65 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 65; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest65, int>.Handle(TestStreamRequest65 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 65; } } }
public sealed record TestStreamRequest66() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest66Handler : IStreamRequestHandler<TestStreamRequest66, int>, MediatR.IStreamRequestHandler<TestStreamRequest66, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest66 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 66; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest66, int>.Handle(TestStreamRequest66 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 66; } } }
public sealed record TestStreamRequest67() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest67Handler : IStreamRequestHandler<TestStreamRequest67, int>, MediatR.IStreamRequestHandler<TestStreamRequest67, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest67 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 67; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest67, int>.Handle(TestStreamRequest67 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 67; } } }
public sealed record TestStreamRequest68() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest68Handler : IStreamRequestHandler<TestStreamRequest68, int>, MediatR.IStreamRequestHandler<TestStreamRequest68, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest68 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 68; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest68, int>.Handle(TestStreamRequest68 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 68; } } }
public sealed record TestStreamRequest69() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest69Handler : IStreamRequestHandler<TestStreamRequest69, int>, MediatR.IStreamRequestHandler<TestStreamRequest69, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest69 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 69; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest69, int>.Handle(TestStreamRequest69 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 69; } } }
public sealed record TestStreamRequest70() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest70Handler : IStreamRequestHandler<TestStreamRequest70, int>, MediatR.IStreamRequestHandler<TestStreamRequest70, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest70 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 70; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest70, int>.Handle(TestStreamRequest70 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 70; } } }
public sealed record TestStreamRequest71() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest71Handler : IStreamRequestHandler<TestStreamRequest71, int>, MediatR.IStreamRequestHandler<TestStreamRequest71, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest71 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 71; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest71, int>.Handle(TestStreamRequest71 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 71; } } }
public sealed record TestStreamRequest72() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest72Handler : IStreamRequestHandler<TestStreamRequest72, int>, MediatR.IStreamRequestHandler<TestStreamRequest72, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest72 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 72; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest72, int>.Handle(TestStreamRequest72 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 72; } } }
public sealed record TestStreamRequest73() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest73Handler : IStreamRequestHandler<TestStreamRequest73, int>, MediatR.IStreamRequestHandler<TestStreamRequest73, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest73 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 73; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest73, int>.Handle(TestStreamRequest73 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 73; } } }
public sealed record TestStreamRequest74() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest74Handler : IStreamRequestHandler<TestStreamRequest74, int>, MediatR.IStreamRequestHandler<TestStreamRequest74, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest74 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 74; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest74, int>.Handle(TestStreamRequest74 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 74; } } }
public sealed record TestStreamRequest75() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest75Handler : IStreamRequestHandler<TestStreamRequest75, int>, MediatR.IStreamRequestHandler<TestStreamRequest75, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest75 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 75; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest75, int>.Handle(TestStreamRequest75 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 75; } } }
public sealed record TestStreamRequest76() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest76Handler : IStreamRequestHandler<TestStreamRequest76, int>, MediatR.IStreamRequestHandler<TestStreamRequest76, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest76 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 76; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest76, int>.Handle(TestStreamRequest76 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 76; } } }
public sealed record TestStreamRequest77() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest77Handler : IStreamRequestHandler<TestStreamRequest77, int>, MediatR.IStreamRequestHandler<TestStreamRequest77, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest77 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 77; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest77, int>.Handle(TestStreamRequest77 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 77; } } }
public sealed record TestStreamRequest78() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest78Handler : IStreamRequestHandler<TestStreamRequest78, int>, MediatR.IStreamRequestHandler<TestStreamRequest78, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest78 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 78; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest78, int>.Handle(TestStreamRequest78 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 78; } } }
public sealed record TestStreamRequest79() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest79Handler : IStreamRequestHandler<TestStreamRequest79, int>, MediatR.IStreamRequestHandler<TestStreamRequest79, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest79 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 79; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest79, int>.Handle(TestStreamRequest79 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 79; } } }
public sealed record TestStreamRequest80() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest80Handler : IStreamRequestHandler<TestStreamRequest80, int>, MediatR.IStreamRequestHandler<TestStreamRequest80, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest80 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 80; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest80, int>.Handle(TestStreamRequest80 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 80; } } }
public sealed record TestStreamRequest81() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest81Handler : IStreamRequestHandler<TestStreamRequest81, int>, MediatR.IStreamRequestHandler<TestStreamRequest81, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest81 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 81; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest81, int>.Handle(TestStreamRequest81 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 81; } } }
public sealed record TestStreamRequest82() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest82Handler : IStreamRequestHandler<TestStreamRequest82, int>, MediatR.IStreamRequestHandler<TestStreamRequest82, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest82 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 82; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest82, int>.Handle(TestStreamRequest82 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 82; } } }
public sealed record TestStreamRequest83() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest83Handler : IStreamRequestHandler<TestStreamRequest83, int>, MediatR.IStreamRequestHandler<TestStreamRequest83, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest83 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 83; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest83, int>.Handle(TestStreamRequest83 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 83; } } }
public sealed record TestStreamRequest84() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest84Handler : IStreamRequestHandler<TestStreamRequest84, int>, MediatR.IStreamRequestHandler<TestStreamRequest84, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest84 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 84; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest84, int>.Handle(TestStreamRequest84 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 84; } } }
public sealed record TestStreamRequest85() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest85Handler : IStreamRequestHandler<TestStreamRequest85, int>, MediatR.IStreamRequestHandler<TestStreamRequest85, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest85 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 85; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest85, int>.Handle(TestStreamRequest85 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 85; } } }
public sealed record TestStreamRequest86() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest86Handler : IStreamRequestHandler<TestStreamRequest86, int>, MediatR.IStreamRequestHandler<TestStreamRequest86, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest86 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 86; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest86, int>.Handle(TestStreamRequest86 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 86; } } }
public sealed record TestStreamRequest87() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest87Handler : IStreamRequestHandler<TestStreamRequest87, int>, MediatR.IStreamRequestHandler<TestStreamRequest87, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest87 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 87; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest87, int>.Handle(TestStreamRequest87 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 87; } } }
public sealed record TestStreamRequest88() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest88Handler : IStreamRequestHandler<TestStreamRequest88, int>, MediatR.IStreamRequestHandler<TestStreamRequest88, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest88 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 88; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest88, int>.Handle(TestStreamRequest88 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 88; } } }
public sealed record TestStreamRequest89() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest89Handler : IStreamRequestHandler<TestStreamRequest89, int>, MediatR.IStreamRequestHandler<TestStreamRequest89, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest89 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 89; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest89, int>.Handle(TestStreamRequest89 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 89; } } }
public sealed record TestStreamRequest90() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest90Handler : IStreamRequestHandler<TestStreamRequest90, int>, MediatR.IStreamRequestHandler<TestStreamRequest90, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest90 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 90; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest90, int>.Handle(TestStreamRequest90 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 90; } } }
public sealed record TestStreamRequest91() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest91Handler : IStreamRequestHandler<TestStreamRequest91, int>, MediatR.IStreamRequestHandler<TestStreamRequest91, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest91 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 91; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest91, int>.Handle(TestStreamRequest91 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 91; } } }
public sealed record TestStreamRequest92() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest92Handler : IStreamRequestHandler<TestStreamRequest92, int>, MediatR.IStreamRequestHandler<TestStreamRequest92, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest92 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 92; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest92, int>.Handle(TestStreamRequest92 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 92; } } }
public sealed record TestStreamRequest93() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest93Handler : IStreamRequestHandler<TestStreamRequest93, int>, MediatR.IStreamRequestHandler<TestStreamRequest93, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest93 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 93; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest93, int>.Handle(TestStreamRequest93 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 93; } } }
public sealed record TestStreamRequest94() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest94Handler : IStreamRequestHandler<TestStreamRequest94, int>, MediatR.IStreamRequestHandler<TestStreamRequest94, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest94 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 94; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest94, int>.Handle(TestStreamRequest94 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 94; } } }
public sealed record TestStreamRequest95() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest95Handler : IStreamRequestHandler<TestStreamRequest95, int>, MediatR.IStreamRequestHandler<TestStreamRequest95, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest95 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 95; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest95, int>.Handle(TestStreamRequest95 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 95; } } }
public sealed record TestStreamRequest96() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest96Handler : IStreamRequestHandler<TestStreamRequest96, int>, MediatR.IStreamRequestHandler<TestStreamRequest96, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest96 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 96; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest96, int>.Handle(TestStreamRequest96 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 96; } } }
public sealed record TestStreamRequest97() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest97Handler : IStreamRequestHandler<TestStreamRequest97, int>, MediatR.IStreamRequestHandler<TestStreamRequest97, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest97 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 97; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest97, int>.Handle(TestStreamRequest97 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 97; } } }
public sealed record TestStreamRequest98() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest98Handler : IStreamRequestHandler<TestStreamRequest98, int>, MediatR.IStreamRequestHandler<TestStreamRequest98, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest98 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 98; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest98, int>.Handle(TestStreamRequest98 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 98; } } }
public sealed record TestStreamRequest99() : IStreamRequest<int>, MediatR.IStreamRequest<int>; public sealed record TestStreamRequest99Handler : IStreamRequestHandler<TestStreamRequest99, int>, MediatR.IStreamRequestHandler<TestStreamRequest99, int> { public async IAsyncEnumerable<int> Handle(TestStreamRequest99 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 99; } } async IAsyncEnumerable<int> MediatR.IStreamRequestHandler<TestStreamRequest99, int>.Handle(TestStreamRequest99 request, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 99; } } }

public sealed record TestStreamQuery0() : IStreamQuery<int>; public sealed record TestStreamQuery0Handler : IStreamQueryHandler<TestStreamQuery0, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery0 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 0; } } }
public sealed record TestStreamQuery1() : IStreamQuery<int>; public sealed record TestStreamQuery1Handler : IStreamQueryHandler<TestStreamQuery1, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery1 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 1; } } }
public sealed record TestStreamQuery2() : IStreamQuery<int>; public sealed record TestStreamQuery2Handler : IStreamQueryHandler<TestStreamQuery2, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery2 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 2; } } }
public sealed record TestStreamQuery3() : IStreamQuery<int>; public sealed record TestStreamQuery3Handler : IStreamQueryHandler<TestStreamQuery3, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery3 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 3; } } }
public sealed record TestStreamQuery4() : IStreamQuery<int>; public sealed record TestStreamQuery4Handler : IStreamQueryHandler<TestStreamQuery4, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery4 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 4; } } }
public sealed record TestStreamQuery5() : IStreamQuery<int>; public sealed record TestStreamQuery5Handler : IStreamQueryHandler<TestStreamQuery5, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery5 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 5; } } }
public sealed record TestStreamQuery6() : IStreamQuery<int>; public sealed record TestStreamQuery6Handler : IStreamQueryHandler<TestStreamQuery6, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery6 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 6; } } }
public sealed record TestStreamQuery7() : IStreamQuery<int>; public sealed record TestStreamQuery7Handler : IStreamQueryHandler<TestStreamQuery7, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery7 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 7; } } }
public sealed record TestStreamQuery8() : IStreamQuery<int>; public sealed record TestStreamQuery8Handler : IStreamQueryHandler<TestStreamQuery8, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery8 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 8; } } }
public sealed record TestStreamQuery9() : IStreamQuery<int>; public sealed record TestStreamQuery9Handler : IStreamQueryHandler<TestStreamQuery9, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery9 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 9; } } }
public sealed record TestStreamQuery10() : IStreamQuery<int>; public sealed record TestStreamQuery10Handler : IStreamQueryHandler<TestStreamQuery10, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery10 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 10; } } }
public sealed record TestStreamQuery11() : IStreamQuery<int>; public sealed record TestStreamQuery11Handler : IStreamQueryHandler<TestStreamQuery11, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery11 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 11; } } }
public sealed record TestStreamQuery12() : IStreamQuery<int>; public sealed record TestStreamQuery12Handler : IStreamQueryHandler<TestStreamQuery12, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery12 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 12; } } }
public sealed record TestStreamQuery13() : IStreamQuery<int>; public sealed record TestStreamQuery13Handler : IStreamQueryHandler<TestStreamQuery13, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery13 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 13; } } }
public sealed record TestStreamQuery14() : IStreamQuery<int>; public sealed record TestStreamQuery14Handler : IStreamQueryHandler<TestStreamQuery14, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery14 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 14; } } }
public sealed record TestStreamQuery15() : IStreamQuery<int>; public sealed record TestStreamQuery15Handler : IStreamQueryHandler<TestStreamQuery15, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery15 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 15; } } }
public sealed record TestStreamQuery16() : IStreamQuery<int>; public sealed record TestStreamQuery16Handler : IStreamQueryHandler<TestStreamQuery16, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery16 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 16; } } }
public sealed record TestStreamQuery17() : IStreamQuery<int>; public sealed record TestStreamQuery17Handler : IStreamQueryHandler<TestStreamQuery17, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery17 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 17; } } }
public sealed record TestStreamQuery18() : IStreamQuery<int>; public sealed record TestStreamQuery18Handler : IStreamQueryHandler<TestStreamQuery18, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery18 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 18; } } }
public sealed record TestStreamQuery19() : IStreamQuery<int>; public sealed record TestStreamQuery19Handler : IStreamQueryHandler<TestStreamQuery19, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery19 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 19; } } }
public sealed record TestStreamQuery20() : IStreamQuery<int>; public sealed record TestStreamQuery20Handler : IStreamQueryHandler<TestStreamQuery20, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery20 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 20; } } }
public sealed record TestStreamQuery21() : IStreamQuery<int>; public sealed record TestStreamQuery21Handler : IStreamQueryHandler<TestStreamQuery21, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery21 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 21; } } }
public sealed record TestStreamQuery22() : IStreamQuery<int>; public sealed record TestStreamQuery22Handler : IStreamQueryHandler<TestStreamQuery22, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery22 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 22; } } }
public sealed record TestStreamQuery23() : IStreamQuery<int>; public sealed record TestStreamQuery23Handler : IStreamQueryHandler<TestStreamQuery23, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery23 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 23; } } }
public sealed record TestStreamQuery24() : IStreamQuery<int>; public sealed record TestStreamQuery24Handler : IStreamQueryHandler<TestStreamQuery24, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery24 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 24; } } }
public sealed record TestStreamQuery25() : IStreamQuery<int>; public sealed record TestStreamQuery25Handler : IStreamQueryHandler<TestStreamQuery25, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery25 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 25; } } }
public sealed record TestStreamQuery26() : IStreamQuery<int>; public sealed record TestStreamQuery26Handler : IStreamQueryHandler<TestStreamQuery26, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery26 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 26; } } }
public sealed record TestStreamQuery27() : IStreamQuery<int>; public sealed record TestStreamQuery27Handler : IStreamQueryHandler<TestStreamQuery27, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery27 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 27; } } }
public sealed record TestStreamQuery28() : IStreamQuery<int>; public sealed record TestStreamQuery28Handler : IStreamQueryHandler<TestStreamQuery28, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery28 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 28; } } }
public sealed record TestStreamQuery29() : IStreamQuery<int>; public sealed record TestStreamQuery29Handler : IStreamQueryHandler<TestStreamQuery29, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery29 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 29; } } }
public sealed record TestStreamQuery30() : IStreamQuery<int>; public sealed record TestStreamQuery30Handler : IStreamQueryHandler<TestStreamQuery30, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery30 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 30; } } }
public sealed record TestStreamQuery31() : IStreamQuery<int>; public sealed record TestStreamQuery31Handler : IStreamQueryHandler<TestStreamQuery31, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery31 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 31; } } }
public sealed record TestStreamQuery32() : IStreamQuery<int>; public sealed record TestStreamQuery32Handler : IStreamQueryHandler<TestStreamQuery32, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery32 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 32; } } }
public sealed record TestStreamQuery33() : IStreamQuery<int>; public sealed record TestStreamQuery33Handler : IStreamQueryHandler<TestStreamQuery33, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery33 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 33; } } }
public sealed record TestStreamQuery34() : IStreamQuery<int>; public sealed record TestStreamQuery34Handler : IStreamQueryHandler<TestStreamQuery34, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery34 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 34; } } }
public sealed record TestStreamQuery35() : IStreamQuery<int>; public sealed record TestStreamQuery35Handler : IStreamQueryHandler<TestStreamQuery35, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery35 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 35; } } }
public sealed record TestStreamQuery36() : IStreamQuery<int>; public sealed record TestStreamQuery36Handler : IStreamQueryHandler<TestStreamQuery36, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery36 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 36; } } }
public sealed record TestStreamQuery37() : IStreamQuery<int>; public sealed record TestStreamQuery37Handler : IStreamQueryHandler<TestStreamQuery37, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery37 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 37; } } }
public sealed record TestStreamQuery38() : IStreamQuery<int>; public sealed record TestStreamQuery38Handler : IStreamQueryHandler<TestStreamQuery38, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery38 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 38; } } }
public sealed record TestStreamQuery39() : IStreamQuery<int>; public sealed record TestStreamQuery39Handler : IStreamQueryHandler<TestStreamQuery39, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery39 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 39; } } }
public sealed record TestStreamQuery40() : IStreamQuery<int>; public sealed record TestStreamQuery40Handler : IStreamQueryHandler<TestStreamQuery40, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery40 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 40; } } }
public sealed record TestStreamQuery41() : IStreamQuery<int>; public sealed record TestStreamQuery41Handler : IStreamQueryHandler<TestStreamQuery41, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery41 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 41; } } }
public sealed record TestStreamQuery42() : IStreamQuery<int>; public sealed record TestStreamQuery42Handler : IStreamQueryHandler<TestStreamQuery42, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery42 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 42; } } }
public sealed record TestStreamQuery43() : IStreamQuery<int>; public sealed record TestStreamQuery43Handler : IStreamQueryHandler<TestStreamQuery43, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery43 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 43; } } }
public sealed record TestStreamQuery44() : IStreamQuery<int>; public sealed record TestStreamQuery44Handler : IStreamQueryHandler<TestStreamQuery44, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery44 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 44; } } }
public sealed record TestStreamQuery45() : IStreamQuery<int>; public sealed record TestStreamQuery45Handler : IStreamQueryHandler<TestStreamQuery45, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery45 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 45; } } }
public sealed record TestStreamQuery46() : IStreamQuery<int>; public sealed record TestStreamQuery46Handler : IStreamQueryHandler<TestStreamQuery46, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery46 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 46; } } }
public sealed record TestStreamQuery47() : IStreamQuery<int>; public sealed record TestStreamQuery47Handler : IStreamQueryHandler<TestStreamQuery47, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery47 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 47; } } }
public sealed record TestStreamQuery48() : IStreamQuery<int>; public sealed record TestStreamQuery48Handler : IStreamQueryHandler<TestStreamQuery48, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery48 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 48; } } }
public sealed record TestStreamQuery49() : IStreamQuery<int>; public sealed record TestStreamQuery49Handler : IStreamQueryHandler<TestStreamQuery49, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery49 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 49; } } }
public sealed record TestStreamQuery50() : IStreamQuery<int>; public sealed record TestStreamQuery50Handler : IStreamQueryHandler<TestStreamQuery50, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery50 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 50; } } }
public sealed record TestStreamQuery51() : IStreamQuery<int>; public sealed record TestStreamQuery51Handler : IStreamQueryHandler<TestStreamQuery51, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery51 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 51; } } }
public sealed record TestStreamQuery52() : IStreamQuery<int>; public sealed record TestStreamQuery52Handler : IStreamQueryHandler<TestStreamQuery52, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery52 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 52; } } }
public sealed record TestStreamQuery53() : IStreamQuery<int>; public sealed record TestStreamQuery53Handler : IStreamQueryHandler<TestStreamQuery53, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery53 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 53; } } }
public sealed record TestStreamQuery54() : IStreamQuery<int>; public sealed record TestStreamQuery54Handler : IStreamQueryHandler<TestStreamQuery54, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery54 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 54; } } }
public sealed record TestStreamQuery55() : IStreamQuery<int>; public sealed record TestStreamQuery55Handler : IStreamQueryHandler<TestStreamQuery55, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery55 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 55; } } }
public sealed record TestStreamQuery56() : IStreamQuery<int>; public sealed record TestStreamQuery56Handler : IStreamQueryHandler<TestStreamQuery56, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery56 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 56; } } }
public sealed record TestStreamQuery57() : IStreamQuery<int>; public sealed record TestStreamQuery57Handler : IStreamQueryHandler<TestStreamQuery57, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery57 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 57; } } }
public sealed record TestStreamQuery58() : IStreamQuery<int>; public sealed record TestStreamQuery58Handler : IStreamQueryHandler<TestStreamQuery58, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery58 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 58; } } }
public sealed record TestStreamQuery59() : IStreamQuery<int>; public sealed record TestStreamQuery59Handler : IStreamQueryHandler<TestStreamQuery59, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery59 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 59; } } }
public sealed record TestStreamQuery60() : IStreamQuery<int>; public sealed record TestStreamQuery60Handler : IStreamQueryHandler<TestStreamQuery60, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery60 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 60; } } }
public sealed record TestStreamQuery61() : IStreamQuery<int>; public sealed record TestStreamQuery61Handler : IStreamQueryHandler<TestStreamQuery61, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery61 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 61; } } }
public sealed record TestStreamQuery62() : IStreamQuery<int>; public sealed record TestStreamQuery62Handler : IStreamQueryHandler<TestStreamQuery62, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery62 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 62; } } }
public sealed record TestStreamQuery63() : IStreamQuery<int>; public sealed record TestStreamQuery63Handler : IStreamQueryHandler<TestStreamQuery63, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery63 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 63; } } }
public sealed record TestStreamQuery64() : IStreamQuery<int>; public sealed record TestStreamQuery64Handler : IStreamQueryHandler<TestStreamQuery64, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery64 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 64; } } }
public sealed record TestStreamQuery65() : IStreamQuery<int>; public sealed record TestStreamQuery65Handler : IStreamQueryHandler<TestStreamQuery65, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery65 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 65; } } }
public sealed record TestStreamQuery66() : IStreamQuery<int>; public sealed record TestStreamQuery66Handler : IStreamQueryHandler<TestStreamQuery66, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery66 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 66; } } }
public sealed record TestStreamQuery67() : IStreamQuery<int>; public sealed record TestStreamQuery67Handler : IStreamQueryHandler<TestStreamQuery67, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery67 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 67; } } }
public sealed record TestStreamQuery68() : IStreamQuery<int>; public sealed record TestStreamQuery68Handler : IStreamQueryHandler<TestStreamQuery68, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery68 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 68; } } }
public sealed record TestStreamQuery69() : IStreamQuery<int>; public sealed record TestStreamQuery69Handler : IStreamQueryHandler<TestStreamQuery69, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery69 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 69; } } }
public sealed record TestStreamQuery70() : IStreamQuery<int>; public sealed record TestStreamQuery70Handler : IStreamQueryHandler<TestStreamQuery70, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery70 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 70; } } }
public sealed record TestStreamQuery71() : IStreamQuery<int>; public sealed record TestStreamQuery71Handler : IStreamQueryHandler<TestStreamQuery71, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery71 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 71; } } }
public sealed record TestStreamQuery72() : IStreamQuery<int>; public sealed record TestStreamQuery72Handler : IStreamQueryHandler<TestStreamQuery72, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery72 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 72; } } }
public sealed record TestStreamQuery73() : IStreamQuery<int>; public sealed record TestStreamQuery73Handler : IStreamQueryHandler<TestStreamQuery73, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery73 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 73; } } }
public sealed record TestStreamQuery74() : IStreamQuery<int>; public sealed record TestStreamQuery74Handler : IStreamQueryHandler<TestStreamQuery74, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery74 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 74; } } }
public sealed record TestStreamQuery75() : IStreamQuery<int>; public sealed record TestStreamQuery75Handler : IStreamQueryHandler<TestStreamQuery75, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery75 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 75; } } }
public sealed record TestStreamQuery76() : IStreamQuery<int>; public sealed record TestStreamQuery76Handler : IStreamQueryHandler<TestStreamQuery76, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery76 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 76; } } }
public sealed record TestStreamQuery77() : IStreamQuery<int>; public sealed record TestStreamQuery77Handler : IStreamQueryHandler<TestStreamQuery77, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery77 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 77; } } }
public sealed record TestStreamQuery78() : IStreamQuery<int>; public sealed record TestStreamQuery78Handler : IStreamQueryHandler<TestStreamQuery78, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery78 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 78; } } }
public sealed record TestStreamQuery79() : IStreamQuery<int>; public sealed record TestStreamQuery79Handler : IStreamQueryHandler<TestStreamQuery79, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery79 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 79; } } }
public sealed record TestStreamQuery80() : IStreamQuery<int>; public sealed record TestStreamQuery80Handler : IStreamQueryHandler<TestStreamQuery80, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery80 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 80; } } }
public sealed record TestStreamQuery81() : IStreamQuery<int>; public sealed record TestStreamQuery81Handler : IStreamQueryHandler<TestStreamQuery81, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery81 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 81; } } }
public sealed record TestStreamQuery82() : IStreamQuery<int>; public sealed record TestStreamQuery82Handler : IStreamQueryHandler<TestStreamQuery82, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery82 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 82; } } }
public sealed record TestStreamQuery83() : IStreamQuery<int>; public sealed record TestStreamQuery83Handler : IStreamQueryHandler<TestStreamQuery83, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery83 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 83; } } }
public sealed record TestStreamQuery84() : IStreamQuery<int>; public sealed record TestStreamQuery84Handler : IStreamQueryHandler<TestStreamQuery84, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery84 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 84; } } }
public sealed record TestStreamQuery85() : IStreamQuery<int>; public sealed record TestStreamQuery85Handler : IStreamQueryHandler<TestStreamQuery85, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery85 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 85; } } }
public sealed record TestStreamQuery86() : IStreamQuery<int>; public sealed record TestStreamQuery86Handler : IStreamQueryHandler<TestStreamQuery86, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery86 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 86; } } }
public sealed record TestStreamQuery87() : IStreamQuery<int>; public sealed record TestStreamQuery87Handler : IStreamQueryHandler<TestStreamQuery87, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery87 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 87; } } }
public sealed record TestStreamQuery88() : IStreamQuery<int>; public sealed record TestStreamQuery88Handler : IStreamQueryHandler<TestStreamQuery88, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery88 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 88; } } }
public sealed record TestStreamQuery89() : IStreamQuery<int>; public sealed record TestStreamQuery89Handler : IStreamQueryHandler<TestStreamQuery89, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery89 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 89; } } }
public sealed record TestStreamQuery90() : IStreamQuery<int>; public sealed record TestStreamQuery90Handler : IStreamQueryHandler<TestStreamQuery90, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery90 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 90; } } }
public sealed record TestStreamQuery91() : IStreamQuery<int>; public sealed record TestStreamQuery91Handler : IStreamQueryHandler<TestStreamQuery91, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery91 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 91; } } }
public sealed record TestStreamQuery92() : IStreamQuery<int>; public sealed record TestStreamQuery92Handler : IStreamQueryHandler<TestStreamQuery92, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery92 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 92; } } }
public sealed record TestStreamQuery93() : IStreamQuery<int>; public sealed record TestStreamQuery93Handler : IStreamQueryHandler<TestStreamQuery93, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery93 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 93; } } }
public sealed record TestStreamQuery94() : IStreamQuery<int>; public sealed record TestStreamQuery94Handler : IStreamQueryHandler<TestStreamQuery94, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery94 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 94; } } }
public sealed record TestStreamQuery95() : IStreamQuery<int>; public sealed record TestStreamQuery95Handler : IStreamQueryHandler<TestStreamQuery95, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery95 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 95; } } }
public sealed record TestStreamQuery96() : IStreamQuery<int>; public sealed record TestStreamQuery96Handler : IStreamQueryHandler<TestStreamQuery96, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery96 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 96; } } }
public sealed record TestStreamQuery97() : IStreamQuery<int>; public sealed record TestStreamQuery97Handler : IStreamQueryHandler<TestStreamQuery97, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery97 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 97; } } }
public sealed record TestStreamQuery98() : IStreamQuery<int>; public sealed record TestStreamQuery98Handler : IStreamQueryHandler<TestStreamQuery98, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery98 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 98; } } }
public sealed record TestStreamQuery99() : IStreamQuery<int>; public sealed record TestStreamQuery99Handler : IStreamQueryHandler<TestStreamQuery99, int> { public async IAsyncEnumerable<int> Handle(TestStreamQuery99 query, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 99; } } }

public sealed record TestStreamCommand0() : IStreamCommand<int>; public sealed record TestStreamCommand0Handler : IStreamCommandHandler<TestStreamCommand0, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand0 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 0; } } }
public sealed record TestStreamCommand1() : IStreamCommand<int>; public sealed record TestStreamCommand1Handler : IStreamCommandHandler<TestStreamCommand1, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand1 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 1; } } }
public sealed record TestStreamCommand2() : IStreamCommand<int>; public sealed record TestStreamCommand2Handler : IStreamCommandHandler<TestStreamCommand2, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand2 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 2; } } }
public sealed record TestStreamCommand3() : IStreamCommand<int>; public sealed record TestStreamCommand3Handler : IStreamCommandHandler<TestStreamCommand3, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand3 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 3; } } }
public sealed record TestStreamCommand4() : IStreamCommand<int>; public sealed record TestStreamCommand4Handler : IStreamCommandHandler<TestStreamCommand4, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand4 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 4; } } }
public sealed record TestStreamCommand5() : IStreamCommand<int>; public sealed record TestStreamCommand5Handler : IStreamCommandHandler<TestStreamCommand5, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand5 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 5; } } }
public sealed record TestStreamCommand6() : IStreamCommand<int>; public sealed record TestStreamCommand6Handler : IStreamCommandHandler<TestStreamCommand6, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand6 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 6; } } }
public sealed record TestStreamCommand7() : IStreamCommand<int>; public sealed record TestStreamCommand7Handler : IStreamCommandHandler<TestStreamCommand7, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand7 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 7; } } }
public sealed record TestStreamCommand8() : IStreamCommand<int>; public sealed record TestStreamCommand8Handler : IStreamCommandHandler<TestStreamCommand8, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand8 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 8; } } }
public sealed record TestStreamCommand9() : IStreamCommand<int>; public sealed record TestStreamCommand9Handler : IStreamCommandHandler<TestStreamCommand9, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand9 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 9; } } }
public sealed record TestStreamCommand10() : IStreamCommand<int>; public sealed record TestStreamCommand10Handler : IStreamCommandHandler<TestStreamCommand10, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand10 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 10; } } }
public sealed record TestStreamCommand11() : IStreamCommand<int>; public sealed record TestStreamCommand11Handler : IStreamCommandHandler<TestStreamCommand11, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand11 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 11; } } }
public sealed record TestStreamCommand12() : IStreamCommand<int>; public sealed record TestStreamCommand12Handler : IStreamCommandHandler<TestStreamCommand12, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand12 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 12; } } }
public sealed record TestStreamCommand13() : IStreamCommand<int>; public sealed record TestStreamCommand13Handler : IStreamCommandHandler<TestStreamCommand13, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand13 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 13; } } }
public sealed record TestStreamCommand14() : IStreamCommand<int>; public sealed record TestStreamCommand14Handler : IStreamCommandHandler<TestStreamCommand14, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand14 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 14; } } }
public sealed record TestStreamCommand15() : IStreamCommand<int>; public sealed record TestStreamCommand15Handler : IStreamCommandHandler<TestStreamCommand15, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand15 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 15; } } }
public sealed record TestStreamCommand16() : IStreamCommand<int>; public sealed record TestStreamCommand16Handler : IStreamCommandHandler<TestStreamCommand16, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand16 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 16; } } }
public sealed record TestStreamCommand17() : IStreamCommand<int>; public sealed record TestStreamCommand17Handler : IStreamCommandHandler<TestStreamCommand17, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand17 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 17; } } }
public sealed record TestStreamCommand18() : IStreamCommand<int>; public sealed record TestStreamCommand18Handler : IStreamCommandHandler<TestStreamCommand18, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand18 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 18; } } }
public sealed record TestStreamCommand19() : IStreamCommand<int>; public sealed record TestStreamCommand19Handler : IStreamCommandHandler<TestStreamCommand19, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand19 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 19; } } }
public sealed record TestStreamCommand20() : IStreamCommand<int>; public sealed record TestStreamCommand20Handler : IStreamCommandHandler<TestStreamCommand20, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand20 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 20; } } }
public sealed record TestStreamCommand21() : IStreamCommand<int>; public sealed record TestStreamCommand21Handler : IStreamCommandHandler<TestStreamCommand21, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand21 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 21; } } }
public sealed record TestStreamCommand22() : IStreamCommand<int>; public sealed record TestStreamCommand22Handler : IStreamCommandHandler<TestStreamCommand22, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand22 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 22; } } }
public sealed record TestStreamCommand23() : IStreamCommand<int>; public sealed record TestStreamCommand23Handler : IStreamCommandHandler<TestStreamCommand23, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand23 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 23; } } }
public sealed record TestStreamCommand24() : IStreamCommand<int>; public sealed record TestStreamCommand24Handler : IStreamCommandHandler<TestStreamCommand24, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand24 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 24; } } }
public sealed record TestStreamCommand25() : IStreamCommand<int>; public sealed record TestStreamCommand25Handler : IStreamCommandHandler<TestStreamCommand25, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand25 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 25; } } }
public sealed record TestStreamCommand26() : IStreamCommand<int>; public sealed record TestStreamCommand26Handler : IStreamCommandHandler<TestStreamCommand26, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand26 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 26; } } }
public sealed record TestStreamCommand27() : IStreamCommand<int>; public sealed record TestStreamCommand27Handler : IStreamCommandHandler<TestStreamCommand27, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand27 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 27; } } }
public sealed record TestStreamCommand28() : IStreamCommand<int>; public sealed record TestStreamCommand28Handler : IStreamCommandHandler<TestStreamCommand28, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand28 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 28; } } }
public sealed record TestStreamCommand29() : IStreamCommand<int>; public sealed record TestStreamCommand29Handler : IStreamCommandHandler<TestStreamCommand29, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand29 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 29; } } }
public sealed record TestStreamCommand30() : IStreamCommand<int>; public sealed record TestStreamCommand30Handler : IStreamCommandHandler<TestStreamCommand30, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand30 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 30; } } }
public sealed record TestStreamCommand31() : IStreamCommand<int>; public sealed record TestStreamCommand31Handler : IStreamCommandHandler<TestStreamCommand31, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand31 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 31; } } }
public sealed record TestStreamCommand32() : IStreamCommand<int>; public sealed record TestStreamCommand32Handler : IStreamCommandHandler<TestStreamCommand32, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand32 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 32; } } }
public sealed record TestStreamCommand33() : IStreamCommand<int>; public sealed record TestStreamCommand33Handler : IStreamCommandHandler<TestStreamCommand33, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand33 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 33; } } }
public sealed record TestStreamCommand34() : IStreamCommand<int>; public sealed record TestStreamCommand34Handler : IStreamCommandHandler<TestStreamCommand34, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand34 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 34; } } }
public sealed record TestStreamCommand35() : IStreamCommand<int>; public sealed record TestStreamCommand35Handler : IStreamCommandHandler<TestStreamCommand35, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand35 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 35; } } }
public sealed record TestStreamCommand36() : IStreamCommand<int>; public sealed record TestStreamCommand36Handler : IStreamCommandHandler<TestStreamCommand36, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand36 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 36; } } }
public sealed record TestStreamCommand37() : IStreamCommand<int>; public sealed record TestStreamCommand37Handler : IStreamCommandHandler<TestStreamCommand37, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand37 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 37; } } }
public sealed record TestStreamCommand38() : IStreamCommand<int>; public sealed record TestStreamCommand38Handler : IStreamCommandHandler<TestStreamCommand38, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand38 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 38; } } }
public sealed record TestStreamCommand39() : IStreamCommand<int>; public sealed record TestStreamCommand39Handler : IStreamCommandHandler<TestStreamCommand39, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand39 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 39; } } }
public sealed record TestStreamCommand40() : IStreamCommand<int>; public sealed record TestStreamCommand40Handler : IStreamCommandHandler<TestStreamCommand40, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand40 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 40; } } }
public sealed record TestStreamCommand41() : IStreamCommand<int>; public sealed record TestStreamCommand41Handler : IStreamCommandHandler<TestStreamCommand41, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand41 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 41; } } }
public sealed record TestStreamCommand42() : IStreamCommand<int>; public sealed record TestStreamCommand42Handler : IStreamCommandHandler<TestStreamCommand42, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand42 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 42; } } }
public sealed record TestStreamCommand43() : IStreamCommand<int>; public sealed record TestStreamCommand43Handler : IStreamCommandHandler<TestStreamCommand43, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand43 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 43; } } }
public sealed record TestStreamCommand44() : IStreamCommand<int>; public sealed record TestStreamCommand44Handler : IStreamCommandHandler<TestStreamCommand44, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand44 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 44; } } }
public sealed record TestStreamCommand45() : IStreamCommand<int>; public sealed record TestStreamCommand45Handler : IStreamCommandHandler<TestStreamCommand45, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand45 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 45; } } }
public sealed record TestStreamCommand46() : IStreamCommand<int>; public sealed record TestStreamCommand46Handler : IStreamCommandHandler<TestStreamCommand46, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand46 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 46; } } }
public sealed record TestStreamCommand47() : IStreamCommand<int>; public sealed record TestStreamCommand47Handler : IStreamCommandHandler<TestStreamCommand47, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand47 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 47; } } }
public sealed record TestStreamCommand48() : IStreamCommand<int>; public sealed record TestStreamCommand48Handler : IStreamCommandHandler<TestStreamCommand48, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand48 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 48; } } }
public sealed record TestStreamCommand49() : IStreamCommand<int>; public sealed record TestStreamCommand49Handler : IStreamCommandHandler<TestStreamCommand49, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand49 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 49; } } }
public sealed record TestStreamCommand50() : IStreamCommand<int>; public sealed record TestStreamCommand50Handler : IStreamCommandHandler<TestStreamCommand50, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand50 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 50; } } }
public sealed record TestStreamCommand51() : IStreamCommand<int>; public sealed record TestStreamCommand51Handler : IStreamCommandHandler<TestStreamCommand51, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand51 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 51; } } }
public sealed record TestStreamCommand52() : IStreamCommand<int>; public sealed record TestStreamCommand52Handler : IStreamCommandHandler<TestStreamCommand52, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand52 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 52; } } }
public sealed record TestStreamCommand53() : IStreamCommand<int>; public sealed record TestStreamCommand53Handler : IStreamCommandHandler<TestStreamCommand53, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand53 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 53; } } }
public sealed record TestStreamCommand54() : IStreamCommand<int>; public sealed record TestStreamCommand54Handler : IStreamCommandHandler<TestStreamCommand54, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand54 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 54; } } }
public sealed record TestStreamCommand55() : IStreamCommand<int>; public sealed record TestStreamCommand55Handler : IStreamCommandHandler<TestStreamCommand55, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand55 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 55; } } }
public sealed record TestStreamCommand56() : IStreamCommand<int>; public sealed record TestStreamCommand56Handler : IStreamCommandHandler<TestStreamCommand56, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand56 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 56; } } }
public sealed record TestStreamCommand57() : IStreamCommand<int>; public sealed record TestStreamCommand57Handler : IStreamCommandHandler<TestStreamCommand57, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand57 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 57; } } }
public sealed record TestStreamCommand58() : IStreamCommand<int>; public sealed record TestStreamCommand58Handler : IStreamCommandHandler<TestStreamCommand58, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand58 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 58; } } }
public sealed record TestStreamCommand59() : IStreamCommand<int>; public sealed record TestStreamCommand59Handler : IStreamCommandHandler<TestStreamCommand59, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand59 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 59; } } }
public sealed record TestStreamCommand60() : IStreamCommand<int>; public sealed record TestStreamCommand60Handler : IStreamCommandHandler<TestStreamCommand60, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand60 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 60; } } }
public sealed record TestStreamCommand61() : IStreamCommand<int>; public sealed record TestStreamCommand61Handler : IStreamCommandHandler<TestStreamCommand61, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand61 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 61; } } }
public sealed record TestStreamCommand62() : IStreamCommand<int>; public sealed record TestStreamCommand62Handler : IStreamCommandHandler<TestStreamCommand62, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand62 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 62; } } }
public sealed record TestStreamCommand63() : IStreamCommand<int>; public sealed record TestStreamCommand63Handler : IStreamCommandHandler<TestStreamCommand63, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand63 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 63; } } }
public sealed record TestStreamCommand64() : IStreamCommand<int>; public sealed record TestStreamCommand64Handler : IStreamCommandHandler<TestStreamCommand64, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand64 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 64; } } }
public sealed record TestStreamCommand65() : IStreamCommand<int>; public sealed record TestStreamCommand65Handler : IStreamCommandHandler<TestStreamCommand65, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand65 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 65; } } }
public sealed record TestStreamCommand66() : IStreamCommand<int>; public sealed record TestStreamCommand66Handler : IStreamCommandHandler<TestStreamCommand66, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand66 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 66; } } }
public sealed record TestStreamCommand67() : IStreamCommand<int>; public sealed record TestStreamCommand67Handler : IStreamCommandHandler<TestStreamCommand67, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand67 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 67; } } }
public sealed record TestStreamCommand68() : IStreamCommand<int>; public sealed record TestStreamCommand68Handler : IStreamCommandHandler<TestStreamCommand68, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand68 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 68; } } }
public sealed record TestStreamCommand69() : IStreamCommand<int>; public sealed record TestStreamCommand69Handler : IStreamCommandHandler<TestStreamCommand69, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand69 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 69; } } }
public sealed record TestStreamCommand70() : IStreamCommand<int>; public sealed record TestStreamCommand70Handler : IStreamCommandHandler<TestStreamCommand70, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand70 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 70; } } }
public sealed record TestStreamCommand71() : IStreamCommand<int>; public sealed record TestStreamCommand71Handler : IStreamCommandHandler<TestStreamCommand71, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand71 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 71; } } }
public sealed record TestStreamCommand72() : IStreamCommand<int>; public sealed record TestStreamCommand72Handler : IStreamCommandHandler<TestStreamCommand72, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand72 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 72; } } }
public sealed record TestStreamCommand73() : IStreamCommand<int>; public sealed record TestStreamCommand73Handler : IStreamCommandHandler<TestStreamCommand73, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand73 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 73; } } }
public sealed record TestStreamCommand74() : IStreamCommand<int>; public sealed record TestStreamCommand74Handler : IStreamCommandHandler<TestStreamCommand74, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand74 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 74; } } }
public sealed record TestStreamCommand75() : IStreamCommand<int>; public sealed record TestStreamCommand75Handler : IStreamCommandHandler<TestStreamCommand75, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand75 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 75; } } }
public sealed record TestStreamCommand76() : IStreamCommand<int>; public sealed record TestStreamCommand76Handler : IStreamCommandHandler<TestStreamCommand76, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand76 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 76; } } }
public sealed record TestStreamCommand77() : IStreamCommand<int>; public sealed record TestStreamCommand77Handler : IStreamCommandHandler<TestStreamCommand77, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand77 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 77; } } }
public sealed record TestStreamCommand78() : IStreamCommand<int>; public sealed record TestStreamCommand78Handler : IStreamCommandHandler<TestStreamCommand78, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand78 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 78; } } }
public sealed record TestStreamCommand79() : IStreamCommand<int>; public sealed record TestStreamCommand79Handler : IStreamCommandHandler<TestStreamCommand79, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand79 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 79; } } }
public sealed record TestStreamCommand80() : IStreamCommand<int>; public sealed record TestStreamCommand80Handler : IStreamCommandHandler<TestStreamCommand80, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand80 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 80; } } }
public sealed record TestStreamCommand81() : IStreamCommand<int>; public sealed record TestStreamCommand81Handler : IStreamCommandHandler<TestStreamCommand81, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand81 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 81; } } }
public sealed record TestStreamCommand82() : IStreamCommand<int>; public sealed record TestStreamCommand82Handler : IStreamCommandHandler<TestStreamCommand82, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand82 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 82; } } }
public sealed record TestStreamCommand83() : IStreamCommand<int>; public sealed record TestStreamCommand83Handler : IStreamCommandHandler<TestStreamCommand83, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand83 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 83; } } }
public sealed record TestStreamCommand84() : IStreamCommand<int>; public sealed record TestStreamCommand84Handler : IStreamCommandHandler<TestStreamCommand84, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand84 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 84; } } }
public sealed record TestStreamCommand85() : IStreamCommand<int>; public sealed record TestStreamCommand85Handler : IStreamCommandHandler<TestStreamCommand85, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand85 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 85; } } }
public sealed record TestStreamCommand86() : IStreamCommand<int>; public sealed record TestStreamCommand86Handler : IStreamCommandHandler<TestStreamCommand86, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand86 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 86; } } }
public sealed record TestStreamCommand87() : IStreamCommand<int>; public sealed record TestStreamCommand87Handler : IStreamCommandHandler<TestStreamCommand87, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand87 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 87; } } }
public sealed record TestStreamCommand88() : IStreamCommand<int>; public sealed record TestStreamCommand88Handler : IStreamCommandHandler<TestStreamCommand88, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand88 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 88; } } }
public sealed record TestStreamCommand89() : IStreamCommand<int>; public sealed record TestStreamCommand89Handler : IStreamCommandHandler<TestStreamCommand89, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand89 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 89; } } }
public sealed record TestStreamCommand90() : IStreamCommand<int>; public sealed record TestStreamCommand90Handler : IStreamCommandHandler<TestStreamCommand90, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand90 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 90; } } }
public sealed record TestStreamCommand91() : IStreamCommand<int>; public sealed record TestStreamCommand91Handler : IStreamCommandHandler<TestStreamCommand91, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand91 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 91; } } }
public sealed record TestStreamCommand92() : IStreamCommand<int>; public sealed record TestStreamCommand92Handler : IStreamCommandHandler<TestStreamCommand92, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand92 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 92; } } }
public sealed record TestStreamCommand93() : IStreamCommand<int>; public sealed record TestStreamCommand93Handler : IStreamCommandHandler<TestStreamCommand93, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand93 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 93; } } }
public sealed record TestStreamCommand94() : IStreamCommand<int>; public sealed record TestStreamCommand94Handler : IStreamCommandHandler<TestStreamCommand94, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand94 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 94; } } }
public sealed record TestStreamCommand95() : IStreamCommand<int>; public sealed record TestStreamCommand95Handler : IStreamCommandHandler<TestStreamCommand95, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand95 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 95; } } }
public sealed record TestStreamCommand96() : IStreamCommand<int>; public sealed record TestStreamCommand96Handler : IStreamCommandHandler<TestStreamCommand96, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand96 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 96; } } }
public sealed record TestStreamCommand97() : IStreamCommand<int>; public sealed record TestStreamCommand97Handler : IStreamCommandHandler<TestStreamCommand97, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand97 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 97; } } }
public sealed record TestStreamCommand98() : IStreamCommand<int>; public sealed record TestStreamCommand98Handler : IStreamCommandHandler<TestStreamCommand98, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand98 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 98; } } }
public sealed record TestStreamCommand99() : IStreamCommand<int>; public sealed record TestStreamCommand99Handler : IStreamCommandHandler<TestStreamCommand99, int> { public async IAsyncEnumerable<int> Handle(TestStreamCommand99 command, [EnumeratorCancellation] CancellationToken cancellationToken) { for (int i = 0; i < 3; i++) { await Task.Yield(); yield return 99; } } }
// csharpier-ignore-end

#endif
