// <auto-generated>
//     Generated by the Mediator source generator.
// </auto-generated>

#pragma warning disable CS8019 // Unused usings
#pragma warning disable CS8321 // Unused local function
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously

#nullable enable

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using System.Linq;

using SD = global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor;

namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    /// DI extensions for Mediator.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public static class MediatorDependencyInjectionExtensions
    {
        /// <summary>
        /// Adds the Mediator implementation and handlers of your application.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services)
        {
            return AddMediator(services, null);
        }

        /// <summary>
        /// Adds the Mediator implementation and handlers of your application, with specified options.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services, global::System.Action<global::Mediator.MediatorOptions>? options)
        {
            var opts = new global::Mediator.MediatorOptions();
            if (options != null)
                options(opts);

            var configuredViaAttribute = {{ ConfiguredViaAttribute }};
            if (opts.ServiceLifetime != {{ ServiceLifetime }} && !configuredViaAttribute)
            {
                var errMsg = "Invalid configuration detected for Mediator. ";
                errMsg += "Generated code for '{{ ServiceLifetimeShort }}' lifetime, but got '" + opts.ServiceLifetime + "' lifetime from options. ";
                errMsg += "This means that the source generator hasn't seen the 'AddMediator' method call during compilation. ";
                errMsg += "Make sure that the 'AddMediator' method is called from the project that references the Mediator.SourceGenerator package.";
                throw new global::System.Exception(errMsg);
            }

            {{~ if ServiceLifetimeIsTransient || ServiceLifetimeIsScoped ~}}
            services.Add(new SD(typeof(global::{{ MediatorNamespace }}.Mediator), typeof(global::{{ MediatorNamespace }}.Mediator), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.IMediator), typeof(global::{{ MediatorNamespace }}.Mediator), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.ISender), typeof(global::{{ MediatorNamespace }}.Mediator), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.IPublisher), typeof(global::{{ MediatorNamespace }}.Mediator), {{ ServiceLifetime }}));
            {{ else }}
            services.Add(new SD(typeof(global::{{ MediatorNamespace }}.Mediator), typeof(global::{{ MediatorNamespace }}.Mediator), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.IMediator), sp => sp.GetRequiredService<global::{{ MediatorNamespace }}.Mediator>(), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.ISender), sp => sp.GetRequiredService<global::{{ MediatorNamespace }}.Mediator>(), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.IPublisher), sp => sp.GetRequiredService<global::{{ MediatorNamespace }}.Mediator>(), {{ ServiceLifetime }}));
            {{~ end ~}}

            {{~ for message in RequestMessages ~}}
            {{ message.Handler.ServiceRegistrationBlock }}
            services.Add(new SD(typeof(global::Mediator.I{{ message.MessageType }}Handler<{{ message.FullName }}, {{ message.ResponseFullName }}>), typeof({{ message.Handler.FullName }}), {{ ServiceLifetime }}));
            services.Add(new SD(
                typeof({{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}),
                typeof({{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}),
                {{ SingletonServiceLifetime }}
            ));
            {{~ end ~}}

            {{~ for handler in NotificationMessageHandlers ~}}
            {{ handler.ServiceRegistrationBlock }}
            {{~ end ~}}

            {{~ for message in NotificationMessages ~}}
            {{~ for registration in message.HandlerServicesRegistrationBlock ~}}
            {{ registration }}
            {{~ end ~}}
            services.Add(new SD(typeof(global::{{ InternalsNamespace }}.NotificationHandlerWrapper<{{ message.FullName }}>), typeof(global::{{ InternalsNamespace }}.NotificationHandlerWrapper<{{ message.FullName }}>), {{ SingletonServiceLifetime }}));
            {{~ end ~}}

            {{~ for handler in OpenGenericNotificationMessageHandlers ~}}
            {{ handler.OpenGenericServiceRegistrationBlock }}
            {{~ end ~}}

            {{~ if ServiceLifetimeIsScoped || ServiceLifetimeIsTransient ~}}
            services.Add(new SD(typeof({{ NotificationPublisherType.FullName }}), typeof({{ NotificationPublisherType.FullName }}), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.INotificationPublisher), sp => sp.GetRequiredService<{{ NotificationPublisherType.FullName }}>(), {{ ServiceLifetime }}));
            {{ else }}
            services.Add(new SD(typeof({{ NotificationPublisherType.FullName }}), typeof({{ NotificationPublisherType.FullName }}), {{ SingletonServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.INotificationPublisher), sp => sp.GetRequiredService<{{ NotificationPublisherType.FullName }}>(), {{ SingletonServiceLifetime }}));
            {{~ end ~}}

            services.Add(new SD(typeof(global::{{ InternalsNamespace }}.IContainerProbe), typeof(global::{{ InternalsNamespace }}.ContainerProbe0), {{ ServiceLifetime }}));
            services.Add(new SD(typeof(global::{{ InternalsNamespace }}.IContainerProbe), typeof(global::{{ InternalsNamespace }}.ContainerProbe1), {{ ServiceLifetime }}));

            services.Add(new SD(typeof(global::{{ InternalsNamespace }}.ContainerMetadata), typeof(global::{{ InternalsNamespace }}.ContainerMetadata), {{ SingletonServiceLifetime }}));

            return services;

			{{~ if HasNotifications ~}}
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            static global::System.Func<global::System.IServiceProvider, T> GetRequiredService<T>() where T : notnull => sp => sp.GetRequiredService<T>();
			{{~ end ~}}
        }
    }
}

namespace {{ InternalsNamespace }}
{
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    internal interface IMessageHandlerBase
    {
        global::System.Threading.Tasks.ValueTask<object?> Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            object request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    internal interface INotificationHandlerBase
    {
        global::System.Threading.Tasks.ValueTask Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            object notification,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    internal interface IStreamMessageHandlerBase
    {
        global::System.Collections.Generic.IAsyncEnumerable<object?> Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            object request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }

    {{~ for wrapperType in RequestMessageHandlerWrappers ~}}
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    internal interface I{{ wrapperType.MessageType }}HandlerBase<TResponse> : {{ wrapperType.HandlerBase }}
    {
        {{ wrapperType.ReturnTypeName }} Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            global::Mediator.I{{ wrapperType.MessageType }}<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class {{ wrapperType.HandlerWrapperTypeNameWithGenericTypeParameters }} : I{{ wrapperType.MessageType }}HandlerBase<TResponse>
        where TRequest : global::Mediator.I{{ wrapperType.MessageType }}<TResponse>
    {
        {{~ if ServiceLifetimeIsSingleton ~}}
        private {{ wrapperType.MessageHandlerDelegateName }} _rootHandler = null!;

        public {{ wrapperType.HandlerWrapperTypeNameWithGenericTypeParameters }} Init(
            global::{{ InternalsNamespace }}.ContainerMetadata containerMetadata,
            global::System.IServiceProvider sp
        )
        {
            var concreteHandler = sp.GetRequiredService<global::Mediator.I{{ wrapperType.MessageType }}Handler<TRequest, TResponse>>();
            var pipelineBehaviours = sp.GetServices<{{ wrapperType.PipelineHandlerTypeName }}>();
            var handler = ({{ wrapperType.MessageHandlerDelegateName }})concreteHandler.Handle;

            {{ wrapperType.PipelineHandlerTypeName }}[] pipelineBehavioursArray;
            if (containerMetadata.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is {{ wrapperType.PipelineHandlerTypeName }}[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<{{ wrapperType.PipelineHandlerTypeName }}[]>(
                    pipelineBehaviours
                );
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not {{ wrapperType.PipelineHandlerTypeName }}[]
                );
                pipelineBehavioursArray = pipelineBehaviours.ToArray();
            }

            for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
            {
                var pipeline = pipelineBehavioursArray[i];
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
            return this;
        }
        {{~ end ~}}

        public {{ wrapperType.ReturnTypeName }} Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            {{~ if ServiceLifetimeIsSingleton ~}}
            var handler = _rootHandler;
            {{~ else ~}}
            var concreteHandler = mediator.Services.GetRequiredService<global::Mediator.I{{ wrapperType.MessageType }}Handler<TRequest, TResponse>>();
            var pipelineBehaviours = mediator.Services.GetServices<{{ wrapperType.PipelineHandlerTypeName }}>();
            var handler = ({{ wrapperType.MessageHandlerDelegateName }})concreteHandler.Handle;

            {{ wrapperType.PipelineHandlerTypeName }}[] pipelineBehavioursArray;
            if (mediator.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is {{ wrapperType.PipelineHandlerTypeName }}[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<{{ wrapperType.PipelineHandlerTypeName }}[]>(
                    pipelineBehaviours
                );
                for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
                {
                    var pipeline = pipelineBehavioursArray[i];
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not {{ wrapperType.PipelineHandlerTypeName }}[]
                );
                foreach (var pipeline in pipelineBehaviours.Reverse())
                {
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            {{~ end ~}}
            return handler(request, cancellationToken);
        }

        public {{ wrapperType.ReturnTypeName }} Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            global::Mediator.I{{ wrapperType.MessageType }}<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle({{ if !ServiceLifetimeIsSingleton; "mediator, "; end; }}(TRequest)request, cancellationToken);
        }

        {{~ if wrapperType.IsStreaming ~}}
        public async {{ wrapperType.ReturnTypeNameWhenObject }} Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            object request,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken
        )
        {
            await foreach (var el in Handle({{ if !ServiceLifetimeIsSingleton; "mediator, "; end; }}(TRequest)request, cancellationToken))
                yield return el;
        }
        {{~ else ~}}
        public async {{ wrapperType.ReturnTypeNameWhenObject }} Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            object request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return await Handle({{ if !ServiceLifetimeIsSingleton; "mediator, "; end; }}(TRequest)request, cancellationToken);
        }
        {{~ end ~}}
    }
    {{~ end ~}}

    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class NotificationHandlerWrapper<TNotification> : INotificationHandlerBase
        where TNotification : global::Mediator.INotification
    {
        {{~ if ServiceLifetimeIsSingleton ~}}
        private {{ NotificationPublisherType.FullName }} _publisher = null!;
        private global::Mediator.INotificationHandler<TNotification>[] _handlers = null!;

        public NotificationHandlerWrapper<TNotification> Init(
            global::{{ InternalsNamespace }}.ContainerMetadata containerMetadata,
            global::System.IServiceProvider sp
        )
        {
            _publisher = containerMetadata.NotificationPublisher;
            var handlers = sp.GetServices<global::Mediator.INotificationHandler<TNotification>>();
            if (containerMetadata.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    handlers is global::Mediator.INotificationHandler<TNotification>[],
                    $"Unexpected type: {handlers.GetType()}"
                );
                _handlers = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<TNotification>[]>(
                    handlers
                );
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    handlers is not global::Mediator.INotificationHandler<TNotification>[],
                    $"Unexpected type: {handlers.GetType()}"
                );
                _handlers = handlers.ToArray();
            }
            return this;
        }
        {{~ end ~}}

        public global::System.Threading.Tasks.ValueTask Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            TNotification notification,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            {{~ if ServiceLifetimeIsSingleton ~}}
            var handlers = _handlers;
            if (handlers.Length == 0)
            {
                return default;
            }
            return _publisher.Publish(
                new global::Mediator.NotificationHandlers<TNotification>(handlers, isArray: true),
                notification,
                cancellationToken
            );
            {{~ else ~}}
            var handlers = mediator.Services.GetServices<global::Mediator.INotificationHandler<TNotification>>();
            var isArray = mediator.ServicesUnderlyingTypeIsArray;
            if (isArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    handlers is global::Mediator.INotificationHandler<TNotification>[],
                    $"Unexpected type: {handlers.GetType()}"
                );
                if (global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<TNotification>[]>(handlers).Length == 0)
                {
                    return default;
                }
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    handlers is not global::Mediator.INotificationHandler<TNotification>[],
                    $"Unexpected type: {handlers.GetType()}"
                );
            }
            return mediator.NotificationPublisher.Publish(
                new global::Mediator.NotificationHandlers<TNotification>(handlers, isArray),
                notification,
                cancellationToken
            );
            {{~ end ~}}
        }

        public global::System.Threading.Tasks.ValueTask Handle(
            {{~ if !ServiceLifetimeIsSingleton ~}}
            global::{{ MediatorNamespace }}.Mediator mediator,
            {{~ end ~}}
            object notification,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle({{ if !ServiceLifetimeIsSingleton; "mediator, "; end; }}(TNotification)notification, cancellationToken);
        }
    }

    internal interface IContainerProbe { }
    internal sealed class ContainerProbe0 : IContainerProbe { }
    internal sealed class ContainerProbe1 : IContainerProbe { }

    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class ContainerMetadata
    {
        public readonly bool ServicesUnderlyingTypeIsArray;

        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> RequestHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> CommandHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> QueryHandlerWrappers;

        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> StreamRequestHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> StreamCommandHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> StreamQueryHandlerWrappers;

        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> NotificationHandlerWrappers;

        {{~ for message in IRequestMessages ~}}
        public readonly {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }} {{ message.HandlerWrapperPropertyName }};
        {{~ end ~}}

        {{~ for message in ICommandMessages ~}}
        public readonly {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }} {{ message.HandlerWrapperPropertyName }};
        {{~ end ~}}

        {{~ for message in IQueryMessages ~}}
        public readonly {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }} {{ message.HandlerWrapperPropertyName }};
        {{~ end ~}}

        {{~ for message in IStreamRequestMessages ~}}
        public readonly {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }} {{ message.HandlerWrapperPropertyName }};
        {{~ end ~}}

        {{~ for message in IStreamCommandMessages ~}}
        public readonly {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }} {{ message.HandlerWrapperPropertyName }};
        {{~ end ~}}

        {{~ for message in IStreamQueryMessages ~}}
        public readonly {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }} {{ message.HandlerWrapperPropertyName }};
        {{~ end ~}}

        {{~ for message in NotificationMessages ~}}
        public readonly {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }} {{ message.HandlerWrapperPropertyName }};
        {{~ end ~}}

        {{~ if ServiceLifetimeIsSingleton ~}}
        public readonly {{ NotificationPublisherType.FullName }} NotificationPublisher;
        {{~ end ~}}

        public ContainerMetadata(global::System.IServiceProvider sp)
        {
            {{~ if ServiceLifetimeIsScoped ~}}
            using (var scope = sp.CreateScope())
            {
                ServicesUnderlyingTypeIsArray = scope.ServiceProvider.GetServices<global::{{ InternalsNamespace }}.IContainerProbe>() is global::{{ InternalsNamespace }}.IContainerProbe[];
            }
            {{~ else ~}}
            ServicesUnderlyingTypeIsArray = sp.GetServices<global::{{ InternalsNamespace }}.IContainerProbe>() is global::{{ InternalsNamespace }}.IContainerProbe[];
            {{~ end ~}}

            {{~ if ServiceLifetimeIsSingleton ~}}
            NotificationPublisher = sp.GetRequiredService<{{ NotificationPublisherType.FullName }}>();
            {{~ end ~}}

            var requestHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>({{ object.size IRequestMessages }});
            var commandHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>({{ object.size ICommandMessages }});
            var queryHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>({{ object.size IQueryMessages }});
            {{~ for message in IRequestMessages ~}}
            requestHandlerTypes.Add(typeof({{ message.FullName }}), sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }});
            {{~ end ~}}
            {{~ for message in ICommandMessages ~}}
            commandHandlerTypes.Add(typeof({{ message.FullName }}), sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }});
            {{~ end ~}}
            {{~ for message in IQueryMessages ~}}
            queryHandlerTypes.Add(typeof({{ message.FullName }}), sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }});
            {{~ end ~}}
            RequestHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(requestHandlerTypes);
            CommandHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(commandHandlerTypes);
            QueryHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(queryHandlerTypes);

            var streamRequestHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>({{ object.size IStreamRequestMessages }});
            var streamCommandHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>({{ object.size IStreamCommandMessages }});
            var streamQueryHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>({{ object.size IStreamQueryMessages }});
            {{~ for message in IStreamRequestMessages ~}}
            streamRequestHandlerTypes.Add(typeof({{ message.FullName }}), sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }});
            {{~ end ~}}
            {{~ for message in IStreamCommandMessages ~}}
            streamCommandHandlerTypes.Add(typeof({{ message.FullName }}), sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }});
            {{~ end ~}}
            {{~ for message in IStreamQueryMessages ~}}
            streamQueryHandlerTypes.Add(typeof({{ message.FullName }}), sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }});
            {{~ end ~}}
            StreamRequestHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(streamRequestHandlerTypes);
            StreamCommandHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(streamCommandHandlerTypes);
            StreamQueryHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(streamQueryHandlerTypes);

            var notificationHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>({{ object.size NotificationMessages }});
            {{~ for message in NotificationMessages ~}}
            notificationHandlerTypes.Add(typeof({{ message.FullName }}), sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }});
            {{~ end ~}}
            NotificationHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(notificationHandlerTypes);

            {{~ for message in IRequestMessages ~}}
            {{ message.HandlerWrapperPropertyName }} = sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }};
            {{~ end ~}}

            {{~ for message in ICommandMessages ~}}
            {{ message.HandlerWrapperPropertyName }} = sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }};
            {{~ end ~}}

            {{~ for message in IQueryMessages ~}}
            {{ message.HandlerWrapperPropertyName }} = sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }};
            {{~ end ~}}

            {{~ for message in IStreamRequestMessages ~}}
            {{ message.HandlerWrapperPropertyName }} = sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }};
            {{~ end ~}}

            {{~ for message in IStreamCommandMessages ~}}
            {{ message.HandlerWrapperPropertyName }} = sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }};
            {{~ end ~}}

            {{~ for message in IStreamQueryMessages ~}}
            {{ message.HandlerWrapperPropertyName }} = sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }};
            {{~ end ~}}

            {{~ for message in NotificationMessages ~}}
            {{ message.HandlerWrapperPropertyName }} = sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>(){{ if ServiceLifetimeIsSingleton; ".Init(this, sp)"; end; }};
            {{~ end ~}}
        }
    }
}

namespace {{ MediatorNamespace }}
{
    /// <summary>
    /// Generated code for Mediator implementation.
    /// This type is also registered as a DI service.
    /// Can be used directly for high performance scenarios.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public sealed partial class Mediator : global::Mediator.IMediator, global::Mediator.ISender, global::Mediator.IPublisher
    {
        internal readonly global::System.IServiceProvider Services;
        {{~ if ServiceLifetimeIsSingleton ~}}
        {{ if IsTestRun }}internal{{ else }}private{{ end }} FastLazyValue<global::{{ InternalsNamespace }}.ContainerMetadata, global::{{ MediatorNamespace }}.Mediator> _containerMetadata;
        private {{ NotificationPublisherType.FullName }}? _notificationPublisher;
        internal {{ NotificationPublisherType.FullName }} NotificationPublisher
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                if (_notificationPublisher == null)
                    _notificationPublisher = {{ ContainerMetadataField }}.NotificationPublisher;
                return _notificationPublisher!;
            }
        }
        private bool? _servicesUnderlyingTypeIsArray;
        internal bool ServicesUnderlyingTypeIsArray
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                if (_servicesUnderlyingTypeIsArray == null)
                    _servicesUnderlyingTypeIsArray = {{ ContainerMetadataField }}.ServicesUnderlyingTypeIsArray;
                return _servicesUnderlyingTypeIsArray!.Value;
            }
        }
        {{~ else ~}}
        private global::{{ InternalsNamespace }}.ContainerMetadata? _containerMetadataStorage;
        private global::{{ InternalsNamespace }}.ContainerMetadata _containerMetadata
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                if (_containerMetadataStorage == null)
                {
                    var containerMetadata = Services.GetRequiredService<global::{{ InternalsNamespace }}.ContainerMetadata>();
                    _containerMetadataStorage = containerMetadata;
                    return containerMetadata;
                }
                return _containerMetadataStorage;
            }
        }
        private {{ NotificationPublisherType.FullName }}? _notificationPublisher;
        internal {{ NotificationPublisherType.FullName }} NotificationPublisher
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                if (_notificationPublisher == null)
                    _notificationPublisher = Services.GetRequiredService<{{ NotificationPublisherType.FullName }}>();
                return _notificationPublisher!;
            }
        }
        internal bool ServicesUnderlyingTypeIsArray => {{ ContainerMetadataField }}.ServicesUnderlyingTypeIsArray;
        {{~ end ~}}

        /// <summary>
        /// The lifetime of Mediator-related service registrations in DI container.
        /// </summary>
        public const global::Microsoft.Extensions.DependencyInjection.ServiceLifetime ServiceLifetime = {{ ServiceLifetime }};

        /// <summary>
        /// The name of the notification publisher service that was configured.
        /// </summary>
        public const string NotificationPublisherName = "{{ NotificationPublisherType.Name }}";

        /// <summary>
        /// The total number of Mediator messages that were discovered.
        /// </summary>
        public const int TotalMessages = {{ TotalMessages }};

        /// <summary>
        /// Constructor for DI, should not be used by consumer.
        /// </summary>
        public Mediator(global::System.IServiceProvider sp)
        {
            Services = sp;
            {{~ if ServiceLifetimeIsSingleton ~}}
            _containerMetadata = new FastLazyValue<global::{{ InternalsNamespace }}.ContainerMetadata, global::{{ MediatorNamespace }}.Mediator>(
                self => self.Services.GetRequiredService<global::{{ InternalsNamespace }}.ContainerMetadata>(),
                this
            );
            {{~ end ~}}
        }
        {{~ if ServiceLifetimeIsSingleton ~}}

        {{ if IsTestRun; "internal"; else; "private"; end; }} struct FastLazyValue<T, TArg>
        {
            {{ if IsTestRun; "internal"; else; "private"; end; }} const long UNINIT = 0;
            {{ if IsTestRun; "internal"; else; "private"; end; }} const long INITING = 1;
            {{ if IsTestRun; "internal"; else; "private"; end; }} const long INITD = 2;
            {{~ if IsTestRun ~}}internal const long INVALID = -1;{{~ end ~}}
            {{~ if IsTestRun ~}}internal const long CACHED = 3;{{~ end ~}}

            {{ if IsTestRun; "internal"; else; "private"; end; }} global::System.Func<TArg, T> _generator;
            {{ if IsTestRun; "internal"; else; "private"; end; }} long _state;
            {{ if IsTestRun; "internal"; else; "private"; end; }} T _value;
            {{ if IsTestRun; "internal"; else; "private"; end; }} TArg _arg;

            public T Value
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                get
                {
                    if (_state != INITD)
                        return ValueSlow;

                    return _value;
                }
            }

            {{ if IsTestRun; "internal"; else; "private"; end; }} T ValueSlow
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
                get
                {
                    var prevState = global::System.Threading.Interlocked.CompareExchange(ref _state, INITING, UNINIT);
                    switch (prevState)
                    {
                        case INITD:
                            // Someone has already completed init
                            return _value;
                        case INITING:
                            // Wait for someone else to complete
                            var spinWait = default(global::System.Threading.SpinWait);
                            while (global::System.Threading.Interlocked.Read(ref _state) < INITD)
                                spinWait.SpinOnce();
                            return _value;
                        case UNINIT:
                            _value = _generator(_arg);
                            global::System.Threading.Interlocked.Exchange(ref _state, INITD);
                            return _value;
                    }

                    return _value;
                }
            }

            {{~ if IsTestRun ~}}
            internal (T, long) ValueInstrumented
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                get
                {
                    if (_state != INITD)
                        return ValueSlowInstrumented;

                    return (_value, CACHED);
                }
            }

            internal (T, long) ValueSlowInstrumented
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
                get
                {
                    var prevState = global::System.Threading.Interlocked.CompareExchange(ref _state, INITING, UNINIT);
                    switch (prevState)
                    {
                        case INITD:
                            // Someone has already completed init
                            return (_value, INITD);
                        case INITING:
                            // Wait for someone else to complete
                            var spinWait = default(global::System.Threading.SpinWait);
                            while (global::System.Threading.Interlocked.Read(ref _state) < INITD)
                                spinWait.SpinOnce();
                            return (_value, INITING);
                        case UNINIT:
                            _value = _generator(_arg);
                            global::System.Threading.Interlocked.Exchange(ref _state, INITD);
                            return (_value, UNINIT);
                    }

                    return (_value, INVALID);
                }
            }

            {{~ end ~}}
            public FastLazyValue(global::System.Func<TArg, T> generator, TArg arg)
            {
                _generator = generator;
                _state = UNINIT;
                _value = default!;
                _arg = arg;
            }
        }
        {{~ end ~}}

        {{~ if HasManyRequests ~}}

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private object GetRequestHandler(global::Mediator.IBaseRequest request)
        {
            ThrowIfNull(request, nameof(request));
            if (!{{ ContainerMetadataField }}.RequestHandlerWrappers.TryGetValue(request.GetType(), out var handler))
                ThrowMissingHandler(request);
            return handler!;
        }
        {{~ end ~}}
        {{~ if HasManyCommands ~}}

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private object GetCommandHandler(global::Mediator.IBaseCommand command)
        {
            ThrowIfNull(command, nameof(command));
            if (!{{ ContainerMetadataField }}.CommandHandlerWrappers.TryGetValue(command.GetType(), out var handler))
                ThrowMissingHandler(command);
            return handler!;
        }
        {{~ end ~}}
        {{~ if HasManyQueries ~}}

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private object GetQueryHandler(global::Mediator.IBaseQuery query)
        {
            ThrowIfNull(query, nameof(query));
            if (!{{ ContainerMetadataField }}.QueryHandlerWrappers.TryGetValue(query.GetType(), out var handler))
                ThrowMissingHandler(query);
            return handler!;
        }
        {{~ end ~}}
        {{~ if HasManyStreamRequests ~}}

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private object GetStreamRequestHandler(global::Mediator.IBaseStreamRequest request)
        {
            ThrowIfNull(request, nameof(request));
            if (!{{ ContainerMetadataField }}.StreamRequestHandlerWrappers.TryGetValue(request.GetType(), out var handler))
                ThrowMissingHandler(request);
            return handler!;
        }
        {{~ end ~}}
        {{~ if HasManyStreamCommands ~}}

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private object GetStreamCommandHandler(global::Mediator.IBaseStreamCommand command)
        {
            ThrowIfNull(command, nameof(command));
            if (!{{ ContainerMetadataField }}.StreamCommandHandlerWrappers.TryGetValue(command.GetType(), out var handler))
                ThrowMissingHandler(command);
            return handler!;
        }
        {{~ end ~}}
        {{~ if HasManyStreamQueries ~}}

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private object GetStreamQueryHandler(global::Mediator.IBaseStreamQuery query)
        {
            ThrowIfNull(query, nameof(query));
            if (!{{ ContainerMetadataField }}.StreamQueryHandlerWrappers.TryGetValue(query.GetType(), out var handler))
                ThrowMissingHandler(query);
            return handler!;
        }
        {{~ end ~}}
        {{~ if HasManyNotifications ~}}

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private object GetNotificationHandler(global::Mediator.INotification notification)
        {
            ThrowIfNull(notification, nameof(notification));
            if (!{{ ContainerMetadataField }}.NotificationHandlerWrappers.TryGetValue(notification.GetType(), out var handler))
                ThrowMissingHandler(notification); // This shouldn't happen, wrappers for every notification type should be created here
            return handler!;
        }
        {{~ end ~}}

        {{~ for message in IRequestMessages ~}}

        /// <summary>
        /// Send a request of type {{ message.RequestFullName }}.
        {{- if message.IsClass }}
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        {{- end }}
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        {{ message.AccessibilityModifier }} {{ message.AsyncReturnType }} {{ message.AsyncMethodName }}(
            {{ message.RequestFullName }} request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if message.IsClass ~}}
            ThrowIfNull(request, nameof(request));
            {{~ end ~}}
            return {{ ContainerMetadataField }}.{{ message.HandlerWrapperPropertyName }}.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}request, cancellationToken);
        }
        {{~ end ~}}
        {{~ for message in ICommandMessages ~}}

        /// <summary>
        /// Send a command of type {{ message.RequestFullName }}.
        {{- if message.IsClass }}
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        {{- end }}
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        {{ message.AccessibilityModifier }} {{ message.AsyncReturnType }} {{ message.AsyncMethodName }}(
            {{ message.RequestFullName }} command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if message.IsClass ~}}
            ThrowIfNull(command, nameof(command));
            {{~ end ~}}
            return {{ ContainerMetadataField }}.{{ message.HandlerWrapperPropertyName }}.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}command, cancellationToken);
        }
        {{~ end ~}}
        {{~ for message in IQueryMessages ~}}

        /// <summary>
        /// Send a query of type {{ message.RequestFullName }}.
        {{- if message.IsClass }}
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        {{- end }}
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        {{ message.AccessibilityModifier }} {{ message.AsyncReturnType }} {{ message.AsyncMethodName }}(
            {{ message.RequestFullName }} query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if message.IsClass ~}}
            ThrowIfNull(query, nameof(query));
            {{~ end ~}}
            return {{ ContainerMetadataField }}.{{ message.HandlerWrapperPropertyName }}.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}query, cancellationToken);
        }
        {{~ end ~}}
        {{~ for message in IStreamRequestMessages ~}}

        /// <summary>
        /// Create a stream from request type {{ message.RequestFullName }}.
        {{- if message.IsClass }}
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        {{- end }}
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        {{ message.AccessibilityModifier }} {{ message.AsyncReturnType }} {{ message.AsyncMethodName }}(
            {{ message.RequestFullName }} request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if message.IsClass ~}}
            ThrowIfNull(request, nameof(request));
            {{~ end ~}}
            return {{ ContainerMetadataField }}.{{ message.HandlerWrapperPropertyName }}.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}request, cancellationToken);
        }
        {{~ end ~}}
        {{~ for message in IStreamCommandMessages ~}}

        /// <summary>
        /// Create a stream from command type {{ message.RequestFullName }}.
        {{- if message.IsClass }}
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        {{- end }}
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        {{ message.AccessibilityModifier }} {{ message.AsyncReturnType }} {{ message.AsyncMethodName }}(
            {{ message.RequestFullName }} command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if message.IsClass ~}}
            ThrowIfNull(command, nameof(command));
            {{~ end ~}}
            return {{ ContainerMetadataField }}.{{ message.HandlerWrapperPropertyName }}.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}command, cancellationToken);
        }
        {{~ end ~}}
        {{~ for message in IStreamQueryMessages ~}}

        /// <summary>
        /// Create a stream from query type {{ message.RequestFullName }}.
        {{- if message.IsClass }}
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        {{- end }}
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        {{ message.AccessibilityModifier }} {{ message.AsyncReturnType }} {{ message.AsyncMethodName }}(
            {{ message.RequestFullName }} query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if message.IsClass ~}}
            ThrowIfNull(query, nameof(query));
            {{~ end ~}}
            return {{ ContainerMetadataField }}.{{ message.HandlerWrapperPropertyName }}.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}query, cancellationToken);
        }
        {{~ end ~}}

        /// <summary>
        /// Send request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if request does not implement <see cref="global::Mediator.IRequest{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasRequests ~}}
            {{~ if HasManyRequests ~}}
            var handlerObj = GetRequestHandler(request);
            if (handlerObj is global::{{ InternalsNamespace }}.IRequestHandlerBase<TResponse>)
            {
                ref var handler = ref global::System.Runtime.CompilerServices.Unsafe.As<object, global::{{ InternalsNamespace }}.IRequestHandlerBase<TResponse>>(ref handlerObj);
                return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}request, cancellationToken);
            }
            return SendAsync(request, handlerObj, cancellationToken);
            {{~ else ~}}
            switch (request)
            {
                {{~ for message in IRequestMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    if (typeof(TResponse) == typeof({{ message.ResponseFullNameWithoutReferenceNullability }}))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                {{~ end ~}}
                default:
                {
                    ThrowInvalidRequest(request, nameof(request));
                    return default;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidRequest(request, nameof(request));
            return default;
            {{~ end ~}}
        }

        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.IRequest<TResponse> request,
            {{~ if HasManyRequests ~}}
            object handlerObj,
            {{~ end ~}}
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasRequests ~}}
            {{~ if HasManyRequests ~}}
            var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IMessageHandlerBase>(handlerObj);
            var response = await handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}request, cancellationToken);
            return global::System.Runtime.CompilerServices.Unsafe.As<object?, TResponse>(ref response);
            {{~ else ~}}
            switch (request)
            {
                {{~ for message in IRequestMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.ResponseFullName }}, TResponse>(ref response);
                }
                {{~ end ~}}
                default:
                {
                    ThrowInvalidRequest(request, nameof(request));
                    return default!;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidRequest(request, nameof(request));
            return default!;
            {{~ end ~}}
        }

        /// <summary>
        /// Create stream for request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if request does not implement <see cref="global::Mediator.IStreamRequest{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasStreamRequests ~}}
            {{~ if HasManyStreamRequests ~}}
            var handlerObj = GetStreamRequestHandler(request);
            if (handlerObj is global::{{ InternalsNamespace }}.IStreamRequestHandlerBase<TResponse>)
            {
                ref var handler = ref global::System.Runtime.CompilerServices.Unsafe.As<object, global::{{ InternalsNamespace }}.IStreamRequestHandlerBase<TResponse>>(ref handlerObj);
                return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}request, cancellationToken);
            }
            return CreateStreamAsync(request, handlerObj, cancellationToken);
            {{~ else ~}}
            switch (request)
            {
                {{~ for message in IStreamRequestMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                {{~ end ~}}
                default:
                {
                    ThrowInvalidStreamRequest(request, nameof(request));
                    return default!;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidStreamRequest(request, nameof(request));
            return default!;
            {{~ end ~}}
        }
        {{~ if HasManyStreamRequests ~}}

        private async global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStreamAsync<TResponse>(
            global::Mediator.IStreamRequest<TResponse> request,
            object handlerObj,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IStreamMessageHandlerBase>(handlerObj);
            await foreach (var r in handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}request, cancellationToken))
            {
                yield return (TResponse)r!;
            }
        }
        {{~ end ~}}

        /// <summary>
        /// Send command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if command does not implement <see cref="global::Mediator.ICommand{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.ICommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasCommands ~}}
            {{~ if HasManyCommands ~}}
            var handlerObj = GetCommandHandler(command);
            if (handlerObj is global::{{ InternalsNamespace }}.ICommandHandlerBase<TResponse>)
            {
                ref var handler = ref global::System.Runtime.CompilerServices.Unsafe.As<object, global::{{ InternalsNamespace }}.ICommandHandlerBase<TResponse>>(ref handlerObj);
                return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}command, cancellationToken);
            }
            return SendAsync(command, handlerObj, cancellationToken);
            {{~ else ~}}
            switch (command)
            {
                {{~ for message in ICommandMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    if (typeof(TResponse) == typeof({{ message.ResponseFullNameWithoutReferenceNullability }}))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                {{~ end ~}}
                default:
                {
                    ThrowInvalidCommand(command, nameof(command));
                    return default;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidCommand(command, nameof(command));
            return default;
            {{~ end ~}}
        }

        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.ICommand<TResponse> command,
            {{~ if HasManyRequests ~}}
            object handlerObj,
            {{~ end ~}}
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasCommands ~}}
            {{~ if HasManyCommands ~}}
            var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IMessageHandlerBase>(handlerObj);
            var response = await handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}command, cancellationToken);
            return global::System.Runtime.CompilerServices.Unsafe.As<object?, TResponse>(ref response);
            {{~ else ~}}
            switch (command)
            {
                {{~ for message in ICommandMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.ResponseFullName }}, TResponse>(ref response);
                }
                {{~ end ~}}
                default:
                {
                    ThrowInvalidCommand(command, nameof(command));
                    return default!;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidCommand(command, nameof(command));
            return default!;
            {{~ end ~}}
        }

        /// <summary>
        /// Create stream for command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if command does not implement <see cref="global::Mediator.IStreamCommand{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamCommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasStreamCommands ~}}
            {{~ if HasManyStreamCommands ~}}
            var handlerObj = GetStreamCommandHandler(command);
            if (handlerObj is global::{{ InternalsNamespace }}.IStreamCommandHandlerBase<TResponse>)
            {
                ref var handler = ref global::System.Runtime.CompilerServices.Unsafe.As<object, global::{{ InternalsNamespace }}.IStreamCommandHandlerBase<TResponse>>(ref handlerObj);
                return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}command, cancellationToken);
            }
            return CreateStreamAsync(command, handlerObj, cancellationToken);
            {{~ else ~}}
            switch (command)
            {
                {{~ for message in IStreamCommandMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                {{~ end ~}}
                default:
                {
                    ThrowInvalidStreamCommand(command, nameof(command));
                    return default!;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidStreamCommand(command, nameof(command));
            return default!;
            {{~ end ~}}
        }
        {{~ if HasManyStreamCommands ~}}

        private async global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStreamAsync<TResponse>(
            global::Mediator.IStreamCommand<TResponse> command,
            object handlerObj,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IStreamMessageHandlerBase>(handlerObj);
            await foreach (var r in handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}command, cancellationToken))
            {
                yield return (TResponse)r!;
            }
        }
        {{~ end ~}}

        /// <summary>
        /// Send query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if query does not implement <see cref="global::Mediator.IQuery{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasQueries ~}}
            {{~ if HasManyQueries ~}}
            var handlerObj = GetQueryHandler(query);
            if (handlerObj is global::{{ InternalsNamespace }}.IQueryHandlerBase<TResponse>)
            {
                ref var handler = ref global::System.Runtime.CompilerServices.Unsafe.As<object, global::{{ InternalsNamespace }}.IQueryHandlerBase<TResponse>>(ref handlerObj);
                return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}query, cancellationToken);
            }
            return SendAsync(query, handlerObj, cancellationToken);
            {{~ else ~}}
            switch (query)
            {
                {{~ for message in IQueryMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    if (typeof(TResponse) == typeof({{ message.ResponseFullNameWithoutReferenceNullability }}))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                {{~ end ~}}
                default:
                {
                    ThrowInvalidQuery(query, nameof(query));
                    return default;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidQuery(query, nameof(query));
            return default;
            {{~ end ~}}
        }

        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.IQuery<TResponse> query,
            {{~ if HasManyRequests ~}}
            object handlerObj,
            {{~ end ~}}
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasQueries ~}}
            {{~ if HasManyQueries ~}}
            var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IMessageHandlerBase>(handlerObj);
            var response = await handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}query, cancellationToken);
            return global::System.Runtime.CompilerServices.Unsafe.As<object?, TResponse>(ref response);
            {{~ else ~}}
            switch (query)
            {
                {{~ for message in IQueryMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.ResponseFullName }}, TResponse>(ref response);
                }
                {{~ end ~}}
                default:
                {
                    ThrowInvalidQuery(query, nameof(query));
                    return default!;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidQuery(query, nameof(query));
            return default!;
            {{~ end ~}}
        }

        /// <summary>
        /// Create stream for query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if query does not implement <see cref="global::Mediator.IStreamQuery{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasStreamQueries ~}}
            {{~ if HasManyStreamQueries ~}}
            var handlerObj = GetStreamQueryHandler(query);
            if (handlerObj is global::{{ InternalsNamespace }}.IStreamQueryHandlerBase<TResponse>)
            {
                ref var handler = ref global::System.Runtime.CompilerServices.Unsafe.As<object, global::{{ InternalsNamespace }}.IStreamQueryHandlerBase<TResponse>>(ref handlerObj);
                return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}query, cancellationToken);
            }
            return CreateStreamAsync(query, handlerObj, cancellationToken);
            {{~ else ~}}
            switch (query)
            {
                {{~ for message in IStreamQueryMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                {{~ end ~}}
                default:
                {
                    ThrowInvalidStreamQuery(query, nameof(query));
                    return default!;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidStreamQuery(query, nameof(query));
            return default!;
            {{~ end ~}}
        }
        {{~ if HasManyStreamQueries ~}}

        private async global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStreamAsync<TResponse>(
            global::Mediator.IStreamQuery<TResponse> query,
            object handlerObj,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IStreamMessageHandlerBase>(handlerObj);
            await foreach (var r in handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}query, cancellationToken))
            {
                yield return (TResponse)r!;
            }
        }
        {{~ end ~}}

        /// <summary>
        /// Send message.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if message does not implement <see cref="global::Mediator.IMessage"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public{{ if HasAnyRequest; " async "; else; " "; end; }}global::System.Threading.Tasks.ValueTask<object?> Send(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasAnyRequest ~}}
            switch (message)
            {
                case global::Mediator.IBaseRequest request:
                    {{~ if HasManyRequests ~}}
                    {
                        var handlerObj = GetRequestHandler(request);
                        global::System.Diagnostics.Debug.Assert(
                            handlerObj is global::{{ InternalsNamespace }}.IMessageHandlerBase,
                            $"Unexpected type: {handlerObj.GetType()}"
                        );
                        var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IMessageHandlerBase>(handlerObj);
                        return await handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}request, cancellationToken);
                    }
                    {{~ else ~}}
                    switch (request)
                    {
                        {{~ for message in IRequestMessages ~}}
                        case {{ message.RequestFullName }} r: return await Send(r, cancellationToken);
                        {{~ end ~}}
                        default:
                        {
                            ThrowInvalidRequest(request, nameof(request));
                            return default;
                        }
                    }
                    {{~ end ~}}
                case global::Mediator.IBaseCommand command:
                    {{~ if HasManyCommands ~}}
                    {
                        var handlerObj = GetCommandHandler(command);
                        global::System.Diagnostics.Debug.Assert(
                            handlerObj is global::{{ InternalsNamespace }}.IMessageHandlerBase,
                            $"Unexpected type: {handlerObj.GetType()}"
                        );
                        var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IMessageHandlerBase>(handlerObj);
                        return await handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}command, cancellationToken);
                    }
                    {{~ else ~}}
                    switch (command)
                    {
                        {{~ for message in ICommandMessages ~}}
                        case {{ message.RequestFullName }} r: return await Send(r, cancellationToken);
                        {{~ end ~}}
                        default:
                        {
                            ThrowInvalidCommand(command, nameof(command));
                            return default;
                        }
                    }
                    {{~ end ~}}
                case global::Mediator.IBaseQuery query:
                    {{~ if HasManyQueries ~}}
                    {
                        var handlerObj = GetQueryHandler(query);
                        global::System.Diagnostics.Debug.Assert(
                            handlerObj is global::{{ InternalsNamespace }}.IMessageHandlerBase,
                            $"Unexpected type: {handlerObj.GetType()}"
                        );
                        var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IMessageHandlerBase>(handlerObj);
                        return await handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}query, cancellationToken);
                    }
                    {{~ else ~}}
                    switch (query)
                    {
                        {{~ for message in IQueryMessages ~}}
                        case {{ message.RequestFullName }} r: return await Send(r, cancellationToken);
                        {{~ end ~}}
                        default:
                        {
                            ThrowInvalidQuery(query, nameof(query));
                            return default;
                        }
                    }
                    {{~ end ~}}
                default:
                    ThrowInvalidMessage(message, nameof(message));
                    return default!;
            }
            {{~ else ~}}
            ThrowInvalidMessage(message, nameof(message));
            return default;
            {{~ end ~}}
        }

        /// <summary>
        /// Create stream.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if message does not implement <see cref="global::Mediator.IStreamMessage"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<object?> CreateStream(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasAnyStreamRequest ~}}
            switch (message)
            {
                case global::Mediator.IBaseStreamRequest request:
                    {{~ if HasManyStreamRequests ~}}
                    {
                        var handlerObj = GetStreamRequestHandler(request);
                        global::System.Diagnostics.Debug.Assert(
                            handlerObj is global::{{ InternalsNamespace }}.IStreamMessageHandlerBase,
                            $"Unexpected type: {handlerObj.GetType()}"
                        );
                        var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IStreamMessageHandlerBase>(handlerObj);
                        return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}request, cancellationToken);
                    }
                    {{~ else ~}}
                    switch (request)
                    {
                        {{~ for message in IStreamRequestMessages ~}}
                        case {{ message.RequestFullName }} m:
                        {
                            {{~ if message.ResponseIsValueType ~}}
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                            {{~ else ~}}
                            return CreateStream(m, cancellationToken);
                            {{~ end ~}}
                        }
                        {{~ end ~}}
                        default:
                        {
                            ThrowInvalidStreamMessage(message, nameof(message));
                            return default!;
                        }
                    }
                    {{~ end ~}}
                case global::Mediator.IBaseStreamCommand command:
                    {{~ if HasManyStreamCommands ~}}
                    {
                        var handlerObj = GetStreamCommandHandler(command);
                        global::System.Diagnostics.Debug.Assert(
                            handlerObj is global::{{ InternalsNamespace }}.IStreamMessageHandlerBase,
                            $"Unexpected type: {handlerObj.GetType()}"
                        );
                        var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IStreamMessageHandlerBase>(handlerObj);
                        return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}command, cancellationToken);
                    }
                    {{~ else ~}}
                    switch (command)
                    {
                        {{~ for message in IStreamCommandMessages ~}}
                        case {{ message.RequestFullName }} m:
                        {
                            {{~ if message.ResponseIsValueType ~}}
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                            {{~ else ~}}
                            return CreateStream(m, cancellationToken);
                            {{~ end ~}}
                        }
                        {{~ end ~}}
                        default:
                        {
                            ThrowInvalidStreamMessage(message, nameof(message));
                            return default!;
                        }
                    }
                    {{~ end ~}}
                case global::Mediator.IBaseStreamQuery query:
                    {{~ if HasManyStreamQueries ~}}
                    {
                        var handlerObj = GetStreamQueryHandler(query);
                        global::System.Diagnostics.Debug.Assert(
                            handlerObj is global::{{ InternalsNamespace }}.IStreamMessageHandlerBase,
                            $"Unexpected type: {handlerObj.GetType()}"
                        );
                        var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.IStreamMessageHandlerBase>(handlerObj);
                        return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}query, cancellationToken);
                    }
                    {{~ else ~}}
                    switch (query)
                    {
                        {{~ for message in IStreamQueryMessages ~}}
                        case {{ message.RequestFullName }} m:
                        {
                            {{~ if message.ResponseIsValueType ~}}
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                            {{~ else ~}}
                            return CreateStream(m, cancellationToken);
                            {{~ end ~}}
                        }
                        {{~ end ~}}
                        default:
                        {
                            ThrowInvalidStreamMessage(message, nameof(message));
                            return default!;
                        }
                    }
                    {{~ end ~}}
                default:
                    ThrowInvalidStreamMessage(message, nameof(message));
                    return default!;
            }

            {{~ if HasAnyValueTypeStreamResponse ~}}
            static async global::System.Collections.Generic.IAsyncEnumerable<object?> AsyncWrapper<T>(global::System.Collections.Generic.IAsyncEnumerable<T> wrapped, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default) where T : struct
            {
                await foreach (var value in global::System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation(wrapped, cancellationToken))
                {
                    yield return value;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidStreamMessage(message, nameof(message));
            return default!;
            {{~ end ~}}
        }

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if notification does not implement <see cref="global::Mediator.INotification"/>.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// Drops messages
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            object notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if HasNotifications ~}}
            switch (notification)
            {
                {{~ if HasManyNotifications ~}}
                case global::Mediator.INotification n:
                {
                    var handlerObj = GetNotificationHandler(n);
                    global::System.Diagnostics.Debug.Assert(
                        handlerObj is global::{{ InternalsNamespace }}.INotificationHandlerBase,
                        $"Unexpected type: {handlerObj.GetType()}"
                    );
                    var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.INotificationHandlerBase>(handlerObj);
                    return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}n, cancellationToken);
                }
                {{~ else ~}}
                {{~ for message in NotificationMessages ~}}
                case {{ message.FullName }} n: return Publish(n, cancellationToken);
                {{~ end ~}}
                {{~ end ~}}
                default:
                {
                    ThrowInvalidNotification(notification, nameof(notification));
                    return default;
                }
            }
            {{~ else ~}}
            ThrowInvalidNotification(notification, nameof(notification));
            return default;
            {{~ end ~}}
        }
        {{~ for message in NotificationMessages ~}}

        /// <summary>
        /// Send a notification of type {{ message.FullName }}.
        {{- if message.IsClass }}
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        {{- end }}
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        {{ message.AccessibilityModifier }} global::System.Threading.Tasks.ValueTask Publish(
            {{ message.FullName }} notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{~ if message.IsClass ~}}
            ThrowIfNull(notification, nameof(notification));
            {{~ end ~}}

            {{~ if ServiceLifetimeIsSingleton || !HasManyNotifications ~}}
            return {{ ContainerMetadataField }}.{{ message.HandlerWrapperPropertyName }}.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}notification, cancellationToken);
            {{~ else ~}}
            var handlerObj = GetNotificationHandler(notification);
            global::System.Diagnostics.Debug.Assert(
                handlerObj is global::{{ InternalsNamespace }}.INotificationHandlerBase,
                $"Unexpected type: {handlerObj.GetType()}"
            );
            var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.INotificationHandlerBase>(handlerObj);
            return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}notification, cancellationToken);
            {{~ end ~}}
        }
        {{~ end ~}}

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if notification does not implement <see cref="global::Mediator.INotification"/>.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish<TNotification>(
            TNotification notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
            where TNotification : global::Mediator.INotification
        {
            {{~ if HasNotifications ~}}
            {{~ if HasManyNotifications ~}}
            var handlerObj = GetNotificationHandler(notification);
            global::System.Diagnostics.Debug.Assert(
                handlerObj is global::{{ InternalsNamespace }}.INotificationHandlerBase,
                $"Unexpected type: {handlerObj.GetType()}"
            );
            var handler = global::System.Runtime.CompilerServices.Unsafe.As<global::{{ InternalsNamespace }}.INotificationHandlerBase>(handlerObj);
            return handler.Handle({{ if !ServiceLifetimeIsSingleton; "this, "; end; }}notification, cancellationToken);
            {{~ else ~}}
            switch (notification)
            {
                {{~ for message in NotificationMessages ~}}
                case {{ message.FullName }} n: return Publish(n, cancellationToken);
                {{~ end ~}}
                default:
                {
                    ThrowInvalidNotification(notification, nameof(notification));
                    return default;
                }
            }
            {{~ end ~}}
            {{~ else ~}}
            ThrowInvalidNotification(notification, nameof(notification));
            return default;
            {{~ end ~}}
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowMissingHandler(object msg) =>
            throw new global::Mediator.MissingMessageHandlerException(msg);

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidMessage<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IMessage))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidRequest<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseRequest))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidCommand<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseCommand))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidQuery<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseQuery))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamMessage<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IStreamMessage))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamRequest<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamRequest))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamCommand<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamCommand))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamQuery<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamQuery))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowArgumentNull(string? paramName) =>
            throw new global::System.ArgumentNullException(paramName);

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidMessage<T>(T msg) =>
            throw new global::Mediator.InvalidMessageException(msg);

        private static void ThrowIfNull<T>(T? argument, string paramName)
        {
            if (argument == null)
                ThrowArgumentNull(paramName);
        }

        private static void ThrowInvalidNotification<T>(T? argument, string paramName)
        {
            if (argument == null)
                ThrowArgumentNull(paramName);
            else if (!(argument is global::Mediator.INotification))
                ThrowInvalidMessage(argument);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception> exceptions) =>
            throw new global::System.AggregateException(exceptions);

        private static void MaybeThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception>? exceptions)
        {
            if (exceptions != null)
            {
                ThrowAggregateException(exceptions);
            }
        }
    }
}
