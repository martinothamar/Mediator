// <auto-generated>
//     Generated by the Mediator source generator.
// </auto-generated>

#pragma warning disable CS8019 // Unused usings
#pragma warning disable CS8321 // Unused local function

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using System.Linq;

using SD = global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor;

namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    /// DI extensions for Mediator.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public static class MediatorDependencyInjectionExtensions
    {
        /// <summary>
        /// Adds the Mediator implementation and handlers of your application.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services)
        {
            return AddMediator(services, null);
        }

        internal sealed class Dummy { }

        /// <summary>
        /// Adds the Mediator implementation and handlers of your application, with specified options.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services, global::System.Action<global::Mediator.MediatorOptions> options)
        {
            var opts = new global::Mediator.MediatorOptions();
            if (options is not null)
                options(opts);

            var configuredViaAttribute = {{ ConfiguredViaAttribute }};
            if (opts.ServiceLifetime != {{ ServiceLifetime }} && !configuredViaAttribute)
            {
                var errMsg = "Invalid configuration detected for Mediator. ";
                errMsg += "Generated code for '{{ ServiceLifetimeShort }}' lifetime, but got '" + opts.ServiceLifetime + "' lifetime from options. ";
                errMsg += "This means that the source generator hasn't seen the 'AddMediator' method call during compilation. ";
                errMsg += "Make sure that the 'AddMediator' method is called from the project that references the Mediator.SourceGenerator package.";
                throw new global::System.Exception(errMsg);
            }

            {{~ if ServiceLifetimeIsScoped || ServiceLifetimeIsTransient ~}}
            services.Add(new SD(typeof(global::{{ MediatorNamespace }}.Mediator), typeof(global::{{ MediatorNamespace }}.Mediator), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.IMediator), sp => sp.GetRequiredService<global::{{ MediatorNamespace }}.Mediator>(), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.ISender), sp => sp.GetRequiredService<global::{{ MediatorNamespace }}.Mediator>(), {{ ServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.IPublisher), sp => sp.GetRequiredService<global::{{ MediatorNamespace }}.Mediator>(), {{ ServiceLifetime }}));
            {{ else }}
            services.Add(new SD(typeof(global::{{ MediatorNamespace }}.Mediator), typeof(global::{{ MediatorNamespace }}.Mediator), {{ SingletonServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.IMediator), sp => sp.GetRequiredService<global::{{ MediatorNamespace }}.Mediator>(), {{ SingletonServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.ISender), sp => sp.GetRequiredService<global::{{ MediatorNamespace }}.Mediator>(), {{ SingletonServiceLifetime }}));
            services.TryAdd(new SD(typeof(global::Mediator.IPublisher), sp => sp.GetRequiredService<global::{{ MediatorNamespace }}.Mediator>(), {{ SingletonServiceLifetime }}));
            {{~ end ~}}

            {{~ for message in RequestMessages ~}}
            {{ message.Handler.ServiceRegistrationBlock }}
            services.Add(new SD(
                typeof({{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}),
                sp =>
                {
                    return new {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}(
                        sp.GetRequiredService<{{ message.Handler.FullName }}>(),
                        sp.GetServices<{{ message.PipelineHandlerType }}>()
                    );
                },
                {{ message.Handler.ServiceLifetime }}
            ));
            {{~ end ~}}

            {{~ for handler in NotificationMessageHandlers ~}}
            {{ handler.ServiceRegistrationBlock }}
            {{~ end ~}}

            {{~ for message in NotificationMessages ~}}
            {{~ for registration in message.HandlerServicesRegistrationBlock ~}}
            {{ registration }}
            {{~ end ~}}
            {{~ end ~}}

            {{~ for handler in OpenGenericNotificationMessageHandlers ~}}
            {{ handler.OpenGenericServiceRegistrationBlock }}
            {{~ end ~}}

            services.AddSingleton<Dummy>();

            return services;

			{{~ if HasNotifications ~}}
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            static global::System.Func<global::System.IServiceProvider, T> GetRequiredService<T>() where T : notnull => sp => sp.GetRequiredService<T>();
			{{~ end ~}}
        }
    }
}

namespace {{ MediatorNamespace }}
{
    {{~ for wrapperType in RequestMessageHandlerWrappers ~}}
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class {{ wrapperType.ClassHandlerWrapperTypeNameWithGenericTypeArguments }}
        where TRequest : class, global::Mediator.I{{ wrapperType.MessageType }}<TResponse>
    {
        private readonly {{ wrapperType.MessageHandlerDelegateName }} _rootHandler;

        public {{ wrapperType.ClassHandlerWrapperTypeName }}(
            global::Mediator.I{{ wrapperType.MessageType }}Handler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<{{ wrapperType.PipelineHandlerTypeName }}> pipelineBehaviours
        )
        {
            var handler = ({{ wrapperType.MessageHandlerDelegateName }})concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, cancellationToken, handlerCopy);
            }

            _rootHandler = handler;
        }

        public {{ wrapperType.ReturnTypeName }} Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class {{ wrapperType.StructHandlerWrapperTypeNameWithGenericTypeArguments }}
        where TRequest : struct, global::Mediator.I{{ wrapperType.MessageType }}<TResponse>
    {
        private readonly {{ wrapperType.MessageHandlerDelegateName }} _rootHandler;

        public {{ wrapperType.StructHandlerWrapperTypeName }}(
            global::Mediator.I{{ wrapperType.MessageType }}Handler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<{{ wrapperType.PipelineHandlerTypeName }}> pipelineBehaviours
        )
        {
            var handler = ({{ wrapperType.MessageHandlerDelegateName }})concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, cancellationToken, handlerCopy);
            }

            _rootHandler = handler;
        }

        public {{ wrapperType.ReturnTypeName }} Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    {{~ end ~}}

    /// <summary>
    /// Generated code for Mediator implementation.
    /// This type is also registered as a DI service.
    /// Can be used directly for high performance scenarios.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "{{ GeneratorVersion }}")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public sealed partial class Mediator : global::Mediator.IMediator, global::Mediator.ISender, global::Mediator.IPublisher
    {
        private readonly global::System.IServiceProvider _sp;
        {{~ if ServiceLifetimeIsSingleton ~}}
        {{ if IsTestRun }}internal{{ else }}private{{ end }} FastLazyValue<DICache> _diCacheLazy;
        {{~ else ~}}
        {{ if IsTestRun }}internal{{ else }}private{{ end }} DICache _diCache;
        {{~ end ~}}

        /// <summary>
        /// The lifetime of Mediator-related service registrations in DI container.
        /// </summary>
        public static global::Microsoft.Extensions.DependencyInjection.ServiceLifetime ServiceLifetime { get; } = {{ ServiceLifetime }};

        private readonly global::System.Func<global::System.Collections.Generic.IEnumerable<object>, int> _getServicesLength;

        /// <summary>
        /// Constructor for DI, should not be used by consumer.
        /// </summary>
        public Mediator(global::System.IServiceProvider sp)
        {
            _sp = sp;
            {{~ if ServiceLifetimeIsSingleton ~}}
            _diCacheLazy = new FastLazyValue<DICache>(() => new DICache(_sp));
            {{~ else ~}}
            _diCache = new DICache(_sp);
            {{~ end ~}}

            _getServicesLength = sp.GetServices<global::Microsoft.Extensions.DependencyInjection.MediatorDependencyInjectionExtensions.Dummy>() is global::Microsoft.Extensions.DependencyInjection.MediatorDependencyInjectionExtensions.Dummy[]
                 ? (s => ((object[])s).Length) : (s => s.Count());
        }

        {{~ if ServiceLifetimeIsSingleton ~}}
        {{ if IsTestRun }}internal{{ else }}private{{ end }} struct FastLazyValue<T>
            where T : struct
        {
            {{ if IsTestRun }}internal{{ else }}private{{ end }} const long UNINIT = 0;
            {{ if IsTestRun }}internal{{ else }}private{{ end }} const long INITING = 1;
            {{ if IsTestRun }}internal{{ else }}private{{ end }} const long INITD = 2;
            {{ if IsTestRun }}internal const long INVALID = -1;{{ end }}
            {{ if IsTestRun }}internal const long CACHED = 3;{{ end }}

            {{ if IsTestRun }}internal{{ else }}private{{ end }} global::System.Func<T> _generator;
            {{ if IsTestRun }}internal{{ else }}private{{ end }} long _state;
            {{ if IsTestRun }}internal{{ else }}private{{ end }} T _value;

            public T Value
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                get
                {
                    if (_state != INITD)
                        return ValueSlow;

                    return _value;
                }
            }

            {{ if IsTestRun }}internal{{ else }}private{{ end }} T ValueSlow
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
                get
                {
                    var prevState = global::System.Threading.Interlocked.CompareExchange(ref _state, INITING, UNINIT);
                    switch (prevState)
                    {
                        case INITD:
                            // Someone has already completed init
                            return _value;
                        case INITING:
                            // Wait for someone else to complete
                            var spinWait = default(global::System.Threading.SpinWait);
                            while (global::System.Threading.Interlocked.Read(ref _state) < INITD)
                                spinWait.SpinOnce();
                            return _value;
                        case UNINIT:
                            _value = _generator();
                            global::System.Threading.Interlocked.Exchange(ref _state, INITD);
                            return _value;
                    }

                    return _value;
                }
            }

            {{~ if IsTestRun ~}}
            internal (T, long) ValueInstrumented
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                get
                {
                    if (_state != INITD)
                        return ValueSlowInstrumented;

                    return (_value, CACHED);
                }
            }

            internal (T, long) ValueSlowInstrumented
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
                get
                {
                    var prevState = global::System.Threading.Interlocked.CompareExchange(ref _state, INITING, UNINIT);
                    switch (prevState)
                    {
                        case INITD:
                            // Someone has already completed init
                            return (_value, INITD);
                        case INITING:
                            // Wait for someone else to complete
                            var spinWait = default(global::System.Threading.SpinWait);
                            while (global::System.Threading.Interlocked.Read(ref _state) < INITD)
                                spinWait.SpinOnce();
                            return (_value, INITING);
                        case UNINIT:
                            _value = _generator();
                            global::System.Threading.Interlocked.Exchange(ref _state, INITD);
                            return (_value, UNINIT);
                    }

                    return (_value, INVALID);
                }
            }
            {{~ end ~}}

            public FastLazyValue(global::System.Func<T> generator)
            {
                _generator = generator;
                _state = UNINIT;
                _value = default;
            }
        }
        {{~ end ~}}

        {{ if IsTestRun }}internal{{ else }}private{{ end }} readonly struct DICache
        {
            private readonly global::System.IServiceProvider _sp;

            {{~ if ServiceLifetimeIsSingleton ~}}
            {{~ for message in RequestMessages ~}}
            public readonly {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }} {{ message.HandlerWrapperPropertyName }};
            {{~ end ~}}
            {{~ for message in NotificationMessages ~}}
            public readonly global::Mediator.INotificationHandler<{{ message.FullName }}>[] Handlers_For_{{ message.IdentifierFullName }};
            {{~ end ~}}
            {{~ else ~}}
            {{~ for message in RequestMessages ~}}
            public {{ message.HandlerWrapperTypeNameWithGenericTypeArguments }} {{ message.HandlerWrapperPropertyName }}
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                get => _sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>();
            }
            {{~ end ~}}
            {{~ for message in NotificationMessages ~}}
            public global::System.Collections.Generic.IEnumerable<global::Mediator.INotificationHandler<{{ message.FullName }}>> Handlers_For_{{ message.IdentifierFullName }}
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                get => _sp.GetServices<global::Mediator.INotificationHandler<{{ message.FullName }}>>();
            }
            {{~ end ~}}
            {{~ end ~}}

            public DICache(global::System.IServiceProvider sp)
            {
                _sp = sp;

                {{~ if ServiceLifetimeIsSingleton ~}}
                {{~ for message in RequestMessages ~}}
                {{ message.HandlerWrapperPropertyName }} = sp.GetRequiredService<{{ message.HandlerWrapperTypeNameWithGenericTypeArguments }}>();
                {{~ end ~}}
                {{~ for message in NotificationMessages ~}}
                Handlers_For_{{ message.IdentifierFullName }} = sp.GetServices<global::Mediator.INotificationHandler<{{ message.FullName }}>>().ToArray();
                {{~ end ~}}
                {{~ end ~}}
            }
        }

        {{~ for message in RequestMessages ~}}
        /// <summary>
        /// Send a message of type {{ message.RequestFullName }}.
        {{- if message.IsClass }}
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        {{- end }}
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public {{ message.AsyncReturnType }} {{ message.AsyncMethodName }}(
            {{ message.ParameterModifier -}}{{ message.RequestFullName }} message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if message.IsClass }}
            ThrowIfNull(message, nameof(message));
            {{ end }}
            {{~ if ServiceLifetimeIsSingleton ~}}
            return _diCacheLazy.Value.{{ message.HandlerWrapperPropertyName }}.Handle({{- message.ParameterModifier -}}message, cancellationToken);
            {{~ else ~}}
            return _diCache.{{ message.HandlerWrapperPropertyName }}.Handle({{- message.ParameterModifier -}}message, cancellationToken);
            {{~ end ~}}
        }
        {{~ end ~}}

        /// <summary>
        /// Send request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if HasRequests }}
            switch (request)
            {
                {{~ for message in IRequestMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var task = Send({{- message.ParameterModifier -}}r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                }
                {{~ end ~}}
                default:
                {
                    ThrowArgumentNullOrInvalidMessage(request, nameof(request));
                    return default;
                }
            }
            {{ else }}
            ThrowInvalidMessage(request);
            return default;
            {{ end }}
        }

        /// <summary>
        /// Create stream for request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if HasStreamRequests }}
            switch (request)
            {
                {{~ for message in IStreamRequestMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var task = CreateStream({{- message.ParameterModifier -}}r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                {{~ end ~}}
                default:
                {
                    ThrowArgumentNullOrInvalidMessage(request, nameof(request));
                    return default;
                }
            }
            {{ else }}
            ThrowInvalidMessage(request);
            return default;
            {{ end }}
        }

        /// <summary>
        /// Send command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.ICommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if HasCommands }}
            switch (command)
            {
                {{~ for message in ICommandMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var task = Send({{- message.ParameterModifier -}}r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                }
                {{~ end ~}}
                default:
                {
                    ThrowArgumentNullOrInvalidMessage(command, nameof(command));
                    return default;
                }
            }
            {{ else }}
            ThrowInvalidMessage(command);
            return default;
            {{ end }}
        }

        /// <summary>
        /// Create stream for command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamCommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if HasStreamCommands }}
            switch (command)
            {
                {{~ for message in IStreamCommandMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var task = CreateStream({{- message.ParameterModifier -}}r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                {{~ end ~}}
                default:
                {
                    ThrowArgumentNullOrInvalidMessage(command, nameof(command));
                    return default;
                }
            }
            {{ else }}
            ThrowInvalidMessage(command);
            return default;
            {{ end }}
        }

        /// <summary>
        /// Send query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if HasQueries }}
            switch (query)
            {
                {{~ for message in IQueryMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var task = Send({{- message.ParameterModifier -}}r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                }
                {{~ end ~}}
                default:
                {
                    ThrowArgumentNullOrInvalidMessage(query, nameof(query));
                    return default;
                }
            }
            {{ else }}
            ThrowInvalidMessage(query);
            return default;
            {{ end }}
        }

        /// <summary>
        /// Create stream for query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if HasStreamQueries }}
            switch (query)
            {
                {{~ for message in IStreamQueryMessages ~}}
                case {{ message.RequestFullName }} r:
                {
                    var task = CreateStream({{- message.ParameterModifier -}}r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<{{ message.AsyncReturnType }}, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                {{~ end ~}}
                default:
                {
                    ThrowArgumentNullOrInvalidMessage(query, nameof(query));
                    return default;
                }
            }
            {{ else }}
            ThrowInvalidMessage(query);
            return default;
            {{ end }}
        }

        /// <summary>
        /// Send message.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public{{ if HasAnyRequest; " async "; else; " "; end; }}global::System.Threading.Tasks.ValueTask<object> Send(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if HasAnyRequest }}
            switch (message)
            {
                {{~ for message in IMessages ~}}
                case {{ message.RequestFullName }} m: return await Send({{- message.ParameterModifier -}}m, cancellationToken);
                {{~ end ~}}
                default:
                {
                    ThrowArgumentNullOrInvalidMessage(message as global::Mediator.IMessage, nameof(message));
                    return default;
                }
            }
            {{ else }}
            ThrowInvalidMessage(message as global::Mediator.IMessage);
            return default;
            {{ end }}
        }

        /// <summary>
        /// Create stream.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<object> CreateStream(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if HasAnyStreamRequest }}
            switch (message)
            {
                {{~ for message in IStreamMessages ~}}
                case {{ message.RequestFullName }} m:
				{
					{{- if message.ResponseIsValueType }}
                    var value = CreateStream({{- message.ParameterModifier -}}m, cancellationToken);
					return AsyncWrapper(value);
					{{ else }}
                    return CreateStream({{- message.ParameterModifier -}}m, cancellationToken);
                    {{ end }}
                }
                {{~ end ~}}
                default:
                {
                    ThrowArgumentNullOrInvalidMessage(message as global::Mediator.IStreamMessage, nameof(message));
                    return default;
                }
            }

            {{- if HasAnyValueTypeStreamResponse }}
            static async global::System.Collections.Generic.IAsyncEnumerable<object> AsyncWrapper<T>(global::System.Collections.Generic.IAsyncEnumerable<T> wrapped, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default) where T : struct
            {
                await foreach (var value in global::System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation(wrapped, cancellationToken))
                {
                    yield return value;
                }
            }
            {{ end }}

            {{ else }}
            ThrowInvalidMessage(message as global::Mediator.IStreamMessage);
            return default;
            {{ end }}
        }

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            object notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if HasNotifications }}
            switch (notification)
            {
                {{~ for message in NotificationMessages ~}}
                case {{ message.FullName }} n: return Publish(n, cancellationToken);
                {{~ end ~}}
                default:
                {
                    ThrowIfNull(notification, nameof(notification));
                    return default;
                }
            }
            {{ else }}
            return default;
            {{ end }}
        }

        {{~ for message in NotificationMessages ~}}
        /// <summary>
        /// Send a notification of type {{ message.FullName }}.
        {{- if message.IsClass }}
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        {{- end }}
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            {{ message.ParameterModifier -}}{{ message.FullName }} notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            {{- if message.IsClass }}
            ThrowIfNull(notification, nameof(notification));
            {{ end }}

            {{~ if ServiceLifetimeIsSingleton ~}}
            var handlers = _diCacheLazy.Value.Handlers_For_{{ message.IdentifierFullName }};
            {{~ else ~}}
            var handlers = _diCache.Handlers_For_{{ message.IdentifierFullName }};
            {{~ end ~}}

            {{~ if ServiceLifetimeIsSingleton ~}}
            if (handlers.Length == 0)
            {
                return default;
            }
            else if (handlers.Length == 1)
            {
                return handlers[0].Handle(notification, cancellationToken);
            }

            return Publish(notification, handlers, cancellationToken);

            async global::System.Threading.Tasks.ValueTask Publish({{ message.FullName }} notification, global::Mediator.INotificationHandler<{{ message.FullName }}>[] handlers, global::System.Threading.CancellationToken cancellationToken)
            {
                // We don't allocate the list if no task throws
                global::System.Collections.Generic.List<global::System.Exception> exceptions = null;

                for (int i = 0; i < handlers.Length; i++)
                {
                    try
                    {
                        await handlers[i].Handle(notification, cancellationToken).ConfigureAwait(false);
                    }
                    catch (global::System.Exception ex)
                    {
                        exceptions ??= new global::System.Collections.Generic.List<global::System.Exception>();
                        exceptions.Add(ex);
                    }
                }

                MaybeThrowAggregateException(exceptions);
            }
            {{~ else ~}}
            if (handlers is global::Mediator.INotificationHandler<{{ message.FullName }}>[] handlersArray)
            {
                if (handlersArray.Length == 0)
                {
                    return default;
                }
                else if (handlersArray.Length == 1)
                {
                    return handlersArray[0].Handle(notification, cancellationToken);
                }

                return PublishArr(notification, handlersArray, cancellationToken);
            }
            else
            {
                int count = 0;
                if (handlers == null || (count = _getServicesLength(handlers)) == 0)
                {
                    return default;
                }
                else if (count == 1)
                {
                    return handlers.First().Handle(notification, cancellationToken);
                }

                return Publish(notification, handlers, cancellationToken);
            }

            async global::System.Threading.Tasks.ValueTask Publish({{ message.FullName }} notification, global::System.Collections.Generic.IEnumerable<global::Mediator.INotificationHandler<{{ message.FullName }}>> handlers, global::System.Threading.CancellationToken cancellationToken)
            {
                // We don't allocate the list if no task throws
                global::System.Collections.Generic.List<global::System.Exception> exceptions = null;

                foreach (var handler in handlers)
                {
                    try
                    {
                        await handler.Handle(notification, cancellationToken).ConfigureAwait(false);
                    }
                    catch (global::System.Exception ex)
                    {
                        exceptions ??= new global::System.Collections.Generic.List<global::System.Exception>();
                        exceptions.Add(ex);
                    }
                }

                MaybeThrowAggregateException(exceptions);
            }
            async global::System.Threading.Tasks.ValueTask PublishArr({{ message.FullName }} notification, global::Mediator.INotificationHandler<{{ message.FullName }}>[] handlers, global::System.Threading.CancellationToken cancellationToken)
            {
                // We don't allocate the list if no task throws
                global::System.Collections.Generic.List<global::System.Exception> exceptions = null;

                for (int i = 0; i < handlers.Length; i++)
                {
                    try
                    {
                        await handlers[i].Handle(notification, cancellationToken).ConfigureAwait(false);
                    }
                    catch (global::System.Exception ex)
                    {
                        exceptions ??= new global::System.Collections.Generic.List<global::System.Exception>();
                        exceptions.Add(ex);
                    }
                }

                MaybeThrowAggregateException(exceptions);
            }
            {{~ end ~}}
        }
        {{~ end ~}}

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish<TNotification>(
            TNotification notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
            where TNotification : global::Mediator.INotification
        {
            {{- if HasNotifications }}
            switch (notification)
            {
                {{~ for message in NotificationMessages ~}}
                case {{ message.FullName }} n: return Publish(n, cancellationToken);
                {{~ end ~}}
                default:
                {
                    ThrowIfNull(notification, nameof(notification));
                    return default;
                }
            }
            {{ else }}
            return default;
            {{ end }}
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidMessage(object msg) =>
            throw new global::Mediator.MissingMessageHandlerException(msg);

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowArgumentNull(string paramName) =>
            throw new global::System.ArgumentNullException(paramName);

        private static void ThrowIfNull<T>(T argument, string paramName)
        {
            if (argument is null)
            {
                ThrowArgumentNull(paramName);
            }
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowArgumentNullOrInvalidMessage(object msg, string paramName)
        {
            if (msg is null)
            {
                ThrowArgumentNull(paramName);
            }
            else
            {
                ThrowInvalidMessage(msg);
            }
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception> exceptions) =>
            throw new global::System.AggregateException(exceptions);

        private static void MaybeThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception> exceptions)
        {
            if (exceptions is not null)
            {
                ThrowAggregateException(exceptions);
            }
        }
    }
}
