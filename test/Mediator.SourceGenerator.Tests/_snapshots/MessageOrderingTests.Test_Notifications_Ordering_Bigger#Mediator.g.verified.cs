//HintName: Mediator.g.cs
// <auto-generated>
//     Generated by the Mediator source generator.
// </auto-generated>

#pragma warning disable CS8019 // Unused usings
#pragma warning disable CS8321 // Unused local function
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously

#nullable enable

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using System.Linq;

using SD = global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor;

namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    /// DI extensions for Mediator.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public static class MediatorDependencyInjectionExtensions
    {
        /// <summary>
        /// Adds the Mediator implementation and handlers of your application.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services)
        {
            return AddMediator(services, null);
        }

        /// <summary>
        /// Adds the Mediator implementation and handlers of your application, with specified options.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services, global::System.Action<global::Mediator.MediatorOptions>? options)
        {
            var opts = new global::Mediator.MediatorOptions();
            if (options != null)
                options(opts);

            var configuredViaAttribute = false;
            if (opts.ServiceLifetime != global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton && !configuredViaAttribute)
            {
                var errMsg = "Invalid configuration detected for Mediator. ";
                errMsg += "Generated code for 'Singleton' lifetime, but got '" + opts.ServiceLifetime + "' lifetime from options. ";
                errMsg += "This means that the source generator hasn't seen the 'AddMediator' method call during compilation. ";
                errMsg += "Make sure that the 'AddMediator' method is called from the project that references the Mediator.SourceGenerator package.";
                throw new global::System.Exception(errMsg);
            }


            services.Add(new SD(typeof(global::Mediator.Mediator), typeof(global::Mediator.Mediator), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Mediator.IMediator), sp => sp.GetRequiredService<global::Mediator.Mediator>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Mediator.ISender), sp => sp.GetRequiredService<global::Mediator.Mediator>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Mediator.IPublisher), sp => sp.GetRequiredService<global::Mediator.Mediator>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));






            services.Add(new SD(typeof(global::Mediator.ForeachAwaitPublisher), typeof(global::Mediator.ForeachAwaitPublisher), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Mediator.INotificationPublisher), sp => sp.GetRequiredService<global::Mediator.ForeachAwaitPublisher>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            services.Add(new SD(typeof(global::Mediator.IContainerProbe), typeof(global::Mediator.ContainerProbe0), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.IContainerProbe), typeof(global::Mediator.ContainerProbe1), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            services.Add(new SD(typeof(global::Mediator.ContainerMetadata), typeof(global::Mediator.ContainerMetadata), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            return services;

            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            static global::System.Func<global::System.IServiceProvider, T> GetRequiredService<T>() where T : notnull => sp => sp.GetRequiredService<T>();
        }
    }
}

namespace Mediator
{
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class RequestClassHandlerWrapper<TRequest, TResponse>
        where TRequest : class, global::Mediator.IRequest<TResponse>
    {
        private readonly global::Mediator.MessageHandlerDelegate<TRequest, TResponse> _rootHandler;

        public RequestClassHandlerWrapper(
            global::Mediator.IRequestHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class RequestStructHandlerWrapper<TRequest, TResponse>
        where TRequest : struct, global::Mediator.IRequest<TResponse>
    {
        private readonly global::Mediator.MessageHandlerDelegate<TRequest, TResponse> _rootHandler;

        public RequestStructHandlerWrapper(
            global::Mediator.IRequestHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamRequestClassHandlerWrapper<TRequest, TResponse>
        where TRequest : class, global::Mediator.IStreamRequest<TResponse>
    {
        private readonly global::Mediator.StreamHandlerDelegate<TRequest, TResponse> _rootHandler;

        public StreamRequestClassHandlerWrapper(
            global::Mediator.IStreamRequestHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamRequestStructHandlerWrapper<TRequest, TResponse>
        where TRequest : struct, global::Mediator.IStreamRequest<TResponse>
    {
        private readonly global::Mediator.StreamHandlerDelegate<TRequest, TResponse> _rootHandler;

        public StreamRequestStructHandlerWrapper(
            global::Mediator.IStreamRequestHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class CommandClassHandlerWrapper<TRequest, TResponse>
        where TRequest : class, global::Mediator.ICommand<TResponse>
    {
        private readonly global::Mediator.MessageHandlerDelegate<TRequest, TResponse> _rootHandler;

        public CommandClassHandlerWrapper(
            global::Mediator.ICommandHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class CommandStructHandlerWrapper<TRequest, TResponse>
        where TRequest : struct, global::Mediator.ICommand<TResponse>
    {
        private readonly global::Mediator.MessageHandlerDelegate<TRequest, TResponse> _rootHandler;

        public CommandStructHandlerWrapper(
            global::Mediator.ICommandHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamCommandClassHandlerWrapper<TRequest, TResponse>
        where TRequest : class, global::Mediator.IStreamCommand<TResponse>
    {
        private readonly global::Mediator.StreamHandlerDelegate<TRequest, TResponse> _rootHandler;

        public StreamCommandClassHandlerWrapper(
            global::Mediator.IStreamCommandHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamCommandStructHandlerWrapper<TRequest, TResponse>
        where TRequest : struct, global::Mediator.IStreamCommand<TResponse>
    {
        private readonly global::Mediator.StreamHandlerDelegate<TRequest, TResponse> _rootHandler;

        public StreamCommandStructHandlerWrapper(
            global::Mediator.IStreamCommandHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class QueryClassHandlerWrapper<TRequest, TResponse>
        where TRequest : class, global::Mediator.IQuery<TResponse>
    {
        private readonly global::Mediator.MessageHandlerDelegate<TRequest, TResponse> _rootHandler;

        public QueryClassHandlerWrapper(
            global::Mediator.IQueryHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class QueryStructHandlerWrapper<TRequest, TResponse>
        where TRequest : struct, global::Mediator.IQuery<TResponse>
    {
        private readonly global::Mediator.MessageHandlerDelegate<TRequest, TResponse> _rootHandler;

        public QueryStructHandlerWrapper(
            global::Mediator.IQueryHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamQueryClassHandlerWrapper<TRequest, TResponse>
        where TRequest : class, global::Mediator.IStreamQuery<TResponse>
    {
        private readonly global::Mediator.StreamHandlerDelegate<TRequest, TResponse> _rootHandler;

        public StreamQueryClassHandlerWrapper(
            global::Mediator.IStreamQueryHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamQueryStructHandlerWrapper<TRequest, TResponse>
        where TRequest : struct, global::Mediator.IStreamQuery<TResponse>
    {
        private readonly global::Mediator.StreamHandlerDelegate<TRequest, TResponse> _rootHandler;

        public StreamQueryStructHandlerWrapper(
            global::Mediator.IStreamQueryHandler<TRequest, TResponse> concreteHandler,
            global::System.Collections.Generic.IEnumerable<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>> pipelineBehaviours
        )
        {
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            foreach (var pipeline in pipelineBehaviours.Reverse())
            {
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(TRequest request, global::System.Threading.CancellationToken cancellationToken) =>
            _rootHandler(request, cancellationToken);
    }

    internal interface IContainerProbe { }
    internal sealed class ContainerProbe0 : IContainerProbe { }
    internal sealed class ContainerProbe1 : IContainerProbe { }

    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class ContainerMetadata
    {
        public readonly bool ServicesUnderlyingTypeIsArray;

        public ContainerMetadata(global::System.IServiceProvider sp)
        {
            ServicesUnderlyingTypeIsArray = sp.GetServices<global::Mediator.IContainerProbe>() is global::Mediator.IContainerProbe[];
        }
    }

    /// <summary>
    /// Generated code for Mediator implementation.
    /// This type is also registered as a DI service.
    /// Can be used directly for high performance scenarios.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public sealed partial class Mediator : global::Mediator.IMediator, global::Mediator.ISender, global::Mediator.IPublisher
    {
        private readonly global::System.IServiceProvider _sp;
        private readonly global::Mediator.ContainerMetadata _containerMetadata;

        private FastLazyValue<DICache> _diCacheLazy;

        /// <summary>
        /// The lifetime of Mediator-related service registrations in DI container.
        /// </summary>
        public const global::Microsoft.Extensions.DependencyInjection.ServiceLifetime ServiceLifetime = global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton;

        /// <summary>
        /// The name of the notification publisher service that was configured.
        /// </summary>
        public const string NotificationPublisherName = "ForeachAwaitPublisher";

        /// <summary>
        /// The total number of Mediator messages that were discovered.
        /// </summary>
        public const int TotalMessages = 20;

        /// <summary>
        /// Constructor for DI, should not be used by consumer.
        /// </summary>
        public Mediator(global::System.IServiceProvider sp)
        {
            _sp = sp;
            _containerMetadata = sp.GetRequiredService<global::Mediator.ContainerMetadata>();
            _diCacheLazy = new FastLazyValue<DICache>(() => new DICache(_sp, _containerMetadata));
        }

        private struct FastLazyValue<T>
            where T : struct
        {
            private const long UNINIT = 0;
            private const long INITING = 1;
            private const long INITD = 2;
            
            

            private global::System.Func<T> _generator;
            private long _state;
            private T _value;

            public T Value
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                get
                {
                    if (_state != INITD)
                        return ValueSlow;

                    return _value;
                }
            }

            private T ValueSlow
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
                get
                {
                    var prevState = global::System.Threading.Interlocked.CompareExchange(ref _state, INITING, UNINIT);
                    switch (prevState)
                    {
                        case INITD:
                            // Someone has already completed init
                            return _value;
                        case INITING:
                            // Wait for someone else to complete
                            var spinWait = default(global::System.Threading.SpinWait);
                            while (global::System.Threading.Interlocked.Read(ref _state) < INITD)
                                spinWait.SpinOnce();
                            return _value;
                        case UNINIT:
                            _value = _generator();
                            global::System.Threading.Interlocked.Exchange(ref _state, INITD);
                            return _value;
                    }

                    return _value;
                }
            }


            public FastLazyValue(global::System.Func<T> generator)
            {
                _generator = generator;
                _state = UNINIT;
                _value = default;
            }
        }

        private readonly struct DICache
        {
            private readonly global::System.IServiceProvider _sp;

            public readonly global::Mediator.INotificationHandler<global::TestCode.Round2SucceededActually>[] Handlers_For_TestCode_Round2SucceededActually;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Sound2SucceededActually>[] Handlers_For_TestCode_Sound2SucceededActually;
            public readonly global::Mediator.INotificationHandler<global::TestCode.RoundSucceededActually>[] Handlers_For_TestCode_RoundSucceededActually;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Sound20SucceededActually>[] Handlers_For_TestCode_Sound20SucceededActually;
            public readonly global::Mediator.INotificationHandler<global::TestCode.RoundResulted>[] Handlers_For_TestCode_RoundResulted;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Round2Created>[] Handlers_For_TestCode_Round2Created;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Round2Resulted>[] Handlers_For_TestCode_Round2Resulted;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Round2Succeeded>[] Handlers_For_TestCode_Round2Succeeded;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Sound20Succeeded>[] Handlers_For_TestCode_Sound20Succeeded;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Sound2Created>[] Handlers_For_TestCode_Sound2Created;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Sound2Resulted>[] Handlers_For_TestCode_Sound2Resulted;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Sound2Succeeded>[] Handlers_For_TestCode_Sound2Succeeded;
            public readonly global::Mediator.INotificationHandler<global::TestCode.RoundCreated>[] Handlers_For_TestCode_RoundCreated;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Sound20Created>[] Handlers_For_TestCode_Sound20Created;
            public readonly global::Mediator.INotificationHandler<global::TestCode.Sound20Resulted>[] Handlers_For_TestCode_Sound20Resulted;
            public readonly global::Mediator.INotificationHandler<global::TestCode.RoundSucceeded>[] Handlers_For_TestCode_RoundSucceeded;
            public readonly global::Mediator.INotificationHandler<global::TestCode.DomainEvent2>[] Handlers_For_TestCode_DomainEvent2;
            public readonly global::Mediator.INotificationHandler<global::TestCode.DomainEvent10>[] Handlers_For_TestCode_DomainEvent10;
            public readonly global::Mediator.INotificationHandler<global::TestCode.DomainEvent11>[] Handlers_For_TestCode_DomainEvent11;
            public readonly global::Mediator.INotificationHandler<global::TestCode.DomainEvent>[] Handlers_For_TestCode_DomainEvent;

            public readonly global::Mediator.ForeachAwaitPublisher InternalNotificationPublisherImpl;

            public DICache(global::System.IServiceProvider sp, global::Mediator.ContainerMetadata containerMetadata)
            {
                _sp = sp;



                var handlers_For_TestCode_Round2SucceededActually = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Round2SucceededActually>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Round2SucceededActually is global::Mediator.INotificationHandler<global::TestCode.Round2SucceededActually>[]);
                    Handlers_For_TestCode_Round2SucceededActually = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Round2SucceededActually>[]>(
                        handlers_For_TestCode_Round2SucceededActually
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Round2SucceededActually is not global::Mediator.INotificationHandler<global::TestCode.Round2SucceededActually>[]);
                    Handlers_For_TestCode_Round2SucceededActually = handlers_For_TestCode_Round2SucceededActually.ToArray();
                }
                var handlers_For_TestCode_Sound2SucceededActually = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Sound2SucceededActually>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound2SucceededActually is global::Mediator.INotificationHandler<global::TestCode.Sound2SucceededActually>[]);
                    Handlers_For_TestCode_Sound2SucceededActually = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Sound2SucceededActually>[]>(
                        handlers_For_TestCode_Sound2SucceededActually
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound2SucceededActually is not global::Mediator.INotificationHandler<global::TestCode.Sound2SucceededActually>[]);
                    Handlers_For_TestCode_Sound2SucceededActually = handlers_For_TestCode_Sound2SucceededActually.ToArray();
                }
                var handlers_For_TestCode_RoundSucceededActually = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.RoundSucceededActually>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_RoundSucceededActually is global::Mediator.INotificationHandler<global::TestCode.RoundSucceededActually>[]);
                    Handlers_For_TestCode_RoundSucceededActually = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.RoundSucceededActually>[]>(
                        handlers_For_TestCode_RoundSucceededActually
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_RoundSucceededActually is not global::Mediator.INotificationHandler<global::TestCode.RoundSucceededActually>[]);
                    Handlers_For_TestCode_RoundSucceededActually = handlers_For_TestCode_RoundSucceededActually.ToArray();
                }
                var handlers_For_TestCode_Sound20SucceededActually = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Sound20SucceededActually>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound20SucceededActually is global::Mediator.INotificationHandler<global::TestCode.Sound20SucceededActually>[]);
                    Handlers_For_TestCode_Sound20SucceededActually = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Sound20SucceededActually>[]>(
                        handlers_For_TestCode_Sound20SucceededActually
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound20SucceededActually is not global::Mediator.INotificationHandler<global::TestCode.Sound20SucceededActually>[]);
                    Handlers_For_TestCode_Sound20SucceededActually = handlers_For_TestCode_Sound20SucceededActually.ToArray();
                }
                var handlers_For_TestCode_RoundResulted = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.RoundResulted>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_RoundResulted is global::Mediator.INotificationHandler<global::TestCode.RoundResulted>[]);
                    Handlers_For_TestCode_RoundResulted = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.RoundResulted>[]>(
                        handlers_For_TestCode_RoundResulted
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_RoundResulted is not global::Mediator.INotificationHandler<global::TestCode.RoundResulted>[]);
                    Handlers_For_TestCode_RoundResulted = handlers_For_TestCode_RoundResulted.ToArray();
                }
                var handlers_For_TestCode_Round2Created = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Round2Created>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Round2Created is global::Mediator.INotificationHandler<global::TestCode.Round2Created>[]);
                    Handlers_For_TestCode_Round2Created = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Round2Created>[]>(
                        handlers_For_TestCode_Round2Created
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Round2Created is not global::Mediator.INotificationHandler<global::TestCode.Round2Created>[]);
                    Handlers_For_TestCode_Round2Created = handlers_For_TestCode_Round2Created.ToArray();
                }
                var handlers_For_TestCode_Round2Resulted = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Round2Resulted>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Round2Resulted is global::Mediator.INotificationHandler<global::TestCode.Round2Resulted>[]);
                    Handlers_For_TestCode_Round2Resulted = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Round2Resulted>[]>(
                        handlers_For_TestCode_Round2Resulted
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Round2Resulted is not global::Mediator.INotificationHandler<global::TestCode.Round2Resulted>[]);
                    Handlers_For_TestCode_Round2Resulted = handlers_For_TestCode_Round2Resulted.ToArray();
                }
                var handlers_For_TestCode_Round2Succeeded = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Round2Succeeded>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Round2Succeeded is global::Mediator.INotificationHandler<global::TestCode.Round2Succeeded>[]);
                    Handlers_For_TestCode_Round2Succeeded = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Round2Succeeded>[]>(
                        handlers_For_TestCode_Round2Succeeded
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Round2Succeeded is not global::Mediator.INotificationHandler<global::TestCode.Round2Succeeded>[]);
                    Handlers_For_TestCode_Round2Succeeded = handlers_For_TestCode_Round2Succeeded.ToArray();
                }
                var handlers_For_TestCode_Sound20Succeeded = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Sound20Succeeded>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound20Succeeded is global::Mediator.INotificationHandler<global::TestCode.Sound20Succeeded>[]);
                    Handlers_For_TestCode_Sound20Succeeded = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Sound20Succeeded>[]>(
                        handlers_For_TestCode_Sound20Succeeded
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound20Succeeded is not global::Mediator.INotificationHandler<global::TestCode.Sound20Succeeded>[]);
                    Handlers_For_TestCode_Sound20Succeeded = handlers_For_TestCode_Sound20Succeeded.ToArray();
                }
                var handlers_For_TestCode_Sound2Created = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Sound2Created>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound2Created is global::Mediator.INotificationHandler<global::TestCode.Sound2Created>[]);
                    Handlers_For_TestCode_Sound2Created = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Sound2Created>[]>(
                        handlers_For_TestCode_Sound2Created
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound2Created is not global::Mediator.INotificationHandler<global::TestCode.Sound2Created>[]);
                    Handlers_For_TestCode_Sound2Created = handlers_For_TestCode_Sound2Created.ToArray();
                }
                var handlers_For_TestCode_Sound2Resulted = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Sound2Resulted>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound2Resulted is global::Mediator.INotificationHandler<global::TestCode.Sound2Resulted>[]);
                    Handlers_For_TestCode_Sound2Resulted = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Sound2Resulted>[]>(
                        handlers_For_TestCode_Sound2Resulted
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound2Resulted is not global::Mediator.INotificationHandler<global::TestCode.Sound2Resulted>[]);
                    Handlers_For_TestCode_Sound2Resulted = handlers_For_TestCode_Sound2Resulted.ToArray();
                }
                var handlers_For_TestCode_Sound2Succeeded = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Sound2Succeeded>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound2Succeeded is global::Mediator.INotificationHandler<global::TestCode.Sound2Succeeded>[]);
                    Handlers_For_TestCode_Sound2Succeeded = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Sound2Succeeded>[]>(
                        handlers_For_TestCode_Sound2Succeeded
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound2Succeeded is not global::Mediator.INotificationHandler<global::TestCode.Sound2Succeeded>[]);
                    Handlers_For_TestCode_Sound2Succeeded = handlers_For_TestCode_Sound2Succeeded.ToArray();
                }
                var handlers_For_TestCode_RoundCreated = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.RoundCreated>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_RoundCreated is global::Mediator.INotificationHandler<global::TestCode.RoundCreated>[]);
                    Handlers_For_TestCode_RoundCreated = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.RoundCreated>[]>(
                        handlers_For_TestCode_RoundCreated
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_RoundCreated is not global::Mediator.INotificationHandler<global::TestCode.RoundCreated>[]);
                    Handlers_For_TestCode_RoundCreated = handlers_For_TestCode_RoundCreated.ToArray();
                }
                var handlers_For_TestCode_Sound20Created = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Sound20Created>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound20Created is global::Mediator.INotificationHandler<global::TestCode.Sound20Created>[]);
                    Handlers_For_TestCode_Sound20Created = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Sound20Created>[]>(
                        handlers_For_TestCode_Sound20Created
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound20Created is not global::Mediator.INotificationHandler<global::TestCode.Sound20Created>[]);
                    Handlers_For_TestCode_Sound20Created = handlers_For_TestCode_Sound20Created.ToArray();
                }
                var handlers_For_TestCode_Sound20Resulted = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.Sound20Resulted>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound20Resulted is global::Mediator.INotificationHandler<global::TestCode.Sound20Resulted>[]);
                    Handlers_For_TestCode_Sound20Resulted = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.Sound20Resulted>[]>(
                        handlers_For_TestCode_Sound20Resulted
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_Sound20Resulted is not global::Mediator.INotificationHandler<global::TestCode.Sound20Resulted>[]);
                    Handlers_For_TestCode_Sound20Resulted = handlers_For_TestCode_Sound20Resulted.ToArray();
                }
                var handlers_For_TestCode_RoundSucceeded = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.RoundSucceeded>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_RoundSucceeded is global::Mediator.INotificationHandler<global::TestCode.RoundSucceeded>[]);
                    Handlers_For_TestCode_RoundSucceeded = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.RoundSucceeded>[]>(
                        handlers_For_TestCode_RoundSucceeded
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_RoundSucceeded is not global::Mediator.INotificationHandler<global::TestCode.RoundSucceeded>[]);
                    Handlers_For_TestCode_RoundSucceeded = handlers_For_TestCode_RoundSucceeded.ToArray();
                }
                var handlers_For_TestCode_DomainEvent2 = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.DomainEvent2>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_DomainEvent2 is global::Mediator.INotificationHandler<global::TestCode.DomainEvent2>[]);
                    Handlers_For_TestCode_DomainEvent2 = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.DomainEvent2>[]>(
                        handlers_For_TestCode_DomainEvent2
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_DomainEvent2 is not global::Mediator.INotificationHandler<global::TestCode.DomainEvent2>[]);
                    Handlers_For_TestCode_DomainEvent2 = handlers_For_TestCode_DomainEvent2.ToArray();
                }
                var handlers_For_TestCode_DomainEvent10 = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.DomainEvent10>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_DomainEvent10 is global::Mediator.INotificationHandler<global::TestCode.DomainEvent10>[]);
                    Handlers_For_TestCode_DomainEvent10 = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.DomainEvent10>[]>(
                        handlers_For_TestCode_DomainEvent10
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_DomainEvent10 is not global::Mediator.INotificationHandler<global::TestCode.DomainEvent10>[]);
                    Handlers_For_TestCode_DomainEvent10 = handlers_For_TestCode_DomainEvent10.ToArray();
                }
                var handlers_For_TestCode_DomainEvent11 = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.DomainEvent11>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_DomainEvent11 is global::Mediator.INotificationHandler<global::TestCode.DomainEvent11>[]);
                    Handlers_For_TestCode_DomainEvent11 = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.DomainEvent11>[]>(
                        handlers_For_TestCode_DomainEvent11
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_DomainEvent11 is not global::Mediator.INotificationHandler<global::TestCode.DomainEvent11>[]);
                    Handlers_For_TestCode_DomainEvent11 = handlers_For_TestCode_DomainEvent11.ToArray();
                }
                var handlers_For_TestCode_DomainEvent = sp.GetServices<global::Mediator.INotificationHandler<global::TestCode.DomainEvent>>();
                if (containerMetadata.ServicesUnderlyingTypeIsArray)
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_DomainEvent is global::Mediator.INotificationHandler<global::TestCode.DomainEvent>[]);
                    Handlers_For_TestCode_DomainEvent = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<global::TestCode.DomainEvent>[]>(
                        handlers_For_TestCode_DomainEvent
                    );
                }
                else
                {
                    global::System.Diagnostics.Debug.Assert(handlers_For_TestCode_DomainEvent is not global::Mediator.INotificationHandler<global::TestCode.DomainEvent>[]);
                    Handlers_For_TestCode_DomainEvent = handlers_For_TestCode_DomainEvent.ToArray();
                }


                InternalNotificationPublisherImpl = sp.GetRequiredService<global::Mediator.ForeachAwaitPublisher>();
            }
        }


        /// <summary>
        /// Send request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if request does not implement <see cref="global::Mediator.IRequest{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidRequest(request, nameof(request));
            return default;
        }

        /// <summary>
        /// Send request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidRequest(request, nameof(request));
            return default;
        }

        /// <summary>
        /// Create stream for request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if request does not implement <see cref="global::Mediator.IStreamRequest{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidStreamRequest(request, nameof(request));
            return default;
        }

        /// <summary>
        /// Send command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if command does not implement <see cref="global::Mediator.ICommand{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.ICommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidCommand(command, nameof(command));
            return default;
        }

        /// <summary>
        /// Send command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.ICommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidCommand(command, nameof(command));
            return default;
        }

        /// <summary>
        /// Create stream for command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if command does not implement <see cref="global::Mediator.IStreamCommand{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamCommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidStreamCommand(command, nameof(command));
            return default;
        }

        /// <summary>
        /// Send query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if query does not implement <see cref="global::Mediator.IQuery{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidQuery(query, nameof(query));
            return default;
        }

        /// <summary>
        /// Send query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.IQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidQuery(query, nameof(query));
            return default;
        }

        /// <summary>
        /// Create stream for query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if query does not implement <see cref="global::Mediator.IStreamQuery{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidStreamQuery(query, nameof(query));
            return default;
        }

        /// <summary>
        /// Send message.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if message does not implement <see cref="global::Mediator.IMessage"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<object?> Send(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidMessage(message, nameof(message));
            return default;
        }

        /// <summary>
        /// Create stream.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if message does not implement <see cref="global::Mediator.IStreamMessage"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<object?> CreateStream(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidStreamMessage(message, nameof(message));
            return default;
        }

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if notification does not implement <see cref="global::Mediator.INotification"/>.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// Drops messages
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            object notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (notification)
            {
                case global::TestCode.Round2SucceededActually n: return Publish(n, cancellationToken);
                case global::TestCode.Sound2SucceededActually n: return Publish(n, cancellationToken);
                case global::TestCode.RoundSucceededActually n: return Publish(n, cancellationToken);
                case global::TestCode.Sound20SucceededActually n: return Publish(n, cancellationToken);
                case global::TestCode.RoundResulted n: return Publish(n, cancellationToken);
                case global::TestCode.Round2Created n: return Publish(n, cancellationToken);
                case global::TestCode.Round2Resulted n: return Publish(n, cancellationToken);
                case global::TestCode.Round2Succeeded n: return Publish(n, cancellationToken);
                case global::TestCode.Sound20Succeeded n: return Publish(n, cancellationToken);
                case global::TestCode.Sound2Created n: return Publish(n, cancellationToken);
                case global::TestCode.Sound2Resulted n: return Publish(n, cancellationToken);
                case global::TestCode.Sound2Succeeded n: return Publish(n, cancellationToken);
                case global::TestCode.RoundCreated n: return Publish(n, cancellationToken);
                case global::TestCode.Sound20Created n: return Publish(n, cancellationToken);
                case global::TestCode.Sound20Resulted n: return Publish(n, cancellationToken);
                case global::TestCode.RoundSucceeded n: return Publish(n, cancellationToken);
                case global::TestCode.DomainEvent2 n: return Publish(n, cancellationToken);
                case global::TestCode.DomainEvent10 n: return Publish(n, cancellationToken);
                case global::TestCode.DomainEvent11 n: return Publish(n, cancellationToken);
                case global::TestCode.DomainEvent n: return Publish(n, cancellationToken);
                default:
                {
                    ThrowInvalidNotification(notification, nameof(notification));
                    return default;
                }
            }
        }

        /// <summary>
        /// Send a notification of type global::TestCode.Round2SucceededActually.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Round2SucceededActually notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Round2SucceededActually;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Round2SucceededActually>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Sound2SucceededActually.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Sound2SucceededActually notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Sound2SucceededActually;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Sound2SucceededActually>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.RoundSucceededActually.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.RoundSucceededActually notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_RoundSucceededActually;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.RoundSucceededActually>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Sound20SucceededActually.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Sound20SucceededActually notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Sound20SucceededActually;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Sound20SucceededActually>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.RoundResulted.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.RoundResulted notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_RoundResulted;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.RoundResulted>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Round2Created.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Round2Created notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Round2Created;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Round2Created>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Round2Resulted.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Round2Resulted notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Round2Resulted;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Round2Resulted>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Round2Succeeded.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Round2Succeeded notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Round2Succeeded;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Round2Succeeded>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Sound20Succeeded.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Sound20Succeeded notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Sound20Succeeded;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Sound20Succeeded>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Sound2Created.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Sound2Created notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Sound2Created;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Sound2Created>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Sound2Resulted.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Sound2Resulted notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Sound2Resulted;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Sound2Resulted>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Sound2Succeeded.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Sound2Succeeded notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Sound2Succeeded;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Sound2Succeeded>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.RoundCreated.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.RoundCreated notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_RoundCreated;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.RoundCreated>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Sound20Created.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Sound20Created notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Sound20Created;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Sound20Created>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.Sound20Resulted.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.Sound20Resulted notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_Sound20Resulted;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.Sound20Resulted>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.RoundSucceeded.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.RoundSucceeded notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_RoundSucceeded;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.RoundSucceeded>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.DomainEvent2.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.DomainEvent2 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_DomainEvent2;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.DomainEvent2>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.DomainEvent10.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.DomainEvent10 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_DomainEvent10;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.DomainEvent10>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.DomainEvent11.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.DomainEvent11 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_DomainEvent11;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.DomainEvent11>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }
        /// <summary>
        /// Send a notification of type global::TestCode.DomainEvent.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.DomainEvent notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));
            

            var handlers = _diCacheLazy.Value.Handlers_For_TestCode_DomainEvent;

            if (handlers.Length == 0)
            {
                return default;
            }
            var publisher = _diCacheLazy.Value.InternalNotificationPublisherImpl;
            return publisher.Publish(
                new global::Mediator.NotificationHandlers<global::TestCode.DomainEvent>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if notification does not implement <see cref="global::Mediator.INotification"/>.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish<TNotification>(
            TNotification notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
            where TNotification : global::Mediator.INotification
        {
            switch (notification)
            {
                case global::TestCode.Round2SucceededActually n: return Publish(n, cancellationToken);
                case global::TestCode.Sound2SucceededActually n: return Publish(n, cancellationToken);
                case global::TestCode.RoundSucceededActually n: return Publish(n, cancellationToken);
                case global::TestCode.Sound20SucceededActually n: return Publish(n, cancellationToken);
                case global::TestCode.RoundResulted n: return Publish(n, cancellationToken);
                case global::TestCode.Round2Created n: return Publish(n, cancellationToken);
                case global::TestCode.Round2Resulted n: return Publish(n, cancellationToken);
                case global::TestCode.Round2Succeeded n: return Publish(n, cancellationToken);
                case global::TestCode.Sound20Succeeded n: return Publish(n, cancellationToken);
                case global::TestCode.Sound2Created n: return Publish(n, cancellationToken);
                case global::TestCode.Sound2Resulted n: return Publish(n, cancellationToken);
                case global::TestCode.Sound2Succeeded n: return Publish(n, cancellationToken);
                case global::TestCode.RoundCreated n: return Publish(n, cancellationToken);
                case global::TestCode.Sound20Created n: return Publish(n, cancellationToken);
                case global::TestCode.Sound20Resulted n: return Publish(n, cancellationToken);
                case global::TestCode.RoundSucceeded n: return Publish(n, cancellationToken);
                case global::TestCode.DomainEvent2 n: return Publish(n, cancellationToken);
                case global::TestCode.DomainEvent10 n: return Publish(n, cancellationToken);
                case global::TestCode.DomainEvent11 n: return Publish(n, cancellationToken);
                case global::TestCode.DomainEvent n: return Publish(n, cancellationToken);
                default:
                {
                    ThrowInvalidNotification(notification, nameof(notification));
                    return default;
                }
            }
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowMissingHandler(object msg) =>
            throw new global::Mediator.MissingMessageHandlerException(msg);

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidMessage<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IMessage))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidRequest<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseRequest))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidCommand<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseCommand))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidQuery<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseQuery))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidStreamMessage<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IStreamMessage))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidStreamRequest<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamRequest))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidStreamCommand<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamCommand))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidStreamQuery<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamQuery))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowArgumentNull(string? paramName) =>
            throw new global::System.ArgumentNullException(paramName);

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowInvalidMessage<T>(T msg) =>
            throw new global::Mediator.InvalidMessageException(msg);

        private static void ThrowIfNull<T>(T? argument, string paramName)
        {
            if (argument == null)
                ThrowArgumentNull(paramName);
        }

        private static void ThrowInvalidNotification<T>(T? argument, string paramName)
        {
            if (argument == null)
                ThrowArgumentNull(paramName);
            else if (!(argument is global::Mediator.INotification))
                ThrowInvalidMessage(argument);
        }

        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
        private static void ThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception> exceptions) =>
            throw new global::System.AggregateException(exceptions);

        private static void MaybeThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception>? exceptions)
        {
            if (exceptions != null)
            {
                ThrowAggregateException(exceptions);
            }
        }
    }
}
