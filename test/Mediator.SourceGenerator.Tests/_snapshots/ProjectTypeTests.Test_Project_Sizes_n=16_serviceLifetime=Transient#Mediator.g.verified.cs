//HintName: Mediator.g.cs
// <auto-generated>
//     Generated by the Mediator source generator.
// </auto-generated>

#pragma warning disable CS8019 // Unused usings
#pragma warning disable CS8321 // Unused local function
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously

#nullable enable

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using System.Linq;

using SD = global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor;

namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    /// DI extensions for Mediator.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public static class MediatorDependencyInjectionExtensions
    {
        /// <summary>
        /// Adds the Mediator implementation and handlers of your application.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services)
        {
            return AddMediator(services, null);
        }

        /// <summary>
        /// Adds the Mediator implementation and handlers of your application, with specified options.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services, global::System.Action<global::Mediator.MediatorOptions>? options)
        {
            var opts = new global::Mediator.MediatorOptions();
            if (options != null)
                options(opts);

            var configuredViaAttribute = false;
            if (opts.ServiceLifetime != global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient && !configuredViaAttribute)
            {
                var errMsg = "Invalid configuration detected for Mediator. ";
                errMsg += "Generated code for 'Transient' lifetime, but got '" + opts.ServiceLifetime + "' lifetime from options. ";
                errMsg += "This means that the source generator hasn't seen the 'AddMediator' method call during compilation. ";
                errMsg += "Make sure that the 'AddMediator' method is called from the project that references the Mediator.SourceGenerator package.";
                throw new global::System.Exception(errMsg);
            }

            services.Add(new SD(typeof(global::Mediator.Mediator), typeof(global::Mediator.Mediator), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::Mediator.IMediator), typeof(global::Mediator.Mediator), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::Mediator.ISender), typeof(global::Mediator.Mediator), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::Mediator.IPublisher), typeof(global::Mediator.Mediator), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));

            // Register handlers for request messages
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest0Handler), typeof(global::TestCode.TestRequest0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest0, global::System.Int32>), typeof(global::TestCode.TestRequest0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest0, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest0, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery5Handler), typeof(global::TestCode.TestStreamQuery5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery5, global::System.Int32>), typeof(global::TestCode.TestStreamQuery5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery5, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery5, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery4Handler), typeof(global::TestCode.TestStreamQuery4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery4, global::System.Int32>), typeof(global::TestCode.TestStreamQuery4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery4, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery4, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery3Handler), typeof(global::TestCode.TestStreamQuery3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery3, global::System.Int32>), typeof(global::TestCode.TestStreamQuery3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery3, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery3, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery2Handler), typeof(global::TestCode.TestStreamQuery2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery2, global::System.Int32>), typeof(global::TestCode.TestStreamQuery2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery2, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery2, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery1Handler), typeof(global::TestCode.TestStreamQuery1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery1, global::System.Int32>), typeof(global::TestCode.TestStreamQuery1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery1, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery1, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery0Handler), typeof(global::TestCode.TestStreamQuery0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery0, global::System.Int32>), typeof(global::TestCode.TestStreamQuery0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery0, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery0, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest15Handler), typeof(global::TestCode.TestStreamRequest15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest15, global::System.Int32>), typeof(global::TestCode.TestStreamRequest15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest15, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest15, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest14Handler), typeof(global::TestCode.TestStreamRequest14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest14, global::System.Int32>), typeof(global::TestCode.TestStreamRequest14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest14, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest14, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest13Handler), typeof(global::TestCode.TestStreamRequest13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest13, global::System.Int32>), typeof(global::TestCode.TestStreamRequest13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest13, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest13, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery6Handler), typeof(global::TestCode.TestStreamQuery6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery6, global::System.Int32>), typeof(global::TestCode.TestStreamQuery6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery6, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery6, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest12Handler), typeof(global::TestCode.TestStreamRequest12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest12, global::System.Int32>), typeof(global::TestCode.TestStreamRequest12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest12, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest12, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest10Handler), typeof(global::TestCode.TestStreamRequest10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest10, global::System.Int32>), typeof(global::TestCode.TestStreamRequest10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest10, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest10, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest9Handler), typeof(global::TestCode.TestStreamRequest9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest9, global::System.Int32>), typeof(global::TestCode.TestStreamRequest9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest9, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest9, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest8Handler), typeof(global::TestCode.TestStreamRequest8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest8, global::System.Int32>), typeof(global::TestCode.TestStreamRequest8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest8, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest8, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest7Handler), typeof(global::TestCode.TestStreamRequest7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest7, global::System.Int32>), typeof(global::TestCode.TestStreamRequest7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest7, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest7, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest6Handler), typeof(global::TestCode.TestStreamRequest6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest6, global::System.Int32>), typeof(global::TestCode.TestStreamRequest6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest6, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest6, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest5Handler), typeof(global::TestCode.TestStreamRequest5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest5, global::System.Int32>), typeof(global::TestCode.TestStreamRequest5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest5, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest5, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest4Handler), typeof(global::TestCode.TestStreamRequest4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest4, global::System.Int32>), typeof(global::TestCode.TestStreamRequest4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest4, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest4, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest3Handler), typeof(global::TestCode.TestStreamRequest3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest3, global::System.Int32>), typeof(global::TestCode.TestStreamRequest3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest3, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest3, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest2Handler), typeof(global::TestCode.TestStreamRequest2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest2, global::System.Int32>), typeof(global::TestCode.TestStreamRequest2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest2, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest2, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest11Handler), typeof(global::TestCode.TestStreamRequest11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest11, global::System.Int32>), typeof(global::TestCode.TestStreamRequest11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest11, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest11, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest1Handler), typeof(global::TestCode.TestStreamRequest1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest1, global::System.Int32>), typeof(global::TestCode.TestStreamRequest1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest1, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest1, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery7Handler), typeof(global::TestCode.TestStreamQuery7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery7, global::System.Int32>), typeof(global::TestCode.TestStreamQuery7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery7, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery7, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery9Handler), typeof(global::TestCode.TestStreamQuery9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery9, global::System.Int32>), typeof(global::TestCode.TestStreamQuery9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery9, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery9, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand13Handler), typeof(global::TestCode.TestStreamCommand13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand13, global::System.Int32>), typeof(global::TestCode.TestStreamCommand13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand13, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand13, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand12Handler), typeof(global::TestCode.TestStreamCommand12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand12, global::System.Int32>), typeof(global::TestCode.TestStreamCommand12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand12, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand12, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand11Handler), typeof(global::TestCode.TestStreamCommand11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand11, global::System.Int32>), typeof(global::TestCode.TestStreamCommand11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand11, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand11, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand10Handler), typeof(global::TestCode.TestStreamCommand10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand10, global::System.Int32>), typeof(global::TestCode.TestStreamCommand10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand10, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand10, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand9Handler), typeof(global::TestCode.TestStreamCommand9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand9, global::System.Int32>), typeof(global::TestCode.TestStreamCommand9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand9, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand9, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand8Handler), typeof(global::TestCode.TestStreamCommand8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand8, global::System.Int32>), typeof(global::TestCode.TestStreamCommand8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand8, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand8, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand7Handler), typeof(global::TestCode.TestStreamCommand7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand7, global::System.Int32>), typeof(global::TestCode.TestStreamCommand7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand7, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand7, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand6Handler), typeof(global::TestCode.TestStreamCommand6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand6, global::System.Int32>), typeof(global::TestCode.TestStreamCommand6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand6, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand6, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand5Handler), typeof(global::TestCode.TestStreamCommand5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand5, global::System.Int32>), typeof(global::TestCode.TestStreamCommand5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand5, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand5, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery8Handler), typeof(global::TestCode.TestStreamQuery8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery8, global::System.Int32>), typeof(global::TestCode.TestStreamQuery8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery8, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery8, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand4Handler), typeof(global::TestCode.TestStreamCommand4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand4, global::System.Int32>), typeof(global::TestCode.TestStreamCommand4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand4, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand4, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand2Handler), typeof(global::TestCode.TestStreamCommand2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand2, global::System.Int32>), typeof(global::TestCode.TestStreamCommand2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand2, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand2, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand1Handler), typeof(global::TestCode.TestStreamCommand1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand1, global::System.Int32>), typeof(global::TestCode.TestStreamCommand1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand1, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand1, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand0Handler), typeof(global::TestCode.TestStreamCommand0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand0, global::System.Int32>), typeof(global::TestCode.TestStreamCommand0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand0, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand0, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery15Handler), typeof(global::TestCode.TestStreamQuery15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery15, global::System.Int32>), typeof(global::TestCode.TestStreamQuery15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery15, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery15, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery14Handler), typeof(global::TestCode.TestStreamQuery14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery14, global::System.Int32>), typeof(global::TestCode.TestStreamQuery14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery14, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery14, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery13Handler), typeof(global::TestCode.TestStreamQuery13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery13, global::System.Int32>), typeof(global::TestCode.TestStreamQuery13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery13, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery13, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery12Handler), typeof(global::TestCode.TestStreamQuery12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery12, global::System.Int32>), typeof(global::TestCode.TestStreamQuery12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery12, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery12, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery11Handler), typeof(global::TestCode.TestStreamQuery11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery11, global::System.Int32>), typeof(global::TestCode.TestStreamQuery11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery11, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery11, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamQuery10Handler), typeof(global::TestCode.TestStreamQuery10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamQueryHandler<global::TestCode.TestStreamQuery10, global::System.Int32>), typeof(global::TestCode.TestStreamQuery10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery10, global::System.Int32>), typeof(global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery10, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand3Handler), typeof(global::TestCode.TestStreamCommand3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand3, global::System.Int32>), typeof(global::TestCode.TestStreamCommand3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand3, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand3, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamRequest0Handler), typeof(global::TestCode.TestStreamRequest0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamRequestHandler<global::TestCode.TestStreamRequest0, global::System.Int32>), typeof(global::TestCode.TestStreamRequest0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest0, global::System.Int32>), typeof(global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest0, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand15Handler), typeof(global::TestCode.TestCommand15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand15, global::System.Int32>), typeof(global::TestCode.TestCommand15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand15, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand15, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand14Handler), typeof(global::TestCode.TestCommand14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand14, global::System.Int32>), typeof(global::TestCode.TestCommand14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand14, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand14, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery4Handler), typeof(global::TestCode.TestQuery4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery4, global::System.Int32>), typeof(global::TestCode.TestQuery4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery4, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery4, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery3Handler), typeof(global::TestCode.TestQuery3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery3, global::System.Int32>), typeof(global::TestCode.TestQuery3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery3, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery3, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery2Handler), typeof(global::TestCode.TestQuery2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery2, global::System.Int32>), typeof(global::TestCode.TestQuery2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery2, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery2, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery1Handler), typeof(global::TestCode.TestQuery1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery1, global::System.Int32>), typeof(global::TestCode.TestQuery1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery1, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery1, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery0Handler), typeof(global::TestCode.TestQuery0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery0, global::System.Int32>), typeof(global::TestCode.TestQuery0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery0, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery0, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest15Handler), typeof(global::TestCode.TestRequest15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest15, global::System.Int32>), typeof(global::TestCode.TestRequest15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest15, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest15, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest14Handler), typeof(global::TestCode.TestRequest14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest14, global::System.Int32>), typeof(global::TestCode.TestRequest14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest14, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest14, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest13Handler), typeof(global::TestCode.TestRequest13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest13, global::System.Int32>), typeof(global::TestCode.TestRequest13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest13, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest13, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest12Handler), typeof(global::TestCode.TestRequest12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest12, global::System.Int32>), typeof(global::TestCode.TestRequest12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest12, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest12, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery5Handler), typeof(global::TestCode.TestQuery5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery5, global::System.Int32>), typeof(global::TestCode.TestQuery5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery5, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery5, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest11Handler), typeof(global::TestCode.TestRequest11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest11, global::System.Int32>), typeof(global::TestCode.TestRequest11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest11, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest11, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest9Handler), typeof(global::TestCode.TestRequest9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest9, global::System.Int32>), typeof(global::TestCode.TestRequest9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest9, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest9, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest8Handler), typeof(global::TestCode.TestRequest8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest8, global::System.Int32>), typeof(global::TestCode.TestRequest8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest8, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest8, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest7Handler), typeof(global::TestCode.TestRequest7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest7, global::System.Int32>), typeof(global::TestCode.TestRequest7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest7, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest7, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest6Handler), typeof(global::TestCode.TestRequest6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest6, global::System.Int32>), typeof(global::TestCode.TestRequest6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest6, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest6, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest5Handler), typeof(global::TestCode.TestRequest5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest5, global::System.Int32>), typeof(global::TestCode.TestRequest5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest5, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest5, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest4Handler), typeof(global::TestCode.TestRequest4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest4, global::System.Int32>), typeof(global::TestCode.TestRequest4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest4, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest4, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest3Handler), typeof(global::TestCode.TestRequest3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest3, global::System.Int32>), typeof(global::TestCode.TestRequest3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest3, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest3, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest2Handler), typeof(global::TestCode.TestRequest2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest2, global::System.Int32>), typeof(global::TestCode.TestRequest2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest2, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest2, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest1Handler), typeof(global::TestCode.TestRequest1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest1, global::System.Int32>), typeof(global::TestCode.TestRequest1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest1, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest1, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestRequest10Handler), typeof(global::TestCode.TestRequest10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IRequestHandler<global::TestCode.TestRequest10, global::System.Int32>), typeof(global::TestCode.TestRequest10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest10, global::System.Int32>), typeof(global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest10, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery6Handler), typeof(global::TestCode.TestQuery6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery6, global::System.Int32>), typeof(global::TestCode.TestQuery6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery6, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery6, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery7Handler), typeof(global::TestCode.TestQuery7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery7, global::System.Int32>), typeof(global::TestCode.TestQuery7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery7, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery7, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery8Handler), typeof(global::TestCode.TestQuery8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery8, global::System.Int32>), typeof(global::TestCode.TestQuery8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery8, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery8, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand13Handler), typeof(global::TestCode.TestCommand13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand13, global::System.Int32>), typeof(global::TestCode.TestCommand13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand13, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand13, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand12Handler), typeof(global::TestCode.TestCommand12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand12, global::System.Int32>), typeof(global::TestCode.TestCommand12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand12, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand12, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand11Handler), typeof(global::TestCode.TestCommand11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand11, global::System.Int32>), typeof(global::TestCode.TestCommand11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand11, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand11, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand10Handler), typeof(global::TestCode.TestCommand10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand10, global::System.Int32>), typeof(global::TestCode.TestCommand10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand10, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand10, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand9Handler), typeof(global::TestCode.TestCommand9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand9, global::System.Int32>), typeof(global::TestCode.TestCommand9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand9, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand9, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand8Handler), typeof(global::TestCode.TestCommand8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand8, global::System.Int32>), typeof(global::TestCode.TestCommand8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand8, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand8, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand7Handler), typeof(global::TestCode.TestCommand7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand7, global::System.Int32>), typeof(global::TestCode.TestCommand7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand7, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand7, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand6Handler), typeof(global::TestCode.TestCommand6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand6, global::System.Int32>), typeof(global::TestCode.TestCommand6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand6, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand6, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand5Handler), typeof(global::TestCode.TestCommand5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand5, global::System.Int32>), typeof(global::TestCode.TestCommand5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand5, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand5, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand4Handler), typeof(global::TestCode.TestCommand4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand4, global::System.Int32>), typeof(global::TestCode.TestCommand4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand4, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand4, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand3Handler), typeof(global::TestCode.TestCommand3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand3, global::System.Int32>), typeof(global::TestCode.TestCommand3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand3, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand3, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand2Handler), typeof(global::TestCode.TestCommand2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand2, global::System.Int32>), typeof(global::TestCode.TestCommand2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand2, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand2, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand1Handler), typeof(global::TestCode.TestCommand1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand1, global::System.Int32>), typeof(global::TestCode.TestCommand1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand1, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand1, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestCommand0Handler), typeof(global::TestCode.TestCommand0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::TestCode.TestCommand0, global::System.Int32>), typeof(global::TestCode.TestCommand0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand0, global::System.Int32>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand0, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery15Handler), typeof(global::TestCode.TestQuery15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery15, global::System.Int32>), typeof(global::TestCode.TestQuery15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery15, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery15, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery14Handler), typeof(global::TestCode.TestQuery14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery14, global::System.Int32>), typeof(global::TestCode.TestQuery14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery14, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery14, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery13Handler), typeof(global::TestCode.TestQuery13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery13, global::System.Int32>), typeof(global::TestCode.TestQuery13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery13, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery13, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery12Handler), typeof(global::TestCode.TestQuery12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery12, global::System.Int32>), typeof(global::TestCode.TestQuery12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery12, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery12, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery11Handler), typeof(global::TestCode.TestQuery11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery11, global::System.Int32>), typeof(global::TestCode.TestQuery11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery11, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery11, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery10Handler), typeof(global::TestCode.TestQuery10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery10, global::System.Int32>), typeof(global::TestCode.TestQuery10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery10, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery10, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestQuery9Handler), typeof(global::TestCode.TestQuery9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::TestCode.TestQuery9, global::System.Int32>), typeof(global::TestCode.TestQuery9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery9, global::System.Int32>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery9, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand14Handler), typeof(global::TestCode.TestStreamCommand14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand14, global::System.Int32>), typeof(global::TestCode.TestStreamCommand14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand14, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand14, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::TestCode.TestStreamCommand15Handler), typeof(global::TestCode.TestStreamCommand15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.IStreamCommandHandler<global::TestCode.TestStreamCommand15, global::System.Int32>), typeof(global::TestCode.TestStreamCommand15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand15, global::System.Int32>), typeof(global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand15, global::System.Int32>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            // Register concrete handlers for notification messages
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification0Handler), typeof(global::TestCode.TestNotification0Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification1Handler), typeof(global::TestCode.TestNotification1Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification2Handler), typeof(global::TestCode.TestNotification2Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification3Handler), typeof(global::TestCode.TestNotification3Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification4Handler), typeof(global::TestCode.TestNotification4Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification5Handler), typeof(global::TestCode.TestNotification5Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification6Handler), typeof(global::TestCode.TestNotification6Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification7Handler), typeof(global::TestCode.TestNotification7Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification8Handler), typeof(global::TestCode.TestNotification8Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification9Handler), typeof(global::TestCode.TestNotification9Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification10Handler), typeof(global::TestCode.TestNotification10Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification11Handler), typeof(global::TestCode.TestNotification11Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification12Handler), typeof(global::TestCode.TestNotification12Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification13Handler), typeof(global::TestCode.TestNotification13Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification14Handler), typeof(global::TestCode.TestNotification14Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::TestCode.TestNotification15Handler), typeof(global::TestCode.TestNotification15Handler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));

            // Register handlers and wrappers for notification messages
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification0>), GetRequiredService<global::TestCode.TestNotification0Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification0>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification0>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification1>), GetRequiredService<global::TestCode.TestNotification1Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification1>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification1>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification2>), GetRequiredService<global::TestCode.TestNotification2Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification2>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification2>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification3>), GetRequiredService<global::TestCode.TestNotification3Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification3>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification3>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification4>), GetRequiredService<global::TestCode.TestNotification4Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification4>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification4>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification5>), GetRequiredService<global::TestCode.TestNotification5Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification5>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification5>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification6>), GetRequiredService<global::TestCode.TestNotification6Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification6>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification6>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification7>), GetRequiredService<global::TestCode.TestNotification7Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification7>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification7>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification8>), GetRequiredService<global::TestCode.TestNotification8Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification8>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification8>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification9>), GetRequiredService<global::TestCode.TestNotification9Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification9>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification9>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification10>), GetRequiredService<global::TestCode.TestNotification10Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification10>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification10>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification11>), GetRequiredService<global::TestCode.TestNotification11Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification11>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification11>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification12>), GetRequiredService<global::TestCode.TestNotification12Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification12>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification12>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification13>), GetRequiredService<global::TestCode.TestNotification13Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification13>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification13>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification14>), GetRequiredService<global::TestCode.TestNotification14Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification14>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification14>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.INotificationHandler<global::TestCode.TestNotification15>), GetRequiredService<global::TestCode.TestNotification15Handler>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification15>), typeof(global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification15>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            // Register the notification publisher that was configured
            services.Add(new SD(typeof(global::Mediator.ForeachAwaitPublisher), typeof(global::Mediator.ForeachAwaitPublisher), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.TryAdd(new SD(typeof(global::Mediator.INotificationPublisher), sp => sp.GetRequiredService<global::Mediator.ForeachAwaitPublisher>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));

            // Register internal components
            services.Add(new SD(typeof(global::Mediator.Internals.IContainerProbe), typeof(global::Mediator.Internals.ContainerProbe0), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.IContainerProbe), typeof(global::Mediator.Internals.ContainerProbe1), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient));
            services.Add(new SD(typeof(global::Mediator.Internals.ContainerMetadata), typeof(global::Mediator.Internals.ContainerMetadata), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            return services;

            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            static global::System.Func<global::System.IServiceProvider, T> GetRequiredService<T>() where T : notnull => sp => sp.GetRequiredService<T>();
        }
    }
}

namespace Mediator.Internals
{
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IMessageHandlerBase
    {
        global::System.Threading.Tasks.ValueTask<object?> Handle(
            global::Mediator.Mediator mediator,
            object request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface INotificationHandlerBase
    {
        global::System.Threading.Tasks.ValueTask Handle(
            global::Mediator.Mediator mediator,
            object notification,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IStreamMessageHandlerBase
    {
        global::System.Collections.Generic.IAsyncEnumerable<object?> Handle(
            global::Mediator.Mediator mediator,
            object request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IRequestHandlerBase<TResponse> : IMessageHandlerBase
    {
        global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class RequestHandlerWrapper<TRequest, TResponse> : IRequestHandlerBase<TResponse>
        where TRequest : global::Mediator.IRequest<TResponse>
    {

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.Mediator mediator,
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var concreteHandler = mediator.Services.GetRequiredService<global::Mediator.IRequestHandler<TRequest, TResponse>>();
            var pipelineBehaviours = mediator.Services.GetServices<global::Mediator.IPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (mediator.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
                for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
                {
                    var pipeline = pipelineBehavioursArray[i];
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                foreach (var pipeline in pipelineBehaviours.Reverse())
                {
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            return handler(request, cancellationToken);
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle(mediator, (TRequest)request, cancellationToken);
        }

        public async global::System.Threading.Tasks.ValueTask<object?> Handle(
            global::Mediator.Mediator mediator,
            object request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return await Handle(mediator, (TRequest)request, cancellationToken);
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IStreamRequestHandlerBase<TResponse> : IStreamMessageHandlerBase
    {
        global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IStreamRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamRequestHandlerWrapper<TRequest, TResponse> : IStreamRequestHandlerBase<TResponse>
        where TRequest : global::Mediator.IStreamRequest<TResponse>
    {

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.Mediator mediator,
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var concreteHandler = mediator.Services.GetRequiredService<global::Mediator.IStreamRequestHandler<TRequest, TResponse>>();
            var pipelineBehaviours = mediator.Services.GetServices<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (mediator.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
                for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
                {
                    var pipeline = pipelineBehavioursArray[i];
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                foreach (var pipeline in pipelineBehaviours.Reverse())
                {
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            return handler(request, cancellationToken);
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IStreamRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle(mediator, (TRequest)request, cancellationToken);
        }

        public async global::System.Collections.Generic.IAsyncEnumerable<object?> Handle(
            global::Mediator.Mediator mediator,
            object request,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken
        )
        {
            await foreach (var el in Handle(mediator, (TRequest)request, cancellationToken))
                yield return el;
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface ICommandHandlerBase<TResponse> : IMessageHandlerBase
    {
        global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.ICommand<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class CommandHandlerWrapper<TRequest, TResponse> : ICommandHandlerBase<TResponse>
        where TRequest : global::Mediator.ICommand<TResponse>
    {

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.Mediator mediator,
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var concreteHandler = mediator.Services.GetRequiredService<global::Mediator.ICommandHandler<TRequest, TResponse>>();
            var pipelineBehaviours = mediator.Services.GetServices<global::Mediator.IPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (mediator.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
                for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
                {
                    var pipeline = pipelineBehavioursArray[i];
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                foreach (var pipeline in pipelineBehaviours.Reverse())
                {
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            return handler(request, cancellationToken);
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.ICommand<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle(mediator, (TRequest)request, cancellationToken);
        }

        public async global::System.Threading.Tasks.ValueTask<object?> Handle(
            global::Mediator.Mediator mediator,
            object request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return await Handle(mediator, (TRequest)request, cancellationToken);
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IStreamCommandHandlerBase<TResponse> : IStreamMessageHandlerBase
    {
        global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IStreamCommand<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamCommandHandlerWrapper<TRequest, TResponse> : IStreamCommandHandlerBase<TResponse>
        where TRequest : global::Mediator.IStreamCommand<TResponse>
    {

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.Mediator mediator,
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var concreteHandler = mediator.Services.GetRequiredService<global::Mediator.IStreamCommandHandler<TRequest, TResponse>>();
            var pipelineBehaviours = mediator.Services.GetServices<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (mediator.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
                for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
                {
                    var pipeline = pipelineBehavioursArray[i];
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                foreach (var pipeline in pipelineBehaviours.Reverse())
                {
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            return handler(request, cancellationToken);
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IStreamCommand<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle(mediator, (TRequest)request, cancellationToken);
        }

        public async global::System.Collections.Generic.IAsyncEnumerable<object?> Handle(
            global::Mediator.Mediator mediator,
            object request,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken
        )
        {
            await foreach (var el in Handle(mediator, (TRequest)request, cancellationToken))
                yield return el;
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IQueryHandlerBase<TResponse> : IMessageHandlerBase
    {
        global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IQuery<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class QueryHandlerWrapper<TRequest, TResponse> : IQueryHandlerBase<TResponse>
        where TRequest : global::Mediator.IQuery<TResponse>
    {

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.Mediator mediator,
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var concreteHandler = mediator.Services.GetRequiredService<global::Mediator.IQueryHandler<TRequest, TResponse>>();
            var pipelineBehaviours = mediator.Services.GetServices<global::Mediator.IPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (mediator.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
                for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
                {
                    var pipeline = pipelineBehavioursArray[i];
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                foreach (var pipeline in pipelineBehaviours.Reverse())
                {
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            return handler(request, cancellationToken);
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IQuery<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle(mediator, (TRequest)request, cancellationToken);
        }

        public async global::System.Threading.Tasks.ValueTask<object?> Handle(
            global::Mediator.Mediator mediator,
            object request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return await Handle(mediator, (TRequest)request, cancellationToken);
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IStreamQueryHandlerBase<TResponse> : IStreamMessageHandlerBase
    {
        global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IStreamQuery<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamQueryHandlerWrapper<TRequest, TResponse> : IStreamQueryHandlerBase<TResponse>
        where TRequest : global::Mediator.IStreamQuery<TResponse>
    {

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.Mediator mediator,
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var concreteHandler = mediator.Services.GetRequiredService<global::Mediator.IStreamQueryHandler<TRequest, TResponse>>();
            var pipelineBehaviours = mediator.Services.GetServices<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (mediator.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
                for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
                {
                    var pipeline = pipelineBehavioursArray[i];
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                foreach (var pipeline in pipelineBehaviours.Reverse())
                {
                    var handlerCopy = handler;
                    var pipelineCopy = pipeline;
                    handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
                }
            }
            return handler(request, cancellationToken);
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.Mediator mediator,
            global::Mediator.IStreamQuery<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle(mediator, (TRequest)request, cancellationToken);
        }

        public async global::System.Collections.Generic.IAsyncEnumerable<object?> Handle(
            global::Mediator.Mediator mediator,
            object request,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken
        )
        {
            await foreach (var el in Handle(mediator, (TRequest)request, cancellationToken))
                yield return el;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class NotificationHandlerWrapper<TNotification> : INotificationHandlerBase
        where TNotification : global::Mediator.INotification
    {

        public global::System.Threading.Tasks.ValueTask Handle(
            global::Mediator.Mediator mediator,
            TNotification notification,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var handlers = mediator.Services.GetServices<global::Mediator.INotificationHandler<TNotification>>();
            var isArray = mediator.ServicesUnderlyingTypeIsArray;
            if (isArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    handlers is global::Mediator.INotificationHandler<TNotification>[],
                    $"Unexpected type: {handlers.GetType()}"
                );
                if (global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<TNotification>[]>(handlers).Length == 0)
                {
                    return default;
                }
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    handlers is not global::Mediator.INotificationHandler<TNotification>[],
                    $"Unexpected type: {handlers.GetType()}"
                );
            }
            return mediator.NotificationPublisher.Publish(
                new global::Mediator.NotificationHandlers<TNotification>(handlers, isArray),
                notification,
                cancellationToken
            );
        }

        public global::System.Threading.Tasks.ValueTask Handle(
            global::Mediator.Mediator mediator,
            object notification,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle(mediator, (TNotification)notification, cancellationToken);
        }
    }

    internal interface IContainerProbe { }
    internal sealed class ContainerProbe0 : IContainerProbe { }
    internal sealed class ContainerProbe1 : IContainerProbe { }

    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class ContainerMetadata
    {
        public readonly bool ServicesUnderlyingTypeIsArray;

        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> RequestHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> CommandHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> QueryHandlerWrappers;

        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> StreamRequestHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> StreamCommandHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> StreamQueryHandlerWrappers;

        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> NotificationHandlerWrappers;

        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest0, global::System.Int32> Wrapper_For_TestCode_TestRequest0;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest15, global::System.Int32> Wrapper_For_TestCode_TestRequest15;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest14, global::System.Int32> Wrapper_For_TestCode_TestRequest14;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest13, global::System.Int32> Wrapper_For_TestCode_TestRequest13;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest12, global::System.Int32> Wrapper_For_TestCode_TestRequest12;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest11, global::System.Int32> Wrapper_For_TestCode_TestRequest11;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest9, global::System.Int32> Wrapper_For_TestCode_TestRequest9;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest8, global::System.Int32> Wrapper_For_TestCode_TestRequest8;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest7, global::System.Int32> Wrapper_For_TestCode_TestRequest7;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest6, global::System.Int32> Wrapper_For_TestCode_TestRequest6;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest5, global::System.Int32> Wrapper_For_TestCode_TestRequest5;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest4, global::System.Int32> Wrapper_For_TestCode_TestRequest4;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest3, global::System.Int32> Wrapper_For_TestCode_TestRequest3;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest2, global::System.Int32> Wrapper_For_TestCode_TestRequest2;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest1, global::System.Int32> Wrapper_For_TestCode_TestRequest1;
        public readonly global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest10, global::System.Int32> Wrapper_For_TestCode_TestRequest10;

        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand15, global::System.Int32> Wrapper_For_TestCode_TestCommand15;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand14, global::System.Int32> Wrapper_For_TestCode_TestCommand14;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand13, global::System.Int32> Wrapper_For_TestCode_TestCommand13;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand12, global::System.Int32> Wrapper_For_TestCode_TestCommand12;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand11, global::System.Int32> Wrapper_For_TestCode_TestCommand11;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand10, global::System.Int32> Wrapper_For_TestCode_TestCommand10;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand9, global::System.Int32> Wrapper_For_TestCode_TestCommand9;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand8, global::System.Int32> Wrapper_For_TestCode_TestCommand8;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand7, global::System.Int32> Wrapper_For_TestCode_TestCommand7;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand6, global::System.Int32> Wrapper_For_TestCode_TestCommand6;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand5, global::System.Int32> Wrapper_For_TestCode_TestCommand5;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand4, global::System.Int32> Wrapper_For_TestCode_TestCommand4;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand3, global::System.Int32> Wrapper_For_TestCode_TestCommand3;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand2, global::System.Int32> Wrapper_For_TestCode_TestCommand2;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand1, global::System.Int32> Wrapper_For_TestCode_TestCommand1;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand0, global::System.Int32> Wrapper_For_TestCode_TestCommand0;

        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery4, global::System.Int32> Wrapper_For_TestCode_TestQuery4;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery3, global::System.Int32> Wrapper_For_TestCode_TestQuery3;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery2, global::System.Int32> Wrapper_For_TestCode_TestQuery2;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery1, global::System.Int32> Wrapper_For_TestCode_TestQuery1;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery0, global::System.Int32> Wrapper_For_TestCode_TestQuery0;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery5, global::System.Int32> Wrapper_For_TestCode_TestQuery5;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery6, global::System.Int32> Wrapper_For_TestCode_TestQuery6;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery7, global::System.Int32> Wrapper_For_TestCode_TestQuery7;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery8, global::System.Int32> Wrapper_For_TestCode_TestQuery8;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery15, global::System.Int32> Wrapper_For_TestCode_TestQuery15;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery14, global::System.Int32> Wrapper_For_TestCode_TestQuery14;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery13, global::System.Int32> Wrapper_For_TestCode_TestQuery13;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery12, global::System.Int32> Wrapper_For_TestCode_TestQuery12;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery11, global::System.Int32> Wrapper_For_TestCode_TestQuery11;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery10, global::System.Int32> Wrapper_For_TestCode_TestQuery10;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery9, global::System.Int32> Wrapper_For_TestCode_TestQuery9;

        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest15, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest15;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest14, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest14;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest13, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest13;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest12, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest12;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest10, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest10;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest9, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest9;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest8, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest8;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest7, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest7;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest6, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest6;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest5, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest5;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest4, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest4;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest3, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest3;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest2, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest2;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest11, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest11;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest1, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest1;
        public readonly global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest0, global::System.Int32> Wrapper_For_TestCode_TestStreamRequest0;

        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand13, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand13;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand12, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand12;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand11, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand11;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand10, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand10;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand9, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand9;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand8, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand8;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand7, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand7;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand6, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand6;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand5, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand5;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand4, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand4;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand2, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand2;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand1, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand1;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand0, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand0;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand3, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand3;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand14, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand14;
        public readonly global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand15, global::System.Int32> Wrapper_For_TestCode_TestStreamCommand15;

        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery5, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery5;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery4, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery4;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery3, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery3;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery2, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery2;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery1, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery1;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery0, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery0;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery6, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery6;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery7, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery7;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery9, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery9;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery8, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery8;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery15, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery15;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery14, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery14;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery13, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery13;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery12, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery12;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery11, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery11;
        public readonly global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery10, global::System.Int32> Wrapper_For_TestCode_TestStreamQuery10;

        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification0> Wrapper_For_TestCode_TestNotification0;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification1> Wrapper_For_TestCode_TestNotification1;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification2> Wrapper_For_TestCode_TestNotification2;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification3> Wrapper_For_TestCode_TestNotification3;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification4> Wrapper_For_TestCode_TestNotification4;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification5> Wrapper_For_TestCode_TestNotification5;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification6> Wrapper_For_TestCode_TestNotification6;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification7> Wrapper_For_TestCode_TestNotification7;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification8> Wrapper_For_TestCode_TestNotification8;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification9> Wrapper_For_TestCode_TestNotification9;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification10> Wrapper_For_TestCode_TestNotification10;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification11> Wrapper_For_TestCode_TestNotification11;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification12> Wrapper_For_TestCode_TestNotification12;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification13> Wrapper_For_TestCode_TestNotification13;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification14> Wrapper_For_TestCode_TestNotification14;
        public readonly global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification15> Wrapper_For_TestCode_TestNotification15;


        public ContainerMetadata(global::System.IServiceProvider sp)
        {
            ServicesUnderlyingTypeIsArray = sp.GetServices<global::Mediator.Internals.IContainerProbe>() is global::Mediator.Internals.IContainerProbe[];


            var requestHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(16);
            var commandHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(16);
            var queryHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(16);
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest0), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest0, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest15), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest15, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest14), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest14, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest13), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest13, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest12), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest12, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest11), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest11, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest9), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest9, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest8), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest8, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest7), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest7, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest6), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest6, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest5), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest5, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest4), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest4, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest3), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest3, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest2), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest2, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest1), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest1, global::System.Int32>>());
            requestHandlerTypes.Add(typeof(global::TestCode.TestRequest10), sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest10, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand15), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand15, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand14), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand14, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand13), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand13, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand12), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand12, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand11), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand11, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand10), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand10, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand9), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand9, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand8), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand8, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand7), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand7, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand6), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand6, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand5), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand5, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand4), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand4, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand3), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand3, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand2), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand2, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand1), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand1, global::System.Int32>>());
            commandHandlerTypes.Add(typeof(global::TestCode.TestCommand0), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand0, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery4), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery4, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery3), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery3, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery2), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery2, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery1), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery1, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery0), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery0, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery5), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery5, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery6), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery6, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery7), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery7, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery8), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery8, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery15), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery15, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery14), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery14, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery13), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery13, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery12), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery12, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery11), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery11, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery10), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery10, global::System.Int32>>());
            queryHandlerTypes.Add(typeof(global::TestCode.TestQuery9), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery9, global::System.Int32>>());
            RequestHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(requestHandlerTypes);
            CommandHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(commandHandlerTypes);
            QueryHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(queryHandlerTypes);

            var streamRequestHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(16);
            var streamCommandHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(16);
            var streamQueryHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(16);
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest15), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest15, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest14), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest14, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest13), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest13, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest12), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest12, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest10), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest10, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest9), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest9, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest8), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest8, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest7), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest7, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest6), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest6, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest5), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest5, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest4), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest4, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest3), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest3, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest2), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest2, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest11), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest11, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest1), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest1, global::System.Int32>>());
            streamRequestHandlerTypes.Add(typeof(global::TestCode.TestStreamRequest0), sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest0, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand13), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand13, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand12), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand12, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand11), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand11, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand10), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand10, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand9), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand9, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand8), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand8, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand7), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand7, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand6), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand6, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand5), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand5, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand4), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand4, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand2), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand2, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand1), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand1, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand0), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand0, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand3), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand3, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand14), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand14, global::System.Int32>>());
            streamCommandHandlerTypes.Add(typeof(global::TestCode.TestStreamCommand15), sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand15, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery5), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery5, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery4), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery4, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery3), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery3, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery2), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery2, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery1), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery1, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery0), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery0, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery6), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery6, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery7), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery7, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery9), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery9, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery8), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery8, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery15), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery15, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery14), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery14, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery13), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery13, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery12), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery12, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery11), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery11, global::System.Int32>>());
            streamQueryHandlerTypes.Add(typeof(global::TestCode.TestStreamQuery10), sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery10, global::System.Int32>>());
            StreamRequestHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(streamRequestHandlerTypes);
            StreamCommandHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(streamCommandHandlerTypes);
            StreamQueryHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(streamQueryHandlerTypes);

            var notificationHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(16);
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification0), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification0>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification1), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification1>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification2), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification2>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification3), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification3>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification4), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification4>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification5), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification5>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification6), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification6>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification7), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification7>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification8), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification8>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification9), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification9>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification10), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification10>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification11), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification11>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification12), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification12>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification13), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification13>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification14), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification14>>());
            notificationHandlerTypes.Add(typeof(global::TestCode.TestNotification15), sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification15>>());
            NotificationHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(notificationHandlerTypes);

            Wrapper_For_TestCode_TestRequest0 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest0, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest15 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest15, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest14 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest14, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest13 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest13, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest12 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest12, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest11 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest11, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest9 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest9, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest8 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest8, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest7 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest7, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest6 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest6, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest5 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest5, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest4 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest4, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest3 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest3, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest2 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest2, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest1 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest1, global::System.Int32>>();
            Wrapper_For_TestCode_TestRequest10 = sp.GetRequiredService<global::Mediator.Internals.RequestHandlerWrapper<global::TestCode.TestRequest10, global::System.Int32>>();

            Wrapper_For_TestCode_TestCommand15 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand15, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand14 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand14, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand13 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand13, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand12 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand12, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand11 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand11, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand10 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand10, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand9 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand9, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand8 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand8, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand7 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand7, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand6 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand6, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand5 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand5, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand4 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand4, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand3 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand3, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand2 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand2, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand1 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand1, global::System.Int32>>();
            Wrapper_For_TestCode_TestCommand0 = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::TestCode.TestCommand0, global::System.Int32>>();

            Wrapper_For_TestCode_TestQuery4 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery4, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery3 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery3, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery2 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery2, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery1 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery1, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery0 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery0, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery5 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery5, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery6 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery6, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery7 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery7, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery8 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery8, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery15 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery15, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery14 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery14, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery13 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery13, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery12 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery12, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery11 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery11, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery10 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery10, global::System.Int32>>();
            Wrapper_For_TestCode_TestQuery9 = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::TestCode.TestQuery9, global::System.Int32>>();

            Wrapper_For_TestCode_TestStreamRequest15 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest15, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest14 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest14, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest13 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest13, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest12 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest12, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest10 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest10, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest9 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest9, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest8 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest8, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest7 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest7, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest6 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest6, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest5 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest5, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest4 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest4, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest3 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest3, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest2 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest2, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest11 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest11, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest1 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest1, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamRequest0 = sp.GetRequiredService<global::Mediator.Internals.StreamRequestHandlerWrapper<global::TestCode.TestStreamRequest0, global::System.Int32>>();

            Wrapper_For_TestCode_TestStreamCommand13 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand13, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand12 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand12, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand11 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand11, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand10 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand10, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand9 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand9, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand8 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand8, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand7 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand7, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand6 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand6, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand5 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand5, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand4 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand4, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand2 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand2, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand1 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand1, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand0 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand0, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand3 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand3, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand14 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand14, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamCommand15 = sp.GetRequiredService<global::Mediator.Internals.StreamCommandHandlerWrapper<global::TestCode.TestStreamCommand15, global::System.Int32>>();

            Wrapper_For_TestCode_TestStreamQuery5 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery5, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery4 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery4, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery3 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery3, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery2 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery2, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery1 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery1, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery0 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery0, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery6 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery6, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery7 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery7, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery9 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery9, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery8 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery8, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery15 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery15, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery14 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery14, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery13 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery13, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery12 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery12, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery11 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery11, global::System.Int32>>();
            Wrapper_For_TestCode_TestStreamQuery10 = sp.GetRequiredService<global::Mediator.Internals.StreamQueryHandlerWrapper<global::TestCode.TestStreamQuery10, global::System.Int32>>();

            Wrapper_For_TestCode_TestNotification0 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification0>>();
            Wrapper_For_TestCode_TestNotification1 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification1>>();
            Wrapper_For_TestCode_TestNotification2 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification2>>();
            Wrapper_For_TestCode_TestNotification3 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification3>>();
            Wrapper_For_TestCode_TestNotification4 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification4>>();
            Wrapper_For_TestCode_TestNotification5 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification5>>();
            Wrapper_For_TestCode_TestNotification6 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification6>>();
            Wrapper_For_TestCode_TestNotification7 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification7>>();
            Wrapper_For_TestCode_TestNotification8 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification8>>();
            Wrapper_For_TestCode_TestNotification9 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification9>>();
            Wrapper_For_TestCode_TestNotification10 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification10>>();
            Wrapper_For_TestCode_TestNotification11 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification11>>();
            Wrapper_For_TestCode_TestNotification12 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification12>>();
            Wrapper_For_TestCode_TestNotification13 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification13>>();
            Wrapper_For_TestCode_TestNotification14 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification14>>();
            Wrapper_For_TestCode_TestNotification15 = sp.GetRequiredService<global::Mediator.Internals.NotificationHandlerWrapper<global::TestCode.TestNotification15>>();
        }
    }
}

namespace Mediator
{
    /// <summary>
    /// Generated code for Mediator implementation.
    /// This type is also registered as a DI service.
    /// Can be used directly for high performance scenarios.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public sealed partial class Mediator : global::Mediator.IMediator, global::Mediator.ISender, global::Mediator.IPublisher
    {
        internal readonly global::System.IServiceProvider Services;
        private global::Mediator.Internals.ContainerMetadata? _containerMetadataStorage;
        private global::Mediator.Internals.ContainerMetadata _containerMetadata
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                if (_containerMetadataStorage == null)
                {
                    var containerMetadata = Services.GetRequiredService<global::Mediator.Internals.ContainerMetadata>();
                    _containerMetadataStorage = containerMetadata;
                    return containerMetadata;
                }
                return _containerMetadataStorage;
            }
        }
        private global::Mediator.ForeachAwaitPublisher? _notificationPublisher;
        internal global::Mediator.ForeachAwaitPublisher NotificationPublisher
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                if (_notificationPublisher == null)
                    _notificationPublisher = Services.GetRequiredService<global::Mediator.ForeachAwaitPublisher>();
                return _notificationPublisher!;
            }
        }
        internal bool ServicesUnderlyingTypeIsArray => _containerMetadata.ServicesUnderlyingTypeIsArray;

        /// <summary>
        /// The lifetime of Mediator-related service registrations in DI container.
        /// </summary>
        public const global::Microsoft.Extensions.DependencyInjection.ServiceLifetime ServiceLifetime = global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient;

        /// <summary>
        /// The name of the notification publisher service that was configured.
        /// </summary>
        public const string NotificationPublisherName = "ForeachAwaitPublisher";

        /// <summary>
        /// The total number of Mediator messages that were discovered.
        /// </summary>
        public const int TotalMessages = 112;

        /// <summary>
        /// Constructor for DI, should not be used by consumer.
        /// </summary>
        public Mediator(global::System.IServiceProvider sp)
        {
            Services = sp;
        }



        /// <summary>
        /// Send a request of type global::TestCode.TestRequest0.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest0 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest0.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest15.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest15 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest15.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest14.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest14 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest14.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest13.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest13 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest13.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest12.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest12 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest12.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest11.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest11 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest11.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest9.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest9 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest9.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest8.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest8 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest8.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest7.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest7 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest7.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest6.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest6 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest6.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest5.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest5 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest5.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest4.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest4 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest4.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest3.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest3 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest3.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest2.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest2 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest2.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest1.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest1 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest1.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a request of type global::TestCode.TestRequest10.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestRequest10 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestRequest10.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand15.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand15 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand15.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand14.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand14 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand14.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand13.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand13 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand13.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand12.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand12 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand12.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand11.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand11 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand11.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand10.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand10 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand10.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand9.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand9 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand9.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand8.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand8 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand8.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand7.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand7 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand7.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand6.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand6 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand6.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand5.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand5 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand5.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand4.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand4 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand4.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand3.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand3 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand3.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand2.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand2 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand2.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand1.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand1 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand1.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::TestCode.TestCommand0.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestCommand0 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestCommand0.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery4.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery4 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery4.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery3.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery3 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery3.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery2.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery2 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery2.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery1.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery1 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery1.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery0.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery0 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery0.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery5.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery5 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery5.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery6.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery6 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery6.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery7.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery7 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery7.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery8.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery8 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery8.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery15.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery15 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery15.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery14.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery14 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery14.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery13.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery13 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery13.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery12.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery12 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery12.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery11.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery11 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery11.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery10.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery10 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery10.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::TestCode.TestQuery9.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::System.Int32> Send(
            global::TestCode.TestQuery9 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestQuery9.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest15.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest15 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest15.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest14.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest14 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest14.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest13.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest13 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest13.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest12.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest12 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest12.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest10.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest10 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest10.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest9.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest9 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest9.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest8.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest8 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest8.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest7.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest7 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest7.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest6.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest6 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest6.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest5.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest5 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest5.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest4.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest4 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest4.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest3.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest3 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest3.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest2.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest2 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest2.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest11.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest11 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest11.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest1.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest1 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest1.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from request type global::TestCode.TestStreamRequest0.
        /// Throws <see cref="global::System.ArgumentNullException"/> if request is null.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamRequest0 request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(request, nameof(request));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamRequest0.Handle(this, request, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand13.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand13 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand13.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand12.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand12 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand12.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand11.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand11 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand11.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand10.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand10 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand10.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand9.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand9 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand9.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand8.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand8 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand8.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand7.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand7 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand7.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand6.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand6 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand6.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand5.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand5 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand5.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand4.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand4 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand4.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand2.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand2 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand2.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand1.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand1 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand1.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand0.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand0 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand0.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand3.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand3 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand3.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand14.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand14 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand14.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from command type global::TestCode.TestStreamCommand15.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamCommand15 command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamCommand15.Handle(this, command, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery5.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery5 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery5.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery4.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery4 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery4.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery3.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery3 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery3.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery2.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery2 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery2.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery1.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery1 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery1.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery0.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery0 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery0.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery6.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery6 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery6.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery7.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery7 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery7.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery9.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery9 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery9.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery8.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery8 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery8.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery15.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery15 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery15.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery14.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery14 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery14.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery13.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery13 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery13.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery12.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery12 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery12.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery11.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery11 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery11.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Create a stream from query type global::TestCode.TestStreamQuery10.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32> CreateStream(
            global::TestCode.TestStreamQuery10 query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Wrapper_For_TestCode_TestStreamQuery10.Handle(this, query, cancellationToken);
        }

        /// <summary>
        /// Send request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if request does not implement <see cref="global::Mediator.IRequest{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (request)
            {
                case global::TestCode.TestRequest0 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest15 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest14 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest13 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest12 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest11 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest9 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest8 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest7 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest6 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest5 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest4 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest3 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest2 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest1 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                case global::TestCode.TestRequest10 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(request, cancellationToken);
                }
                default:
                {
                    ThrowInvalidRequest(request, nameof(request));
                    return default;
                }
            }
        }

        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (request)
            {
                case global::TestCode.TestRequest0 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest15 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest14 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest13 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest12 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest11 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest9 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest8 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest7 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest6 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest5 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest4 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest3 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest2 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest1 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestRequest10 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                default:
                {
                    ThrowInvalidRequest(request, nameof(request));
                    return default!;
                }
            }
        }

        /// <summary>
        /// Create stream for request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if request does not implement <see cref="global::Mediator.IStreamRequest{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (request)
            {
                case global::TestCode.TestStreamRequest15 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest14 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest13 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest12 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest10 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest9 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest8 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest7 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest6 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest5 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest4 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest3 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest2 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest11 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest1 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamRequest0 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                default:
                {
                    ThrowInvalidStreamRequest(request, nameof(request));
                    return default!;
                }
            }
        }

        /// <summary>
        /// Send command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if command does not implement <see cref="global::Mediator.ICommand{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.ICommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (command)
            {
                case global::TestCode.TestCommand15 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand14 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand13 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand12 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand11 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand10 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand9 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand8 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand7 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand6 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand5 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand4 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand3 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand2 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand1 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::TestCode.TestCommand0 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                default:
                {
                    ThrowInvalidCommand(command, nameof(command));
                    return default;
                }
            }
        }

        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.ICommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (command)
            {
                case global::TestCode.TestCommand15 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand14 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand13 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand12 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand11 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand10 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand9 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand8 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand7 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand6 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand5 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand4 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand3 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand2 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand1 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestCommand0 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                default:
                {
                    ThrowInvalidCommand(command, nameof(command));
                    return default!;
                }
            }
        }

        /// <summary>
        /// Create stream for command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if command does not implement <see cref="global::Mediator.IStreamCommand{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamCommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (command)
            {
                case global::TestCode.TestStreamCommand13 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand12 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand11 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand10 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand9 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand8 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand7 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand6 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand5 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand4 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand2 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand1 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand0 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand3 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand14 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamCommand15 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                default:
                {
                    ThrowInvalidStreamCommand(command, nameof(command));
                    return default!;
                }
            }
        }

        /// <summary>
        /// Send query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if query does not implement <see cref="global::Mediator.IQuery{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (query)
            {
                case global::TestCode.TestQuery4 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery3 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery2 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery1 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery0 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery5 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery6 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery7 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery8 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery15 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery14 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery13 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery12 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery11 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery10 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::TestCode.TestQuery9 r:
                {
                    if (typeof(TResponse) == typeof(global::System.Int32))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::System.Int32>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                default:
                {
                    ThrowInvalidQuery(query, nameof(query));
                    return default;
                }
            }
        }

        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.IQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (query)
            {
                case global::TestCode.TestQuery4 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery3 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery2 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery1 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery0 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery5 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery6 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery7 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery8 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery15 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery14 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery13 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery12 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery11 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery10 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                case global::TestCode.TestQuery9 r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Int32, TResponse>(ref response);
                }
                default:
                {
                    ThrowInvalidQuery(query, nameof(query));
                    return default!;
                }
            }
        }

        /// <summary>
        /// Create stream for query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if query does not implement <see cref="global::Mediator.IStreamQuery{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (query)
            {
                case global::TestCode.TestStreamQuery5 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery4 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery3 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery2 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery1 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery0 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery6 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery7 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery9 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery8 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery15 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery14 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery13 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery12 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery11 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                case global::TestCode.TestStreamQuery10 r:
                {
                    var task = CreateStream(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Collections.Generic.IAsyncEnumerable<global::System.Int32>, global::System.Collections.Generic.IAsyncEnumerable<TResponse>>(ref task);
                }
                default:
                {
                    ThrowInvalidStreamQuery(query, nameof(query));
                    return default!;
                }
            }
        }

        /// <summary>
        /// Send message.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if message does not implement <see cref="global::Mediator.IMessage"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public async global::System.Threading.Tasks.ValueTask<object?> Send(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (message)
            {
                case global::Mediator.IBaseRequest request:
                    switch (request)
                    {
                        case global::TestCode.TestRequest0 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest15 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest14 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest13 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest12 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest11 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest9 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest8 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest7 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest6 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest5 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest4 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest3 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest2 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest1 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestRequest10 r: return await Send(r, cancellationToken);
                        default:
                        {
                            ThrowInvalidRequest(request, nameof(request));
                            return default;
                        }
                    }
                case global::Mediator.IBaseCommand command:
                    switch (command)
                    {
                        case global::TestCode.TestCommand15 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand14 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand13 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand12 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand11 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand10 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand9 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand8 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand7 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand6 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand5 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand4 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand3 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand2 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand1 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestCommand0 r: return await Send(r, cancellationToken);
                        default:
                        {
                            ThrowInvalidCommand(command, nameof(command));
                            return default;
                        }
                    }
                case global::Mediator.IBaseQuery query:
                    switch (query)
                    {
                        case global::TestCode.TestQuery4 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery3 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery2 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery1 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery0 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery5 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery6 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery7 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery8 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery15 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery14 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery13 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery12 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery11 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery10 r: return await Send(r, cancellationToken);
                        case global::TestCode.TestQuery9 r: return await Send(r, cancellationToken);
                        default:
                        {
                            ThrowInvalidQuery(query, nameof(query));
                            return default;
                        }
                    }
                default:
                    ThrowInvalidMessage(message, nameof(message));
                    return default!;
            }
        }

        /// <summary>
        /// Create stream.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if message does not implement <see cref="global::Mediator.IStreamMessage"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<object?> CreateStream(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (message)
            {
                case global::Mediator.IBaseStreamRequest request:
                    switch (request)
                    {
                        case global::TestCode.TestStreamRequest15 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest14 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest13 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest12 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest10 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest9 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest8 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest7 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest6 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest5 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest4 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest3 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest2 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest11 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest1 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamRequest0 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        default:
                        {
                            ThrowInvalidStreamMessage(message, nameof(message));
                            return default!;
                        }
                    }
                case global::Mediator.IBaseStreamCommand command:
                    switch (command)
                    {
                        case global::TestCode.TestStreamCommand13 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand12 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand11 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand10 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand9 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand8 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand7 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand6 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand5 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand4 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand2 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand1 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand0 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand3 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand14 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamCommand15 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        default:
                        {
                            ThrowInvalidStreamMessage(message, nameof(message));
                            return default!;
                        }
                    }
                case global::Mediator.IBaseStreamQuery query:
                    switch (query)
                    {
                        case global::TestCode.TestStreamQuery5 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery4 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery3 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery2 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery1 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery0 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery6 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery7 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery9 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery8 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery15 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery14 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery13 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery12 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery11 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        case global::TestCode.TestStreamQuery10 m:
                        {
                            var value = CreateStream(m, cancellationToken);
                            return AsyncWrapper(value);
                        }
                        default:
                        {
                            ThrowInvalidStreamMessage(message, nameof(message));
                            return default!;
                        }
                    }
                default:
                    ThrowInvalidStreamMessage(message, nameof(message));
                    return default!;
            }

            static async global::System.Collections.Generic.IAsyncEnumerable<object?> AsyncWrapper<T>(global::System.Collections.Generic.IAsyncEnumerable<T> wrapped, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default) where T : struct
            {
                await foreach (var value in global::System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation(wrapped, cancellationToken))
                {
                    yield return value;
                }
            }
        }

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if notification does not implement <see cref="global::Mediator.INotification"/>.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// Drops messages
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            object notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (notification)
            {
                case global::TestCode.TestNotification0 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification1 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification2 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification3 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification4 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification5 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification6 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification7 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification8 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification9 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification10 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification11 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification12 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification13 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification14 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification15 n: return Publish(n, cancellationToken);
                default:
                {
                    ThrowInvalidNotification(notification, nameof(notification));
                    return default;
                }
            }
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification0.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification0 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification0.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification1.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification1 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification1.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification2.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification2 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification2.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification3.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification3 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification3.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification4.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification4 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification4.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification5.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification5 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification5.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification6.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification6 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification6.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification7.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification7 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification7.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification8.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification8 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification8.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification9.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification9 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification9.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification10.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification10 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification10.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification11.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification11 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification11.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification12.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification12 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification12.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification13.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification13 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification13.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification14.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification14 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification14.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Send a notification of type global::TestCode.TestNotification15.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            global::TestCode.TestNotification15 notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(notification, nameof(notification));

            return _containerMetadata.Wrapper_For_TestCode_TestNotification15.Handle(this, notification, cancellationToken);
        }

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if notification does not implement <see cref="global::Mediator.INotification"/>.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish<TNotification>(
            TNotification notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
            where TNotification : global::Mediator.INotification
        {
            switch (notification)
            {
                case global::TestCode.TestNotification0 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification1 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification2 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification3 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification4 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification5 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification6 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification7 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification8 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification9 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification10 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification11 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification12 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification13 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification14 n: return Publish(n, cancellationToken);
                case global::TestCode.TestNotification15 n: return Publish(n, cancellationToken);
                default:
                {
                    ThrowInvalidNotification(notification, nameof(notification));
                    return default;
                }
            }
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowMissingHandler(object msg) =>
            throw new global::Mediator.MissingMessageHandlerException(msg);

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidMessage<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IMessage))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidRequest<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseRequest))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidCommand<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseCommand))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidQuery<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseQuery))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamMessage<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IStreamMessage))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamRequest<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamRequest))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamCommand<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamCommand))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamQuery<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamQuery))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowArgumentNull(string? paramName) =>
            throw new global::System.ArgumentNullException(paramName);

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidMessage<T>(T msg) =>
            throw new global::Mediator.InvalidMessageException(msg);

        private static void ThrowIfNull<T>(T? argument, string paramName)
        {
            if (argument == null)
                ThrowArgumentNull(paramName);
        }

        private static void ThrowInvalidNotification<T>(T? argument, string paramName)
        {
            if (argument == null)
                ThrowArgumentNull(paramName);
            else if (!(argument is global::Mediator.INotification))
                ThrowInvalidMessage(argument);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception> exceptions) =>
            throw new global::System.AggregateException(exceptions);

        private static void MaybeThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception>? exceptions)
        {
            if (exceptions != null)
            {
                ThrowAggregateException(exceptions);
            }
        }
    }
}
